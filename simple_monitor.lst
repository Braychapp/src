
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
0800ce18 l    d  .rodata	00000000 .rodata
0801cbf0 l    d  .ARM	00000000 .ARM
0801cbf8 l    d  .init_array	00000000 .init_array
0801cc00 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000c2c l    d  .bss	00000000 .bss
20001df4 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801d830 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800cda8 l       .text	00000000 LoopCopyDataInit
0800cda0 l       .text	00000000 CopyDataInit
0800cdbc l       .text	00000000 LoopFillZerobss
0800cdb6 l       .text	00000000 FillZerobss
0800cdce l       .text	00000000 LoopForever
0800cde8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800ce00 l     O .text	00000000 __EH_FRAME_BEGIN__
080001c0 l     F .text	00000000 deregister_tm_clones
080001dc l     F .text	00000000 register_tm_clones
08000200 l     F .text	00000000 __do_global_dtors_aux
20000c2c l       .bss	00000001 completed.1
0801cc00 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000228 l     F .text	00000000 frame_dummy
20000c30 l       .bss	00000018 object.0
0801cbfc l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 bc_asm.o
0800026a l       .text	00000000 busy_delay
0800027a l       .text	00000000 blink_led
0800026e l       .text	00000000 delay_1oop
08000280 l       .text	00000000 start_loop
08000296 l       .text	00000000 end_loop
080002a2 l       .text	00000000 led_delay
08000304 l       .text	00000000 first_light
080002b8 l       .text	00000000 led_1oop
080002e6 l       .text	00000000 else1
080002d6 l       .text	00000000 else2
080002f2 l       .text	00000000 else3
080002fe l       .text	00000000 exit
08000348 l       .text	00000000 all_off_loop
08000352 l       .text	00000000 pattern_loop
080003b4 l       .text	00000000 win_or_lose
08000364 l       .text	00000000 toggle_light
0800039e l       .text	00000000 reset_iterator
080003a6 l       .text	00000000 update_iterator
08000388 l       .text	00000000 toggle_light_first
080003c8 l       .text	00000000 final_toggle
080003d4 l       .text	00000000 winner
080003fa l       .text	00000000 loser
080003e6 l       .text	00000000 winner_loop
080003de l       .text	00000000 winner_delay
00000032 l       *ABS*	00000000 I2C_Address
00000028 l       *ABS*	00000000 X_LO
00000029 l       *ABS*	00000000 X_HI
0000002b l       *ABS*	00000000 Y_HI
000fffff l       *ABS*	00000000 READ_DELAY
000003e8 l       *ABS*	00000000 TIME_MULTIPLIER
08000424 l     F .text	00000000 GAME_TIME
08000428 l       .text	00000000 TARGET
0800042c l       .text	00000000 TARGET_TIME
0007a120 l       *ABS*	00000000 WIN_DELAY
08000430 l       .text	00000000 X_VAL
08000434 l       .text	00000000 Y_VAL
08000438 l       .text	00000000 CURRENT_LED
0800043c l       .text	00000000 PREVIOUS_LED
0800045c l       .text	00000000 bc_tick
0800052c l       .text	00000000 game_lose
08000566 l       .text	00000000 do_nothing
0800049e l       .text	00000048 accel_to_LED
080004e6 l       .text	00000028 CORRECT_LED
0800050e l       .text	00000000 WRONG_LED
080004b0 l       .text	00000000 X_NEGATIVE
080004d4 l       .text	00000000 Y_NEGATIVE
080004c4 l       .text	00000000 X_IS_ZERO
080004bc l       .text	00000000 X_NEGATIVE_Y_NEGATIVE
080004d0 l       .text	00000000 X_NEGATIVE_Y_IS_ZERO
080004cc l       .text	00000000 X_IS_ZERO_Y_NEGATIVE
080004dc l       .text	00000000 Y_IS_ZERO
0800053e l       .text	00000000 game_win
08000548 l       .text	00000000 toggle_loop
08000552 l       .text	00000000 win_loop
08000580 l       .text	00000000 LEDaddress
20000000 l       .data	00000000 a5_timeout
20000004 l       .data	00000000 a5_delay
00000000 l    df *ABS*	00000000 mycode.o
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08000c18 l     F .text	0000013c _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 vfprintf.c
080022b8 l     F .text	0000006a __sbprintf
0800d3b4 l     O .rodata	00000010 blanks.1
0800d3c4 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
08002460 l     F .text	00000126 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08003670 l     F .text	00000004 __fp_lock
08003680 l     F .text	00000004 __fp_unlock
08003684 l     F .text	000000d8 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0800d3d8 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
08005814 l     F .text	00000076 __sprint_r.part.0
080064ec l     F .text	0000006a __sbprintf
0800d500 l     O .rodata	00000010 blanks.1
0800d510 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
080066cc l     F .text	00000062 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 bc_hook.c
00000000 l    df *ABS*	00000000 watchdog.c
20000c80 l     O .bss	00000014 hiwdg
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000c94 l     O .bss	00000004 count.3
20000d38 l     O .bss	00000004 saved.1
200009c0 l     O .data	00000004 buf.2
200009c4 l     O .data	00000004 printPrompt.4
0800dca4 l     O .rodata	00000006 __FUNCTION__.0
00000000 l    df *ABS*	00000000 dump.c
20000d3c l     O .bss	00000004 address.1
200009c8 l     O .data	00000004 count.0
00000000 l    df *ABS*	00000000 syscall.c
20000d40 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 terminal.c
0800851c l     F .text	0000007c USBD_CDC_DataIn
20000d44 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
08008870 l     F .text	0000007c Uncompress
20001090 l     O .bss	00000014 buf.0
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
200010a4 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
0800a7f8 l     F .text	0000002a I2C_TransferConfig
0800a822 l     F .text	00000098 I2C_IsAcknowledgeFailed
0800a8ba l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
0800a90e l     F .text	00000064 I2C_WaitOnFlagUntilTimeout
0800a972 l     F .text	00000066 I2C_RequestMemoryWrite
0800a9d8 l     F .text	00000064 I2C_RequestMemoryRead
0800aa3c l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800ad66 l     F .text	00000094 SPI_WaitFifoStateUntilTimeout
0800adfa l     F .text	00000082 SPI_WaitFlagStateUntilTimeout
0800ae7c l     F .text	0000004c SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 stm32f3xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
0800b57c l     F .text	00000016 USBD_CtlError.constprop.0
200010a8 l     O .bss	00000001 cfgidx.0
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
0800b946 l     F .text	00000012 USBD_CDC_DataIn
0800b958 l     F .text	00000028 USBD_CDC_EP0_RxReady
0800b980 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
0800b98c l     F .text	0000000c USBD_CDC_GetHSCfgDesc
0800b998 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
0800b9b0 l     F .text	0000002e USBD_CDC_DataOut
0800b9de l     F .text	00000056 USBD_CDC_Setup
0800ba34 l     F .text	0000003a USBD_CDC_DeInit
0800ba6e l     F .text	0000008c USBD_CDC_Init
20000a90 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20001224 l     O .bss	00000230 mem.0
00000000 l    df *ABS*	00000000 usbd_desc.c
0800bdb4 l     F .text	0000002a IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
0800be8c l     F .text	00000004 CDC_Itf_DeInit
0800be90 l     F .text	00000048 CDC_Itf_Control
0800bed8 l     F .text	0000001c CDC_Itf_Receive
0800bef4 l     F .text	00000018 CDC_Itf_Init
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
0800bf0c l     F .text	00000088 SPIx_Init
0800bf94 l     F .text	00000040 SPIx_WriteRead
0800bfd4 l     F .text	00000074 I2Cx_Init
20001d54 l     O .bss	00000038 I2cHandle
20001d8c l     O .bss	00000060 SpiHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20001dec l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20001df0 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 i3g4250d.c
00000000 l    df *ABS*	00000000 lsm303agr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800cdec l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0801cc04 l       .fini_array	00000000 __fini_array_end
0801cc00 l       .fini_array	00000000 __fini_array_start
0801cc00 l       .init_array	00000000 __init_array_end
0801cbf8 l       .init_array	00000000 __preinit_array_end
0801cbf8 l       .init_array	00000000 __init_array_start
0801cbf8 l       .init_array	00000000 __preinit_array_start
0800cde8  w    F .text	00000002 RTC_Alarm_IRQHandler
080192e8 g     O .rodata	00000008 RTC_BKP19R_fields
0801ca28 g     O .rodata	00000010 APBAHBPrescTable
0801b190 g     O .rodata	00000050 TIM2_SR_fields
08011638 g     O .rodata	00000100 CAN_F10R1_fields
0801a300 g     O .rodata	00000008 TIM16_DMAR_fields
0800078c g     F .text	00000010 putchar
0800cde8  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
080051f4 g     F .text	00000040 _mprec_log10
08017f18 g     O .rodata	00000008 I2C1_RXDR_fields
080078e8 g     F .text	0000002c .hidden __aeabi_dcmpun
0800c4d8 g     F .text	00000020 LSM303DLHC_AccFilterCmd
0800cde8  w    F .text	00000002 TIM8_CC_IRQHandler
0801b338 g     O .rodata	00000030 TIM6_CR1_fields
08017e00 g     O .rodata	00000048 I2C1_ICR_fields
08005290 g     F .text	00000064 __any_on
08008514 g     F .text	00000004 _isatty_r
0800d4b0 g     O .rodata	00000028 __mprec_tinytens
20000ce8 g     O .bss	00000050 input_b
080078ac g     F .text	00000012 .hidden __aeabi_dcmple
0801b140 g     O .rodata	00000008 TIM2_PSC_fields
0801a508 g     O .rodata	00000028 TIM17_CCMR1_Output_fields
080009d4 g     F .text	000000ba strcpy
08015b10 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08007c68 g     F .text	00000010 _getpid
08017f70 g     O .rodata	00000008 I2C1_TXDR_fields
0800079c g     F .text	00000068 _puts_r
0800be54 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
08012838 g     O .rodata	00000100 CAN_F19R1_fields
080077e8 g     F .text	0000007a .hidden __cmpdf2
08008940 g     F .text	00000054 DecodeWriteRegister
0800a6cc g     F .text	000000bc HAL_PCD_EP_ClrStall
0801a230 g     O .rodata	00000008 TIM16_CCR1_fields
0800cde8  w    F .text	00000002 DebugMon_Handler
08008518 g     F .text	00000004 _lseek_r
08016e78 g     O .rodata	00000020 FPU_MVFR1_fields
0800bc4e g     F .text	0000001a HAL_PCD_ResetCallback
0800a7be g     F .text	0000001c PCD_WritePMA
08013038 g     O .rodata	00000100 CAN_F22R1_fields
08007e70 g     F .text	00000048 bcGame
08014c38 g     O .rodata	000000e0 CAN_FA1R_fields
20000e6c g     O .bss	00000224 hUSBDDevice
0801b148 g     O .rodata	00000048 TIM2_SMCR_fields
08018260 g     O .rodata	00000020 NVIC_IPR1_fields
0801d890 g     O .parsetable	0000000c CmdTestE
080077e8 g     F .text	0000007a .hidden __eqdf2
08011e38 g     O .rodata	00000100 CAN_F14R1_fields
0801b888 g     O .rodata	00000008 TIM8_PSC_fields
0800c94e g     F .text	0000001c I3G4250D_ReadID
08019fc0 g     O .rodata	00000030 TIM15_EGR_fields
08008598 g     F .text	0000004c CmdStats
0800c7b2 g     F .text	0000002e L3GD20_FilterConfig
0800a788 g     F .text	00000036 HAL_PCDEx_PMAConfig
0801b1e0 g     O .rodata	00000140 TIM2_registers
08019f60 g     O .rodata	00000058 TIM15_DIER_fields
080162c0 g     O .rodata	00000008 DMA1_CMAR3_fields
08017180 g     O .rodata	00000100 GPIOA_BSRR_fields
08016250 g     O .rodata	00000060 DMA1_CCR7_fields
08009dfc g     F .text	000001b8 HAL_PCD_EP_Close
0801bda0 g     O .rodata	00000008 TSC_IOG6CR_fields
08000440 g     F .text	00000000 bc_tilt
08011170 g     O .rodata	00000028 ADC1_SQR1_fields
08000c10 g     F .text	00000006 strtok_r
08007358 g     F .text	0000005a .hidden __floatdidf
08014ee8 g     O .rodata	000000e0 CAN_FS1R_fields
0800700c g     F .text	0000002c _kill_r
0801a900 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
08019528 g     O .rodata	00000010 RTC_SHIFTR_fields
0800075c g     F .text	00000028 printf
0800c736 g     F .text	00000040 L3GD20_EnableIT
08015330 g     O .rodata	00000028 CAN_TI1R_fields
0800b3b6 g     F .text	00000016 USBD_SetClassConfig
080181a0 g     O .rodata	00000020 NVIC_IPR14_fields
08006cbc g     F .text	0000003c _wcrtomb_r
0800cde8  w    F .text	00000002 TIM1_CC_IRQHandler
080097e4 g     F .text	00000068 HAL_NVIC_SetPriority
08006db4 g     F .text	0000004c _signal_r
08011228 g     O .rodata	000001b0 ADC1_registers
0800bc36 g     F .text	00000010 HAL_PCD_DataInStageCallback
0801b080 g     O .rodata	00000018 TIM2_CR2_fields
08016ff8 g     O .rodata	00000008 Flash_WRPR_fields
080057ec g     F .text	00000020 __sseek
08003848 g     F .text	00000008 __sinit
08016070 g     O .rodata	00000060 DMA1_CCR2_fields
08006558 g     F .text	000000b0 __swbuf_r
0800cde8  w    F .text	00000002 HardFault_Handler
08000584 g     F .text	0000000a _bc_a5_tick_handler
0801be38 g     O .rodata	00000100 TSC_IOHCR_fields
08015c78 g     O .rodata	00000020 CRC_CR_fields
080068fc g     F .text	00000040 _setlocale_r
0800375c g     F .text	0000002e __sfmoreglue
080183a0 g     O .rodata	00000008 NVIC_ISER0_fields
08004850 g     F .text	00000002 __malloc_unlock
08019db0 g     O .rodata	00000008 TIM15_ARR_fields
08019318 g     O .rodata	00000008 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
0801a9f0 g     O .rodata	00000008 TIM1_CCR3_fields
0801ab80 g     O .rodata	00000008 TIM1_DMAR_fields
08019eb8 g     O .rodata	00000008 TIM15_CCR1_fields
0800cde8  w    F .text	00000002 USB_HP_IRQHandler
0801c488 g     O .rodata	00000010 USART1_RTOR_fields
08018c68 g     O .rodata	00000070 RCC_AHBENR_fields
0801b020 g     O .rodata	00000018 TIM2_CNT_fields
08017f78 g     O .rodata	000000b0 I2C1_registers
08007e30 g     F .text	0000000e SysTick_Handler
08019670 g     O .rodata	00000008 RTC_WPR_fields
08019538 g     O .rodata	00000008 RTC_SSR_fields
08009a20 g     F .text	0000000a HAL_GPIO_WritePin
0801bd80 g     O .rodata	00000008 TSC_IOG2CR_fields
0800bb52 g     F .text	0000002e USBD_CDC_ReceivePacket
0800cde8  w    F .text	00000002 PVD_IRQHandler
08016350 g     O .rodata	00000008 DMA1_CPAR7_fields
0800c49c g     F .text	0000001c LSM303DLHC_AccRebootCmd
0801b328 g     O .rodata	00000010 TIM6_CNT_fields
0801ab08 g     O .rodata	00000078 TIM1_DIER_fields
0800bc46 g     F .text	00000008 HAL_PCD_SOFCallback
080180e0 g     O .rodata	00000008 NVIC_ICPR0_fields
08004754 g     F .text	000000f8 memmove
0800cde8  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800c18c g     F .text	00000060 GYRO_IO_Init
080182a0 g     O .rodata	00000020 NVIC_IPR2_fields
0801cc04 g       *ABS*	00000000 _sidata
08003834 g     F .text	00000014 _cleanup
08009700 g     F .text	00000038 HAL_RCC_GetHCLKFreq
0800cde8  w    F .text	00000002 PendSV_Handler
0801d884 g     O .parsetable	0000000c CmdButtonE
080180e8 g     O .rodata	00000008 NVIC_ICPR1_fields
0800cde8  w    F .text	00000002 NMI_Handler
0800984c g     F .text	00000018 HAL_NVIC_EnableIRQ
08004854 g     F .text	0000004c _Balloc
0801cbf8 g       .ARM	00000000 __exidx_end
08000bac g     F .text	00000064 __strtok_r
0800cde8  w    F .text	00000002 EXTI3_IRQHandler
08009694 g     F .text	0000006c HAL_RCC_GetSysClockFreq
0800c0d0 g     F .text	0000001c BSP_LED_Off
08016308 g     O .rodata	00000008 DMA1_CNDTR5_fields
0801b480 g     O .rodata	00000098 TIM8_CCER_fields
08014938 g     O .rodata	00000100 CAN_F8R2_fields
080077d8 g     F .text	0000008a .hidden __gtdf2
0801d920 g       .parsetable	00000000 _parsetable_end
08018cd8 g     O .rodata	00000048 RCC_AHBRSTR_fields
08000618 g     F .text	0000000c __errno
08019378 g     O .rodata	00000008 RTC_BKP6R_fields
08015358 g     O .rodata	00000028 CAN_TI2R_fields
0800b212 g     F .text	0000009e HAL_IWDG_Init
0800b594 g     F .text	000001f4 USBD_StdDevReq
0800ca70 g     F .text	0000002e I3G4250D_FilterConfig
0800aa8e g     F .text	00000090 HAL_I2C_Init
08003eac g     F .text	00000004 __localeconv_l
080183b0 g     O .rodata	00000008 NVIC_ISER2_fields
0801d8fc g     O .parsetable	0000000c CmdWE
0800ab1e  w    F .text	00000002 HAL_I2C_MspDeInit
080150d0 g     O .rodata	00000020 CAN_RDH0R_fields
08016e18 g     O .rodata	00000020 FPU_FPDSCR_fields
0800ca9e g     F .text	0000002e I3G4250D_FilterCmd
0800bd9c g     F .text	0000000c USBD_VCP_DeviceDescriptor
08009a34 g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
08009738  w    F .text	00000002 HAL_MspInit
08011538 g     O .rodata	00000100 CAN_F0R2_fields
0801bdb0 g     O .rodata	00000008 TSC_IOG8CR_fields
0800bd34 g     F .text	00000026 USBD_LL_IsStallEP
08011438 g     O .rodata	00000100 CAN_F0R1_fields
0801a000 g     O .rodata	00000020 TIM15_SMCR_fields
0800bce8 g     F .text	0000000e USBD_LL_Start
0800c2dc g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
0800c3a0 g     F .text	00000040 BSP_ACCELERO_Init
0800b3ac g     F .text	0000000a USBD_Start
0800850a g     F .text	0000000a _fstat_r
08009a2a g     F .text	00000008 HAL_GPIO_TogglePin
0801b6e0 g     O .rodata	00000048 TIM8_CR1_fields
20000c7c g     O .bss	00000004 errno
08016f10 g     O .rodata	00000008 Flash_AR_fields
08013c38 g     O .rodata	00000100 CAN_F2R1_fields
08015ab8 g     O .rodata	00000058 COMP_COMP4_CSR_fields
080176b8 g     O .rodata	00000040 GPIOB_AFRH_fields
080057a8 g     F .text	00000004 __seofread
0800ce18 g       .text	00000000 _etext
08016ae8 g     O .rodata	00000010 EXTI_PR2_fields
0801c598 g     O .rodata	00000028 USB_FS_FNR_fields
20000c2c g       .bss	00000000 _sbss
08015c08 g     O .rodata	00000070 COMP_registers
08014138 g     O .rodata	00000100 CAN_F4R2_fields
0800bd98 g     F .text	00000002 USBD_static_free
080162b0 g     O .rodata	00000008 DMA1_CMAR1_fields
0801b0a8 g     O .rodata	00000060 TIM2_DIER_fields
08007874 g     F .text	00000010 .hidden __aeabi_cdcmple
0801bd78 g     O .rodata	00000008 TSC_IOG1CR_fields
0801a4d0 g     O .rodata	00000020 TIM17_CCER_fields
0801b890 g     O .rodata	00000008 TIM8_RCR_fields
0801a238 g     O .rodata	00000010 TIM16_CNT_fields
080177b8 g     O .rodata	00000100 GPIOB_BSRR_fields
08012338 g     O .rodata	00000100 CAN_F16R2_fields
08011080 g     O .rodata	00000018 ADC1_OFR1_fields
08013538 g     O .rodata	00000100 CAN_F24R2_fields
08019310 g     O .rodata	00000008 RTC_BKP23R_fields
08019ec0 g     O .rodata	00000008 TIM15_CCR2_fields
08010e78 g     O .rodata	00000098 ADC1_CFGR_fields
080192b8 g     O .rodata	00000008 RTC_BKP13R_fields
0800b39e g     F .text	0000000e USBD_RegisterClass
08012c38 g     O .rodata	00000100 CAN_F20R1_fields
0801c348 g     O .rodata	00000060 USART1_ICR_fields
08013738 g     O .rodata	00000100 CAN_F25R2_fields
0801bd90 g     O .rodata	00000008 TSC_IOG4CR_fields
08013b38 g     O .rodata	00000100 CAN_F27R2_fields
0801b8e0 g     O .rodata	00000078 TIM8_SR_fields
0801c5c0 g     O .rodata	00000050 USB_FS_ISTR_fields
080162b8 g     O .rodata	00000008 DMA1_CMAR2_fields
08019328 g     O .rodata	00000008 RTC_BKP26R_fields
08011198 g     O .rodata	00000028 ADC1_SQR2_fields
0801a538 g     O .rodata	00000010 TIM17_CNT_fields
0801c9f0 g     O .rodata	00000008 WWDG_SR_fields
0800988c g     F .text	00000188 HAL_GPIO_Init
08016cb8 g     O .rodata	000000c0 EXTI_registers
0800b55e g     F .text	00000006 USBD_LL_SetSpeed
20000b30 g     O .data	00000004 BUTTON_PORT
0800c3e0 g     F .text	00000010 BSP_ACCELERO_GetXYZ
0800b324 g     F .text	00000050 HAL_IWDG_Refresh
080180f8 g     O .rodata	00000008 NVIC_ICTR_fields
0801b320 g     O .rodata	00000008 TIM6_ARR_fields
08015380 g     O .rodata	000000b0 CAN_TSR_fields
08000248 g     F .text	00000022 add_test
080083d0 g     F .text	000000b0 DumpBuffer
08000784 g     F .text	00000006 _putchar_r
08017280 g     O .rodata	00000080 GPIOA_IDR_fields
0801c768 g     O .rodata	00000050 USB_FS_USB_EP3R_fields
0800bc6a g     F .text	00000002 HAL_PCD_ResumeCallback
08004620 g     F .text	00000134 memcpy
08007864 g     F .text	00000020 .hidden __aeabi_cdrcmple
08014738 g     O .rodata	00000100 CAN_F7R2_fields
0801aa28 g     O .rodata	00000010 TIM1_CNT_fields
0800c1ec g     F .text	00000044 GYRO_IO_Write
08000814 g     F .text	00000174 setvbuf
08007c8c g     F .text	0000005c CmdLED
0801d908 g     O .parsetable	0000000c wdogTestE
20000c2c g     O .data	00000000 .hidden __TMC_END__
0801ac38 g     O .rodata	00000078 TIM1_SR_fields
08018180 g     O .rodata	00000020 NVIC_IPR13_fields
08019ff0 g     O .rodata	00000008 TIM15_PSC_fields
0800b7b8 g     F .text	000000ae USBD_StdEPReq
08003674 g     F .text	0000000c _cleanup_r
08017080 g     O .rodata	00000040 GPIOA_AFRH_fields
080072e0 g     F .text	00000022 .hidden __floatsidf
0800cbbe g     F .text	00000020 LSM303AGR_AccInit
08015db8 g     O .rodata	00000010 DAC_DHR12RD_fields
08015a10 g     O .rodata	00000058 COMP_COMP2_CSR_fields
0801b7b0 g     O .rodata	00000078 TIM8_DIER_fields
08010f60 g     O .rodata	00000010 ADC1_DIFSEL_fields
080077e0 g     F .text	00000082 .hidden __ltdf2
0800c104 g     F .text	00000074 BSP_PB_Init
0800cde8  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
08007e3e g     F .text	00000012 EXTI0_IRQHandler
0801b878 g     O .rodata	00000010 TIM8_OR_fields
0800cde8  w    F .text	00000002 I2C2_EV_IRQHandler
08015200 g     O .rodata	00000020 CAN_TDH0R_fields
0801c7b8 g     O .rodata	00000050 USB_FS_USB_EP4R_fields
08007964 g     F .text	00000000 .hidden __aeabi_uldivmod
0801c9f8 g     O .rodata	00000030 WWDG_registers
0801a638 g     O .rodata	00000008 TIM17_RCR_fields
08000804 g     F .text	00000010 puts
0800b91a g     F .text	00000016 USBD_CtlSendStatus
0800cde8  w    F .text	00000002 FPU_IRQHandler
080097a4  w    F .text	0000001a HAL_Delay
0800b788 g     F .text	00000030 USBD_StdItfReq
0801b6a0 g     O .rodata	00000008 TIM8_CCR4_fields
200009cc g     O .data	00000004 SystemCoreClock
080080c8 g     F .text	00000020 mes_IWDGRefresh
0801a060 g     O .rodata	00000120 TIM15_registers
0800a08c g     F .text	00000116 HAL_PCD_EP_Transmit
080005ec g     F .text	00000012 my_Tick
08005198 g     F .text	0000005c __ratio
08013e38 g     O .rodata	00000100 CAN_F3R1_fields
0800b866 g     F .text	00000028 USBD_ParseSetupRequest
0801afe0 g     O .rodata	00000010 TIM2_CCR1_fields
08015e08 g     O .rodata	00000010 DAC_SWTRIGR_fields
0800cde8  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
08011c38 g     O .rodata	00000100 CAN_F13R1_fields
08004000 g     F .text	00000010 malloc
08018038 g     O .rodata	00000008 IWDG_RLR_fields
0800073c g     F .text	0000001e _printf_r
0800a7da g     F .text	0000001c PCD_ReadPMA
08006e00 g     F .text	00000056 _raise_r
08007d10 g     F .text	0000004c CmdGyro
08006620 g     F .text	00000040 __assert_func
08014ed8 g     O .rodata	00000010 CAN_FMR_fields
0800d3e8 g     O .rodata	000000c8 __mprec_tens
08018838 g     O .rodata	00000040 OPAMP_registers
08016300 g     O .rodata	00000008 DMA1_CNDTR4_fields
080180b8 g     O .rodata	00000008 NVIC_IABR1_fields
08010e28 g     O .rodata	00000030 ADC1_2_registers
20000afc g     O .data	0000001c VCP_Desc
08016a18 g     O .rodata	000000d0 EXTI_PR1_fields
0800cc2c g     F .text	00000020 LSM303AGR_AccFilterCmd
0800cde8  w    F .text	00000002 UsageFault_Handler
0801b6a8 g     O .rodata	00000020 TIM8_CCR5_fields
0800cde8  w    F .text	00000002 ADC1_2_IRQHandler
20000c48 g     O .bss	00000004 __malloc_top_pad
20000c98 g     O .bss	00000050 input
08007038 g     F .text	00000004 _getpid_r
08014038 g     O .rodata	00000100 CAN_F4R1_fields
08011218 g     O .rodata	00000010 ADC1_TR3_fields
08016328 g     O .rodata	00000008 DMA1_CPAR2_fields
0800c642 g     F .text	00000002 L3GD20_DeInit
20000c2c g       .bss	00000000 __bss_start__
0801a2b8 g     O .rodata	00000048 TIM16_DIER_fields
08009a14 g     F .text	0000000c HAL_GPIO_ReadPin
080180d8 g     O .rodata	00000008 NVIC_ICER2_fields
08000d70 g     F .text	00000018 strtoul
080072c0 g     F .text	0000001e .hidden __aeabi_ui2d
08003eb0 g     F .text	00000008 _localeconv_r
0800c902 g     F .text	00000034 I3G4250D_Init
0801b688 g     O .rodata	00000008 TIM8_CCR1_fields
08014b38 g     O .rodata	00000100 CAN_F9R2_fields
08015d90 g     O .rodata	00000008 DAC_DHR12L2_fields
08004ab0 g     F .text	0000005c __i2b
08003b34 g     F .text	000002f0 __sfvwrite_r
0800b564 g     F .text	00000018 USBD_LL_SOF
08006e58 g     F .text	00000064 __sigtramp_r
20000000 g       .data	00000000 _sdata
0800cde8  w    F .text	00000002 SPI1_IRQHandler
08015308 g     O .rodata	00000028 CAN_TI0R_fields
0800cde8  w    F .text	00000002 CAN_SCE_IRQHandler
08007994 g     F .text	000002d0 .hidden __udivmoddi4
0800703c g     F .text	00000000 .hidden __aeabi_drsub
08011128 g     O .rodata	00000048 ADC1_SMPR2_fields
080182e0 g     O .rodata	00000020 NVIC_IPR4_fields
080084d4 g     F .text	00000030 _sbrk_r
0800056c g     F .text	00000000 lab8
0800cbbc g     F .text	00000002 LSM303AGR_AccDeInit
08018220 g     O .rodata	00000020 NVIC_IPR18_fields
0800c936 g     F .text	00000018 I3G4250D_LowPower
0800bb80 g     F .text	00000098 HAL_PCD_MspInit
0801b370 g     O .rodata	00000010 TIM6_DIER_fields
08007ff4 g     F .text	0000003c wdogTest
0801a8a0 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
0801c3a8 g     O .rodata	000000b0 USART1_ISR_fields
0800cde8  w    F .text	00000002 TIM6_DAC_IRQHandler
08017d98 g     O .rodata	00000068 I2C1_CR2_fields
0801b690 g     O .rodata	00000008 TIM8_CCR2_fields
0800a62c g     F .text	000000a0 HAL_PCD_EP_SetStall
080086ac g     F .text	0000000a _read_r
08008074 g     F .text	00000034 mes_InitIWDG
0801abf0 g     O .rodata	00000048 TIM1_SMCR_fields
08011408 g     O .rodata	00000030 CAN_ESR_fields
0800b374 g     F .text	0000002a USBD_Init
08017738 g     O .rodata	00000080 GPIOB_BRR_fields
200010ac g     O .bss	00000178 hpcd
08007898 g     F .text	00000012 .hidden __aeabi_dcmplt
08006730 g     F .text	00000034 _fclose_r
08011098 g     O .rodata	00000018 ADC1_OFR2_fields
0801ae50 g     O .rodata	00000010 TIM2_ARR_fields
08003620 g     F .text	00000050 fflush
0800c278 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000c74 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c900 g     F .text	00000002 I3G4250D_DeInit
08014a38 g     O .rodata	00000100 CAN_F9R1_fields
08019458 g     O .rodata	00000038 RTC_DR_fields
0801a9e0 g     O .rodata	00000008 TIM1_CCR1_fields
08009864 g     F .text	00000028 HAL_SYSTICK_Config
08007304 g     F .text	00000042 .hidden __extendsfdf2
08016fd0 g     O .rodata	00000008 Flash_OPTKEYR_fields
080110c8 g     O .rodata	00000018 ADC1_OFR4_fields
20000e68 g     O .bss	00000004 USBDDataIn
08007608 g     F .text	000001d0 .hidden __aeabi_ddiv
0800cde8  w    F .text	00000002 TIM8_UP_IRQHandler
20000adf g     O .data	0000001a USBD_StringSerial
08013638 g     O .rodata	00000100 CAN_F25R1_fields
08019ac0 g     O .rodata	00000018 SPI1_I2SPR_fields
08011028 g     O .rodata	00000008 ADC1_JDR1_fields
08018028 g     O .rodata	00000008 IWDG_KR_fields
0801c678 g     O .rodata	00000050 USB_FS_USB_EP0R_fields
08007048 g     F .text	00000276 .hidden __adddf3
0800c324 g     F .text	0000003c COMPASSACCELERO_IO_Write
08013338 g     O .rodata	00000100 CAN_F23R2_fields
08015cb8 g     O .rodata	00000050 CRC_registers
0801c168 g     O .rodata	000000a0 USART1_CR1_fields
08019680 g     O .rodata	00000320 RTC_registers
08014338 g     O .rodata	00000100 CAN_F5R2_fields
0801a580 g     O .rodata	00000028 TIM17_CR2_fields
08005008 g     F .text	000000c0 __b2d
0801cbf0 g       .ARM	00000000 __exidx_start
0801a1f0 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
08016f70 g     O .rodata	00000008 Flash_KEYR_fields
080073b4 g     F .text	00000254 .hidden __aeabi_dmul
0800c626 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
0801b5d8 g     O .rodata	00000060 TIM8_CCMR2_Output_fields
080188b0 g     O .rodata	00000028 PWR_CSR_fields
08019208 g     O .rodata	00000010 RTC_ALRMASSR_fields
20000a9c g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
08019ce0 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
080180b0 g     O .rodata	00000008 NVIC_IABR0_fields
0800d3b0 g     O .rodata	00000004 _global_impure_ptr
08016e38 g     O .rodata	00000040 FPU_MVFR0_fields
0801a338 g     O .rodata	00000008 TIM16_RCR_fields
080053ac g     F .text	000003d8 _realloc_r
08000650 g     F .text	00000048 __libc_init_array
0800b90a g     F .text	00000010 USBD_CtlContinueRx
080192b0 g     O .rodata	00000008 RTC_BKP12R_fields
0801c338 g     O .rodata	00000010 USART1_GTPR_fields
08009b18 g     F .text	000002e4 HAL_PCD_EP_Open
0800cde8  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800cde8  w    F .text	00000002 DMA1_Channel4_IRQHandler
0801abd0 g     O .rodata	00000010 TIM1_OR_fields
08017bc0 g     O .rodata	00000080 GPIOB_PUPDR_fields
0800a1a4 g     F .text	00000486 HAL_PCD_IRQHandler
08008134 g     F .text	00000020 CmdR
0800688c g     F .text	00000026 _fputwc_r
0800d4d8 g     O .rodata	00000028 __mprec_bigtens
0801a9f8 g     O .rodata	00000008 TIM1_CCR4_fields
0800495c g     F .text	000000b4 __s2b
08006d74 g     F .text	0000000e abort
080072c0 g     F .text	0000001e .hidden __floatunsidf
08015280 g     O .rodata	00000020 CAN_TDL1R_fields
08004e18 g     F .text	00000042 __mcmp
08018340 g     O .rodata	00000020 NVIC_IPR7_fields
0800c7e0 g     F .text	0000002e L3GD20_FilterCmd
0801d878 g     O .parsetable	0000000c lab_eightE
0801a600 g     O .rodata	00000008 TIM17_DMAR_fields
0800ab20 g     F .text	0000002e HAL_I2C_DeInit
08019ec8 g     O .rodata	00000010 TIM15_CNT_fields
08003860 g     F .text	00000014 __fp_lock_all
0800aeca g     F .text	000000a4 HAL_SPI_Init
080192a0 g     O .rodata	00000008 RTC_BKP10R_fields
08015088 g     O .rodata	00000048 CAN_MSR_fields
080190c8 g     O .rodata	000000d0 RCC_registers
0800ce00 g     F .text	00000000 _init
08015260 g     O .rodata	00000020 CAN_TDL0R_fields
08015dd0 g     O .rodata	00000008 DAC_DHR8R2_fields
08018d98 g     O .rodata	00000090 RCC_APB1RSTR_fields
0800c458 g     F .text	00000010 BSP_GYRO_GetXYZ
08019298 g     O .rodata	00000008 RTC_BKP0R_fields
08015430 g     O .rodata	00000590 CAN_registers
0801d830 g       .parsetable	00000000 _parsetable_start
08016190 g     O .rodata	00000060 DMA1_CCR5_fields
08019388 g     O .rodata	00000008 RTC_BKP8R_fields
0800c996 g     F .text	0000005e I3G4250D_INT1InterruptConfig
0801c048 g     O .rodata	00000110 TSC_registers
0801af50 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800bd18 g     F .text	0000000e USBD_LL_StallEP
080180d0 g     O .rodata	00000008 NVIC_ICER1_fields
0801a308 g     O .rodata	00000028 TIM16_EGR_fields
0801d8e4 g     O .parsetable	0000000c CmdRE
0800aec8  w    F .text	00000002 HAL_SPI_MspInit
08014838 g     O .rodata	00000100 CAN_F8R1_fields
0800cde8  w    F .text	00000002 USART3_IRQHandler
08012e38 g     O .rodata	00000100 CAN_F21R1_fields
08019078 g     O .rodata	00000050 RCC_CSR_fields
0800bde0 g     F .text	0000003c USBD_VCP_SerialStrDescriptor
08017508 g     O .rodata	00000080 GPIOA_OTYPER_fields
08015d98 g     O .rodata	00000010 DAC_DHR12LD_fields
0801a340 g     O .rodata	00000030 TIM16_SR_fields
0801acb0 g     O .rodata	000001a0 TIM1_registers
08000624 g     F .text	0000002c __libc_fini_array
08011048 g     O .rodata	00000038 ADC1_JSQR_fields
0800cacc g     F .text	000000f0 I3G4250D_ReadXYZAngRate
20001df4 g       .bss	00000000 _ebss
080080e8 g     F .text	00000030 CmdTest
0800c360 g     F .text	00000040 COMPASSACCELERO_IO_Read
20000b90 g     O .data	00000034 L3gd20Drv
08016d78 g     O .rodata	00000050 FPU_CPACR_fields
0800cde8  w    F .text	00000002 DMA1_Channel7_IRQHandler
080152a0 g     O .rodata	00000020 CAN_TDL2R_fields
0800ac52 g     F .text	0000010e HAL_I2C_Mem_Read
080170c0 g     O .rodata	00000040 GPIOA_AFRL_fields
0800cd98  w    F .text	00000038 Reset_Handler
20000a08 g     O .data	00000043 USBD_CDC_CfgFSDesc
08019340 g     O .rodata	00000008 RTC_BKP29R_fields
0800c3f0 g     F .text	00000068 BSP_GYRO_Init
08018100 g     O .rodata	00000020 NVIC_IPR0_fields
08017408 g     O .rodata	00000080 GPIOA_ODR_fields
08004a10 g     F .text	00000040 __hi0bits
080181c0 g     O .rodata	00000020 NVIC_IPR15_fields
0801a9e8 g     O .rodata	00000008 TIM1_CCR2_fields
08016af8 g     O .rodata	000000d0 EXTI_RTSR1_fields
08015df0 g     O .rodata	00000008 DAC_DOR2_fields
08015c98 g     O .rodata	00000008 CRC_DR_fields
08007914 g     F .text	0000004e .hidden __fixdfsi
08017ac0 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0801d8d8 g     O .parsetable	0000000c CmdLEDE
0800cde8  w    F .text	00000002 UART5_IRQHandler
0801d8b4 g     O .parsetable	0000000c _bc_A2E
08007f18 g     F .text	00000050 _bc_A2
08008a44 g     F .text	00000054 DecodePeripheral
08019c80 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
08011938 g     O .rodata	00000100 CAN_F11R2_fields
0800cde8  w    F .text	00000002 ADC3_IRQHandler
08019638 g     O .rodata	00000038 RTC_TSTR_fields
08000590 g     F .text	00000018 _bc_a5_tick_check
0801b038 g     O .rodata	00000048 TIM2_CR1_fields
08009764 g     F .text	00000024 HAL_Init
08012b38 g     O .rodata	00000100 CAN_F1R2_fields
080052f4 g     F .text	00000056 _putc_r
0800b8f0 g     F .text	0000001a USBD_CtlPrepareRx
080192d8 g     O .rodata	00000008 RTC_BKP17R_fields
08015130 g     O .rodata	00000020 CAN_RDL1R_fields
08013238 g     O .rodata	00000100 CAN_F23R1_fields
0800af70 g     F .text	0000002a HAL_SPI_DeInit
0800cde8  w    F .text	00000002 TIM4_IRQHandler
08012638 g     O .rodata	00000100 CAN_F18R1_fields
0801c8f8 g     O .rodata	000000d0 USB_FS_registers
08007048 g     F .text	00000276 .hidden __aeabi_dadd
0801b698 g     O .rodata	00000008 TIM8_CCR3_fields
080077e0 g     F .text	00000082 .hidden __ledf2
08011d38 g     O .rodata	00000100 CAN_F13R2_fields
08000314 g     F .text	00000010 get_string
0800d6f2 g     O .rodata	00000008 LEDs
0801aec0 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
08015da8 g     O .rodata	00000008 DAC_DHR12R1_fields
08017ed0 g     O .rodata	00000028 I2C1_OAR1_fields
0800bd90 g     F .text	00000008 USBD_static_malloc
08015180 g     O .rodata	00000020 CAN_RF0R_fields
0800cde8  w    F .text	00000002 CAN_RX1_IRQHandler
0800cde8  w    F .text	00000002 DMA2_Channel1_IRQHandler
08019380 g     O .rodata	00000008 RTC_BKP7R_fields
08004c68 g     F .text	000000c0 __pow5mult
080111f8 g     O .rodata	00000010 ADC1_TR1_fields
08016318 g     O .rodata	00000008 DMA1_CNDTR7_fields
08007348 g     F .text	0000006a .hidden __aeabi_ul2d
0800bb24 g     F .text	0000002e USBD_CDC_TransmitPacket
20000b34 g     O .data	00000004 I2cxTimeout
0801bd98 g     O .rodata	00000008 TSC_IOG5CR_fields
08015db0 g     O .rodata	00000008 DAC_DHR12R2_fields
080192e0 g     O .rodata	00000008 RTC_BKP18R_fields
080005d4 g     F .text	00000018 mytest
080162d8 g     O .rodata	00000008 DMA1_CMAR6_fields
08019e38 g     O .rodata	00000030 TIM15_CCMR1_Input_fields
08007d5c g     F .text	0000002c CmdButton
08009a32  w    F .text	00000002 HAL_GPIO_EXTI_Callback
0801d86c g     O .parsetable	0000000c TiltGameE
0800b930 g     F .text	00000016 USBD_CtlReceiveStatus
0801b010 g     O .rodata	00000010 TIM2_CCR4_fields
20001df4 g       ._user_heap_stack	00000000 end
20000b18 g     O .data	00000008 LineCoding
080199a0 g     O .rodata	00000070 SPI1_CR1_fields
0800cde8  w    F .text	00000002 I2C1_EV_IRQHandler
08019b40 g     O .rodata	00000090 SPI1_registers
0800bcf6 g     F .text	00000014 USBD_LL_OpenEP
0801b7a0 g     O .rodata	00000010 TIM8_DCR_fields
08008aec g     F .text	00000064 DecodePrintRegisters
0801c610 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
0801c4a0 g     O .rodata	000000b0 USART1_registers
0800c776 g     F .text	0000003c L3GD20_DisableIT
0801c498 g     O .rodata	00000008 USART1_TDR_fields
08018d20 g     O .rodata	00000078 RCC_APB1ENR_fields
0800af6e  w    F .text	00000002 HAL_SPI_MspDeInit
080162f0 g     O .rodata	00000008 DMA1_CNDTR2_fields
08014fc8 g     O .rodata	00000070 CAN_IER_fields
08016010 g     O .rodata	00000060 DMA1_CCR1_fields
080180c8 g     O .rodata	00000008 NVIC_ICER0_fields
080183a8 g     O .rodata	00000008 NVIC_ISER1_fields
0800b494 g     F .text	0000008c USBD_LL_DataInStage
08019358 g     O .rodata	00000008 RTC_BKP31R_fields
0801ab88 g     O .rodata	00000048 TIM1_EGR_fields
0801aef0 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
08015df8 g     O .rodata	00000010 DAC_SR_fields
0801aff0 g     O .rodata	00000010 TIM2_CCR2_fields
0800bc6c g     F .text	0000007c USBD_LL_Init
08019360 g     O .rodata	00000008 RTC_BKP3R_fields
0800cd36 g     F .text	00000044 LSM303AGR_AccClickITEnable
0800c0b4 g     F .text	0000001c BSP_LED_On
0800c644 g     F .text	00000034 L3GD20_Init
080078d4 g     F .text	00000012 .hidden __aeabi_dcmpgt
0800cde8  w    F .text	00000002 DMA1_Channel6_IRQHandler
200009d0 g     O .data	00000038 USBD_CDC
0800b3cc g     F .text	0000000e USBD_ClrClassConfig
08019370 g     O .rodata	00000008 RTC_BKP5R_fields
0800cde8  w    F .text	00000002 UART4_IRQHandler
0800c678 g     F .text	00000018 L3GD20_LowPower
0800cde8  w    F .text	00000002 DMA2_Channel4_IRQHandler
0800bafa g     F .text	0000000e USBD_CDC_RegisterInterface
08003850 g     F .text	00000002 __sfp_lock_acquire
08004580 g     F .text	00000000 memchr
20001df4 g       .bss	00000000 __bss_end__
08003928 g     F .text	0000020c _free_r
0800cde8  w    F .text	00000002 TIM3_IRQHandler
0800cde8  w    F .text	00000002 RCC_IRQHandler
08019398 g     O .rodata	00000020 RTC_CALR_fields
0800693c g     F .text	0000000c __locale_mb_cur_max
080078c0 g     F .text	00000012 .hidden __aeabi_dcmpge
08015d88 g     O .rodata	00000008 DAC_DHR12L1_fields
0801a640 g     O .rodata	00000030 TIM17_SR_fields
20000bc4 g     O .data	00000034 I3g4250Drv
00001000 g       *ABS*	00000000 _Min_Heap_Size
08017b40 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800cde8  w    F .text	00000002 DMA1_Channel1_IRQHandler
08019390 g     O .rodata	00000008 RTC_BKP9R_fields
08011f38 g     O .rodata	00000100 CAN_F14R2_fields
08007044 g     F .text	0000027a .hidden __aeabi_dsub
0800bc24 g     F .text	00000012 HAL_PCD_DataOutStageCallback
0800cde8 g       .text	00000002 Default_Handler
20000848 g     O .data	00000004 __malloc_sbrk_base
0800be38 g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
0800cc0c g     F .text	00000020 LSM303AGR_AccFilterConfig
08017300 g     O .rodata	00000088 GPIOA_LCKR_fields
08019540 g     O .rodata	00000090 RTC_TAFCR_fields
20000b20 g     O .data	00000010 USBD_CDC_fops
08017608 g     O .rodata	000000b0 GPIOA_registers
080183c8 g     O .rodata	00000008 NVIC_ISPR2_fields
0800cde8  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
0801af80 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
08017938 g     O .rodata	00000088 GPIOB_LCKR_fields
08007f68 g     F .text	0000005c TiltGame
0801b728 g     O .rodata	00000078 TIM8_CR2_fields
0800a07c g     F .text	00000010 HAL_PCD_EP_GetRxCount
080113d8 g     O .rodata	00000030 CAN_BTR_fields
08007348 g     F .text	0000006a .hidden __floatundidf
08016130 g     O .rodata	00000060 DMA1_CCR4_fields
08008030 g     F .text	00000044 tickHandler
08018120 g     O .rodata	00000020 NVIC_IPR10_fields
0801a480 g     O .rodata	00000008 TIM17_ARR_fields
08011b38 g     O .rodata	00000100 CAN_F12R2_fields
08004d28 g     F .text	000000f0 __lshift
0801c460 g     O .rodata	00000028 USART1_RQR_fields
0801a5b8 g     O .rodata	00000048 TIM17_DIER_fields
08006f18 g     F .text	00000054 signal
08019308 g     O .rodata	00000008 RTC_BKP22R_fields
08015240 g     O .rodata	00000020 CAN_TDH2R_fields
0801abe8 g     O .rodata	00000008 TIM1_RCR_fields
0800bd26 g     F .text	0000000e USBD_LL_ClearStallEP
08018300 g     O .rodata	00000020 NVIC_IPR5_fields
08016f78 g     O .rodata	00000058 Flash_OBR_fields
0800cde8  w    F .text	00000002 EXTI15_10_IRQHandler
080152d8 g     O .rodata	00000018 CAN_TDT1R_fields
0800c810 g     F .text	000000f0 L3GD20_ReadXYZAngRate
080195d0 g     O .rodata	00000038 RTC_TR_fields
08018200 g     O .rodata	00000020 NVIC_IPR17_fields
080023f8 g     F .text	00000068 __register_exitproc
08016f18 g     O .rodata	00000058 Flash_CR_fields
08019ae0 g     O .rodata	00000058 SPI1_SR_fields
0801c558 g     O .rodata	00000040 USB_FS_DADDR_fields
08016ca8 g     O .rodata	00000010 EXTI_SWIER2_fields
08009aea g     F .text	0000002c HAL_PCD_SetAddress
08018240 g     O .rodata	00000020 NVIC_IPR19_fields
0801b390 g     O .rodata	00000008 TIM6_SR_fields
08012a38 g     O .rodata	00000100 CAN_F1R1_fields
0801a630 g     O .rodata	00000008 TIM17_PSC_fields
08019ca0 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
08004b0c g     F .text	0000015c __multiply
08019a70 g     O .rodata	00000008 SPI1_CRCPR_fields
0800c4b8 g     F .text	00000020 LSM303DLHC_AccFilterConfig
080093e4 g     F .text	000002b0 HAL_RCC_ClockConfig
080097c0 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
200009bc g     O .data	00000004 Commands
08011208 g     O .rodata	00000010 ADC1_TR2_fields
20000c4c g     O .bss	00000028 __malloc_current_mallinfo
0800c5a6 g     F .text	00000020 LSM303DLHC_AccFilterClickCmd
08019630 g     O .rodata	00000008 RTC_TSSSR_fields
0800824c g     F .text	0000013c TaskInput
0801b368 g     O .rodata	00000008 TIM6_CR2_fields
08019028 g     O .rodata	00000050 RCC_CR_fields
08014df8 g     O .rodata	000000e0 CAN_FM1R_fields
0801aa20 g     O .rodata	00000008 TIM1_CCR6_fields
080050c8 g     F .text	000000d0 __d2b
0801c208 g     O .rodata	00000098 USART1_CR2_fields
0801a778 g     O .rodata	00000060 TIM1_BDTR_fields
08000988 g     F .text	0000004c strcasecmp
0801d830 g     O .parsetable	0000000c ticksE
08018058 g     O .rodata	00000008 IWDG_WINR_fields
080110e0 g     O .rodata	00000048 ADC1_SMPR1_fields
0800c230 g     F .text	00000048 GYRO_IO_Read
08000604 g     F .text	00000004 my_Init
08017ef8 g     O .rodata	00000018 I2C1_OAR2_fields
08007ed0 g     F .text	00000048 AddTest
08013838 g     O .rodata	00000100 CAN_F26R1_fields
0800b210  w    F .text	00000002 HAL_IWDG_MspInit
08000d54 g     F .text	00000002 _strtoul_r
08015cb0 g     O .rodata	00000008 CRC_POL_fields
0800029c g     F .text	00000078 bc_led_demo_a2
080162c8 g     O .rodata	00000008 DMA1_CMAR4_fields
0800cde8  w    F .text	00000002 TIM7_IRQHandler
0800c6d8 g     F .text	0000005e L3GD20_INT1InterruptConfig
0800bc68 g     F .text	00000002 HAL_PCD_SuspendCallback
08016330 g     O .rodata	00000008 DMA1_CPAR3_fields
080192c0 g     O .rodata	00000008 RTC_BKP14R_fields
0800b9a4 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
08008504 g     F .text	00000006 _close_r
08019a78 g     O .rodata	00000008 SPI1_DR_fields
08018ee0 g     O .rodata	00000018 RCC_CFGR2_fields
080072e0 g     F .text	00000022 .hidden __aeabi_i2d
08019f50 g     O .rodata	00000010 TIM15_DCR_fields
08016ef8 g     O .rodata	00000018 Flash_ACR_fields
08015ca0 g     O .rodata	00000008 CRC_IDR_fields
20000b5c g     O .data	00000034 Lsm303dlhcDrv
08016340 g     O .rodata	00000008 DMA1_CPAR5_fields
08012738 g     O .rodata	00000100 CAN_F18R2_fields
08018060 g     O .rodata	00000050 IWDG_registers
08000b9c g     F .text	00000010 strtok
0801d8cc g     O .parsetable	0000000c CmdGyroE
08018030 g     O .rodata	00000008 IWDG_PR_fields
08018140 g     O .rodata	00000020 NVIC_IPR11_fields
08015bb8 g     O .rodata	00000050 COMP_COMP7_CSR_fields
080151a0 g     O .rodata	00000020 CAN_RF1R_fields
080085e4 g     F .text	0000007c TerminalInit
0801d8c0 g     O .parsetable	0000000c getStringE
08002324 g     F .text	000000d4 __swsetup_r
0801b418 g     O .rodata	00000008 TIM8_ARR_fields
08007c64  w    F .text	00000002 .hidden __aeabi_ldiv0
0800cde8  w    F .text	00000002 EXTI9_5_IRQHandler
0800b20a g     F .text	00000006 HAL_SPI_GetState
08007608 g     F .text	000001d0 .hidden __divdf3
08010f70 g     O .rodata	00000008 ADC1_DR_fields
0800378c g     F .text	000000a8 __sfp
08005234 g     F .text	0000005a __copybits
0800cde8  w    F .text	00000002 RTC_WKUP_IRQHandler
0801c158 g     O .rodata	00000010 USART1_BRR_fields
08019e68 g     O .rodata	00000050 TIM15_CCMR1_Output_fields
0801d854 g     O .parsetable	0000000c AddTestE
20000440 g     O .data	00000408 __malloc_av_
08019bd0 g     O .rodata	00000088 SYSCFG_CFGR1_fields
0800385c g     F .text	00000002 __sinit_lock_release
080086b6 g     F .text	00000010 TerminalReadNonBlock
080073b4 g     F .text	00000254 .hidden __muldf3
080152c0 g     O .rodata	00000018 CAN_TDT0R_fields
08008480 g     F .text	00000054 CmdDump
08005784 g     F .text	00000022 __sread
0801a208 g     O .rodata	00000028 TIM16_CCMR1_Output_fields
0801c9c8 g     O .rodata	00000018 WWDG_CFR_fields
080188f8 g     O .rodata	00000370 Peripherals
08017a40 g     O .rodata	00000080 GPIOB_ODR_fields
0801d860 g     O .parsetable	0000000c bcGameE
08009798  w    F .text	0000000c HAL_GetTick
0801c808 g     O .rodata	00000050 USB_FS_USB_EP5R_fields
08011838 g     O .rodata	00000100 CAN_F11R1_fields
0800484c g     F .text	00000002 __malloc_lock
080183b8 g     O .rodata	00000008 NVIC_ISPR0_fields
08010fd0 g     O .rodata	00000058 ADC1_ISR_fields
08016dd0 g     O .rodata	00000048 FPU_FPCCR_fields
0801bb58 g     O .rodata	00000010 TSC_ICR_fields
0800c4f8 g     F .text	000000ae LSM303DLHC_AccReadXYZ
080180c0 g     O .rodata	00000008 NVIC_IABR2_fields
080035f4 g     F .text	0000002c _fflush_r
080086c6 g     F .text	00000012 TerminalReadAnyNonBlock
0800be1c g     F .text	0000001c USBD_VCP_ProductStrDescriptor
0800666c g     F .text	0000005e _calloc_r
08017588 g     O .rodata	00000080 GPIOA_PUPDR_fields
0800cde8  w    F .text	00000002 SPI2_IRQHandler
08019300 g     O .rodata	00000008 RTC_BKP21R_fields
0801caa9 g     O .rodata	00000012 hUSBDDeviceDesc
08019608 g     O .rodata	00000028 RTC_TSDR_fields
08008864 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
08018ef8 g     O .rodata	00000048 RCC_CFGR3_fields
08000698 g     F .text	000000a4 memset
0800cde8  w    F .text	00000002 MemManage_Handler
08007e50 g     F .text	00000020 getString
08007d94 g     F .text	0000009c main
0801bf38 g     O .rodata	00000100 TSC_IOSCR_fields
08016518 g     O .rodata	000001e0 DMA1_registers
0800c178 g     F .text	00000014 BSP_PB_GetState
08019cc0 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000c78 g     O .bss	00000004 __malloc_max_total_mem
08011038 g     O .rodata	00000008 ADC1_JDR3_fields
08019b38 g     O .rodata	00000008 SPI1_TXCRCR_fields
08006608 g     F .text	00000018 __swbuf
0800af9a g     F .text	00000270 HAL_SPI_TransmitReceive
20000b58 g     O .data	00000004 SpixTimeout
0801d830 g       *ABS*	00000000 _siccmram
08015a68 g     O .rodata	00000050 COMP_COMP3_CSR_fields
08018380 g     O .rodata	00000020 NVIC_IPR9_fields
08015fd0 g     O .rodata	00000040 DBGMCU_registers
0801d83c g     O .parsetable	0000000c tickHandlerE
080181e0 g     O .rodata	00000020 NVIC_IPR16_fields
08013d38 g     O .rodata	00000100 CAN_F2R2_fields
0800cde8  w    F .text	00000002 SVC_Handler
0800580c g     F .text	00000008 __sclose
0800cde8  w    F .text	00000002 DMA2_Channel5_IRQHandler
08016358 g     O .rodata	000000e0 DMA1_IFCR_fields
08006764 g     F .text	0000003c fclose
0801bdb8 g     O .rodata	00000080 TSC_IOGCSR_fields
08008800 g     F .text	00000064 TerminalInputBufferWrite
08016320 g     O .rodata	00000008 DMA1_CPAR1_fields
08002588 g     F .text	00000f3c _dtoa_r
08004020 g     F .text	00000554 _malloc_r
080176f8 g     O .rodata	00000040 GPIOB_AFRL_fields
08006d58 g     F .text	0000001a __ascii_wctomb
08010f78 g     O .rodata	00000058 ADC1_IER_fields
08007358 g     F .text	0000005a .hidden __aeabi_l2d
08015dc8 g     O .rodata	00000008 DAC_DHR8R1_fields
0801a870 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
080067a0 g     F .text	0000001c _fiprintf_r
08006f6c g     F .text	00000038 _init_signal
0801bb78 g     O .rodata	00000100 TSC_IOASCR_fields
08018280 g     O .rodata	00000020 NVIC_IPR20_fields
08003e24 g     F .text	00000040 _fwalk
0800b520 g     F .text	0000003e USBD_LL_Reset
08015168 g     O .rodata	00000018 CAN_RDT1R_fields
08017100 g     O .rodata	00000080 GPIOA_BRR_fields
08012d38 g     O .rodata	00000100 CAN_F20R2_fields
0801c038 g     O .rodata	00000010 TSC_ISR_fields
0800bd84 g     F .text	0000000c USBD_LL_GetRxDataSize
0800cde8  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800c46a g     F .text	00000020 LSM303DLHC_AccInit
0800cde8  w    F .text	00000002 USB_LP_IRQHandler
20001554 g     O .bss	00000800 UserRxBuffer
08006988 g     F .text	00000014 _mbtowc_r
08019a80 g     O .rodata	00000040 SPI1_I2SCFGR_fields
0801caa5 g     O .rodata	00000004 USBD_LangIDDesc
08012138 g     O .rodata	00000100 CAN_F15R2_fields
0800cde8  w    F .text	00000002 EXTI4_IRQHandler
0801c718 g     O .rodata	00000050 USB_FS_USB_EP2R_fields
0800534c g     F .text	00000060 putc
20000b38 g     O .data	00000020 LED_PORT
0801b6c8 g     O .rodata	00000008 TIM8_CCR6_fields
0800ccfa g     F .text	00000020 LSM303AGR_AccFilterClickCmd
0800c5e2 g     F .text	00000044 LSM303DLHC_AccClickITEnable
0800b434 g     F .text	00000060 USBD_LL_DataOutStage
08019368 g     O .rodata	00000008 RTC_BKP4R_fields
08003888 g     F .text	000000a0 _malloc_trim_r
0801bda8 g     O .rodata	00000008 TSC_IOG7CR_fields
080192d0 g     O .rodata	00000008 RTC_BKP16R_fields
08015f98 g     O .rodata	00000028 DBGMCU_CR_fields
08015150 g     O .rodata	00000018 CAN_RDT0R_fields
08010e58 g     O .rodata	00000008 ADC1_AWD2CR_fields
080162d0 g     O .rodata	00000008 DMA1_CMAR5_fields
08015110 g     O .rodata	00000020 CAN_RDL0R_fields
08016338 g     O .rodata	00000008 DMA1_CPAR4_fields
080069e8 g     F .text	000002dc strcmp
0801b398 g     O .rodata	00000080 TIM6_registers
08007ce8 g     F .text	00000028 CmdAccel
080064d0 g     F .text	0000001c vfiprintf
080192a8 g     O .rodata	00000008 RTC_BKP11R_fields
0800ad60 g     F .text	00000006 HAL_I2C_GetState
08008dc0 g     F .text	00000068 SystemInit
08000d58 g     F .text	00000018 strtoul_l
0801a188 g     O .rodata	00000048 TIM16_BDTR_fields
080077e8 g     F .text	0000007a .hidden __nedf2
08019218 g     O .rodata	00000070 RTC_ALRMBR_fields
0801b098 g     O .rodata	00000010 TIM2_DCR_fields
08010f10 g     O .rodata	00000050 ADC1_CR_fields
0800ce0c g     F .text	00000000 _fini
08008118 g     F .text	0000001c CmdW
08009ade g     F .text	0000000c HAL_PCD_Start
0800cde8  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
080167f8 g     O .rodata	00000020 EXTI_EMR2_fields
0800c48a g     F .text	00000012 LSM303DLHC_AccReadID
08019678 g     O .rodata	00000008 RTC_WUTR_fields
08016348 g     O .rodata	00000008 DMA1_CPAR6_fields
08015ca8 g     O .rodata	00000008 CRC_INIT_fields
08019490 g     O .rodata	00000088 RTC_ISR_fields
0801aaf8 g     O .rodata	00000010 TIM1_DCR_fields
08018878 g     O .rodata	00000038 PWR_CR_fields
0801b110 g     O .rodata	00000030 TIM2_EGR_fields
0800060c g     F .text	0000000c atexit
08018638 g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
08016e98 g     O .rodata	00000060 FPU_registers
080168f8 g     O .rodata	00000100 EXTI_IMR1_fields
080087c0 g     F .text	00000040 _write_r
080111e8 g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
080111c0 g     O .rodata	00000028 ADC1_SQR3_fields
0800cde8  w    F .text	00000002 DMA1_Channel3_IRQHandler
08015ef8 g     O .rodata	00000080 DBGMCU_APB1FZ_fields
08006948 g     F .text	00000040 setlocale
08019a10 g     O .rodata	00000060 SPI1_CR2_fields
08010e68 g     O .rodata	00000010 ADC1_CALFACT_fields
08019338 g     O .rodata	00000008 RTC_BKP28R_fields
0800973a  w    F .text	00000028 HAL_InitTick
0800cd1a g     F .text	0000001c LSM303AGR_AccIT1Enable
0801aa00 g     O .rodata	00000020 TIM1_CCR5_fields
0800bd5a g     F .text	0000000e USBD_LL_SetUSBAddress
08018160 g     O .rodata	00000020 NVIC_IPR12_fields
0801cabc g     O .rodata	00000010 LED_PIN
20000010 g     O .data	00000004 _impure_ptr
080152f0 g     O .rodata	00000018 CAN_TDT2R_fields
08011040 g     O .rodata	00000008 ADC1_JDR4_fields
08019f10 g     O .rodata	00000040 TIM15_CR2_fields
080034c4 g     F .text	00000130 __sflush_r
08018f40 g     O .rodata	00000060 RCC_CFGR_fields
08009788  w    F .text	00000010 HAL_IncTick
0801a608 g     O .rodata	00000028 TIM17_EGR_fields
08007eb8 g     F .text	00000018 ticks
0800bd0a g     F .text	0000000e USBD_LL_CloseEP
0800cde8  w    F .text	00000002 ADC4_IRQHandler
080193b8 g     O .rodata	000000a0 RTC_CR_fields
0800b8e0 g     F .text	00000010 USBD_CtlContinueSendData
08016438 g     O .rodata	000000e0 DMA1_ISR_fields
08014438 g     O .rodata	00000100 CAN_F6R1_fields
0800c690 g     F .text	0000001c L3GD20_ReadID
0800cde8  w    F .text	00000002 WWDG_IRQHandler
0800aa8c  w    F .text	00000002 HAL_I2C_MspInit
080166f8 g     O .rodata	00000100 EXTI_EMR1_fields
08018320 g     O .rodata	00000020 NVIC_IPR6_fields
0801b000 g     O .rodata	00000010 TIM2_CCR3_fields
080161f0 g     O .rodata	00000060 DMA1_CCR6_fields
0800699c g     F .text	0000002a __ascii_mbtowc
08017388 g     O .rodata	00000080 GPIOA_MODER_fields
080186b8 g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08004fa8 g     F .text	00000060 __ulp
08003874 g     F .text	00000014 __fp_unlock_all
0800ca34 g     F .text	0000003c I3G4250D_DisableIT
0801aa80 g     O .rodata	00000078 TIM1_CR2_fields
08019518 g     O .rodata	00000010 RTC_PRER_fields
08007fc4 g     F .text	00000030 lab_eight
0800bd68 g     F .text	0000000e USBD_LL_Transmit
0800cde8  w    F .text	00000002 TIM2_IRQHandler
08000600 g     F .text	00000004 my_Loop
0801a1d0 g     O .rodata	00000020 TIM16_CCER_fields
08009a4c g     F .text	00000092 HAL_PCD_Init
20000a4c g     O .data	00000043 USBD_CDC_CfgHSDesc
0801d8a8 g     O .parsetable	0000000c CmdDecodeE
0800b2b0 g     F .text	00000074 HAL_IWDG_Start
08013938 g     O .rodata	00000100 CAN_F26R2_fields
08014538 g     O .rodata	00000100 CAN_F6R2_fields
20000008 g       .data	00000000 myTickCount
08012238 g     O .rodata	00000100 CAN_F16R1_fields
08019330 g     O .rodata	00000008 RTC_BKP27R_fields
08016bc8 g     O .rodata	00000010 EXTI_RTSR2_fields
0801a280 g     O .rodata	00000028 TIM16_CR2_fields
08019198 g     O .rodata	00000070 RTC_ALRMAR_fields
0801a770 g     O .rodata	00000008 TIM1_ARR_fields
0800b88e g     F .text	00000038 USBD_GetString
0800c0ec g     F .text	00000018 BSP_LED_Toggle
08013138 g     O .rodata	00000100 CAN_F22R2_fields
08013438 g     O .rodata	00000100 CAN_F24R1_fields
08003eb8 g     F .text	00000008 localeconv
0800bc18 g     F .text	0000000c HAL_PCD_SetupStageCallback
08014238 g     O .rodata	00000100 CAN_F5R1_fields
0800cde8  w    F .text	00000002 COMP7_IRQHandler
08003fa0 g     F .text	0000005e __swhatbuf_r
20008000 g       *ABS*	00000000 _estack
08008154 g     F .text	000000f8 parse
08019348 g     O .rodata	00000008 RTC_BKP2R_fields
0800cde8  w    F .text	00000002 COMP1_2_3_IRQHandler
08012438 g     O .rodata	00000100 CAN_F17R1_fields
0800cde8  w    F .text	00000002 EXTI1_IRQHandler
0801b420 g     O .rodata	00000060 TIM8_BDTR_fields
08007884 g     F .text	00000012 .hidden __aeabi_dcmpeq
0800cbde g     F .text	00000012 LSM303AGR_AccReadID
0801c6c8 g     O .rodata	00000050 USB_FS_USB_EP1R_fields
08010d78 g     O .rodata	000000b0 ADC1_2_CSR_fields
08016dc8 g     O .rodata	00000008 FPU_FPCAR_fields
20000c2c g       .data	00000000 _edata
0801b958 g     O .rodata	000001a0 TIM8_registers
08019350 g     O .rodata	00000008 RTC_BKP30R_fields
0801a4f0 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
0801a248 g     O .rodata	00000038 TIM16_CR1_fields
08012538 g     O .rodata	00000100 CAN_F17R2_fields
08019ed8 g     O .rodata	00000038 TIM15_CR1_fields
080067e4 g     F .text	000000a6 __fputwc
08008b50 g     F .text	00000270 CmdDecode
08019ff8 g     O .rodata	00000008 TIM15_RCR_fields
080178b8 g     O .rodata	00000080 GPIOB_IDR_fields
0801a990 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
0801b828 g     O .rodata	00000008 TIM8_DMAR_fields
08017000 g     O .rodata	00000080 Flash_registers
0801a2a8 g     O .rodata	00000010 TIM16_DCR_fields
0800c9f4 g     F .text	00000040 I3G4250D_EnableIT
08018e68 g     O .rodata	00000040 RCC_APB2RSTR_fields
08008388 g     F .text	00000028 fetch_uint32_arg
08019288 g     O .rodata	00000010 RTC_ALRMBSSR_fields
08019d00 g     O .rodata	00000040 SYSCFG_RCR_fields
0800cde8  w    F .text	00000002 USART2_IRQHandler
0801a548 g     O .rodata	00000038 TIM17_CR1_fields
080183d8 g     O .rodata	00000260 NVIC_registers
0800cde8  w    F .text	00000002 COMP4_5_6_IRQHandler
080057ac g     F .text	0000003e __swrite
08008e28 g     F .text	000005bc HAL_RCC_OscConfig
2000084c g     O .data	00000004 __malloc_trim_threshold
0801a530 g     O .rodata	00000008 TIM17_CCR1_fields
08017f48 g     O .rodata	00000028 I2C1_TIMINGR_fields
0801c550 g     O .rodata	00000008 USB_FS_BTABLE_fields
08015220 g     O .rodata	00000020 CAN_TDH1R_fields
080067bc g     F .text	00000028 fiprintf
08017cf0 g     O .rodata	000000a8 I2C1_CR1_fields
080058a4 g     F .text	00000c2c _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800b8c6 g     F .text	0000001a USBD_CtlSendData
08012038 g     O .rodata	00000100 CAN_F15R1_fields
08010d68 g     O .rodata	00000010 ADC1_2_CDR_fields
08003e64 g     F .text	00000048 _fwalk_reent
08004e5c g     F .text	0000014c __mdiff
0801b388 g     O .rodata	00000008 TIM6_PSC_fields
08007914 g     F .text	0000004e .hidden __aeabi_d2iz
080192c8 g     O .rodata	00000008 RTC_BKP15R_fields
080188d8 g     O .rodata	00000020 PWR_registers
08016fd8 g     O .rodata	00000020 Flash_SR_fields
08011030 g     O .rodata	00000008 ADC1_JDR2_fields
08007c78 g     F .text	00000010 _kill
080192f8 g     O .rodata	00000008 RTC_BKP20R_fields
08016310 g     O .rodata	00000008 DMA1_CNDTR6_fields
08012938 g     O .rodata	00000100 CAN_F19R2_fields
0800cde8  w    F .text	00000002 I2C2_ER_IRQHandler
08010d28 g     O .rodata	00000040 ADC1_2_CCR_fields
0800cde8  w    F .text	00000002 DMA1_Channel2_IRQHandler
08015e18 g     O .rodata	000000e0 DAC_registers
08017488 g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0801b5a8 g     O .rodata	00000030 TIM8_CCMR2_Input_fields
08003854 g     F .text	00000002 __sfp_lock_release
0801a488 g     O .rodata	00000048 TIM17_BDTR_fields
080150f0 g     O .rodata	00000020 CAN_RDH1R_fields
0800c96a g     F .text	0000002c I3G4250D_RebootCmd
0801ae60 g     O .rodata	00000060 TIM2_CCER_fields
08015dd8 g     O .rodata	00000010 DAC_DHR8RD_fields
080083b0 g     F .text	00000020 fetch_string_arg
0800c048 g     F .text	0000006c BSP_LED_Init
080179c0 g     O .rodata	00000080 GPIOB_MODER_fields
0801d89c g     O .parsetable	0000000c CmdDumpE
0801ca38 g     O .rodata	00000010 PLLMULFactorTable
0801c2a0 g     O .rodata	00000098 USART1_CR3_fields
08008994 g     F .text	00000050 DecodeField
080151c0 g     O .rodata	00000020 CAN_RI0R_fields
0800cde8  w    F .text	00000002 TIM8_BRK_IRQHandler
08015f78 g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0801abe0 g     O .rodata	00000008 TIM1_PSC_fields
08008a98 g     F .text	00000054 DecodePrintPeripherals
08019e00 g     O .rodata	00000038 TIM15_CCER_fields
080162e0 g     O .rodata	00000008 DMA1_CMAR7_fields
0800d2ac g     O .rodata	00000101 _ctype_
08007c64  w    F .text	00000002 .hidden __aeabi_idiv0
080078e8 g     F .text	0000002c .hidden __unorddf2
08000408 g     F .text	0000001c accel_test
0800cc4c g     F .text	000000ae LSM303AGR_AccReadXYZ
0800c468 g     F .text	00000002 LSM303DLHC_AccDeInit
080151e0 g     O .rodata	00000020 CAN_RI1R_fields
08019c58 g     O .rodata	00000028 SYSCFG_CFGR2_fields
08018fa0 g     O .rodata	00000088 RCC_CIR_fields
0801d8f0 g     O .parsetable	0000000c CmdStatsE
0800cde8  w    F .text	00000002 FLASH_IRQHandler
08019fb8 g     O .rodata	00000008 TIM15_DMAR_fields
080168e8 g     O .rodata	00000010 EXTI_FTSR2_fields
08011738 g     O .rodata	00000100 CAN_F10R2_fields
08007c88 g     F .text	00000002 _exit
080182c0 g     O .rodata	00000020 NVIC_IPR3_fields
080162e8 g     O .rodata	00000008 DMA1_CNDTR1_fields
08017f20 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
08019db8 g     O .rodata	00000048 TIM15_BDTR_fields
0800bda8 g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001454 g     O .bss	00000100 USBD_StrDesc
080086d8 g     F .text	000000e8 TerminalOutputBufferWrite
0800cde8  w    F .text	00000002 BusFault_Handler
0800cde8  w    F .text	00000002 USART1_IRQHandler
080159c0 g     O .rodata	00000050 COMP_COMP1_CSR_fields
0801b830 g     O .rodata	00000048 TIM8_EGR_fields
08003ec0 g     F .text	000000e0 __smakebuf_r
0801a020 g     O .rodata	00000040 TIM15_SR_fields
08000ac0 g     F .text	000000dc strlen
08018e28 g     O .rodata	00000040 RCC_APB2ENR_fields
0800cde8  w    F .text	00000002 SPI3_IRQHandler
0800cbf0 g     F .text	0000001c LSM303AGR_AccRebootCmd
08006d84 g     F .text	00000030 _init_signal_r
08007874 g     F .text	00000010 .hidden __aeabi_cdcmpeq
080077d8 g     F .text	0000008a .hidden __gedf2
080160d0 g     O .rodata	00000060 DMA1_CCR3_fields
0801aa38 g     O .rodata	00000048 TIM1_CR1_fields
08018040 g     O .rodata	00000018 IWDG_SR_fields
0801c858 g     O .rodata	00000050 USB_FS_USB_EP6R_fields
0801a370 g     O .rodata	00000110 TIM16_registers
0800a7f6  w    F .text	00000002 HAL_PCDEx_SetConnectionState
0801a670 g     O .rodata	00000100 TIM17_registers
0800ab4e g     F .text	00000104 HAL_I2C_Mem_Write
08000324 g     F .text	000000e2 bc_Game
08006660 g     F .text	0000000a __assert
0801a7d8 g     O .rodata	00000098 TIM1_CCER_fields
08013f38 g     O .rodata	00000100 CAN_F3R2_fields
08015d08 g     O .rodata	00000080 DAC_CR_fields
0800cde8  w    F .text	00000002 I2C1_ER_IRQHandler
0800588c g     F .text	00000016 __sprint_r
0801c8a8 g     O .rodata	00000050 USB_FS_USB_EP7R_fields
08017e48 g     O .rodata	00000088 I2C1_ISR_fields
0801a930 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
08018360 g     O .rodata	00000020 NVIC_IPR8_fields
0801ca48 g     O .rodata	00000010 PredivFactorTable
0801bd88 g     O .rodata	00000008 TSC_IOG3CR_fields
08007304 g     F .text	00000042 .hidden __aeabi_f2d
0800bd76 g     F .text	0000000e USBD_LL_PrepareReceive
080162f8 g     O .rodata	00000008 DMA1_CNDTR3_fields
0800c6ac g     F .text	0000002c L3GD20_RebootCmd
08013a38 g     O .rodata	00000100 CAN_F27R1_fields
0801bb68 g     O .rodata	00000010 TSC_IER_fields
0800cd7a g     F .text	0000001c LSM303AGR_AccZClickITConfig
08014d18 g     O .rodata	000000e0 CAN_FFA1R_fields
0801b6d0 g     O .rodata	00000010 TIM8_CNT_fields
08006d44 g     F .text	00000014 _wctomb_r
08010e60 g     O .rodata	00000008 ADC1_AWD3CR_fields
08019320 g     O .rodata	00000008 RTC_BKP25R_fields
0801bc78 g     O .rodata	00000100 TSC_IOCCR_fields
08018738 g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
0800bb18 g     F .text	0000000c USBD_CDC_SetRxBuffer
08016bd8 g     O .rodata	000000d0 EXTI_SWIER1_fields
08007044 g     F .text	0000027a .hidden __subdf3
0801a180 g     O .rodata	00000008 TIM16_ARR_fields
08015fc0 g     O .rodata	00000010 DBGMCU_IDCODE_fields
08000d88 g     F .text	00001514 _vfprintf_r
20000bf8 g     O .data	00000034 Lsm303agrDrv
08004a50 g     F .text	0000005e __lo0bits
080169f8 g     O .rodata	00000020 EXTI_IMR2_fields
0801b380 g     O .rodata	00000008 TIM6_EGR_fields
08019ad8 g     O .rodata	00000008 SPI1_RXCRCR_fields
08017f10 g     O .rodata	00000008 I2C1_PECR_fields
08009fb4 g     F .text	000000c8 HAL_PCD_EP_Receive
080110b0 g     O .rodata	00000018 ADC1_OFR3_fields
08015b60 g     O .rodata	00000058 COMP_COMP6_CSR_fields
080192f0 g     O .rodata	00000008 RTC_BKP1R_fields
0801b548 g     O .rodata	00000060 TIM8_CCMR1_Output_fields
08017c40 g     O .rodata	000000b0 GPIOB_registers
080089e4 g     F .text	00000060 DecodeRegister
08006fa4 g     F .text	00000068 __sigtramp
0801b898 g     O .rodata	00000048 TIM8_SMCR_fields
080088ec g     F .text	00000054 DecodeReadRegister
08015038 g     O .rodata	00000050 CAN_MCR_fields
08006cf8 g     F .text	0000004c wcrtomb
08015de8 g     O .rodata	00000008 DAC_DOR1_fields
08008660 g     F .text	0000004c TerminalRead
0801baf8 g     O .rodata	00000060 TSC_CR_fields
0801b108 g     O .rodata	00000008 TIM2_DMAR_fields
20000850 g     O .data	0000016c __global_locale
0801b518 g     O .rodata	00000030 TIM8_CCMR1_Input_fields
0800c5c6 g     F .text	0000001c LSM303DLHC_AccIT1Enable
08011a38 g     O .rodata	00000100 CAN_F12R1_fields
0800cde8  w    F .text	00000002 USBWakeUp_IRQHandler
0801a330 g     O .rodata	00000008 TIM16_PSC_fields
0801c458 g     O .rodata	00000008 USART1_RDR_fields
08018ea8 g     O .rodata	00000038 RCC_BDCR_fields
0800229c g     F .text	0000001c vfprintf
0801a5a8 g     O .rodata	00000010 TIM17_DCR_fields
080183c0 g     O .rodata	00000008 NVIC_ISPR1_fields
080080a8 g     F .text	00000020 mes_IWDGStart
080180f0 g     O .rodata	00000008 NVIC_ICPR2_fields
0801d848 g     O .parsetable	0000000c CmdAccelE
08012f38 g     O .rodata	00000100 CAN_F21R2_fields
0800bb08 g     F .text	00000010 USBD_CDC_SetTxBuffer
080068b4 g     F .text	00000048 fputwc
08019d40 g     O .rodata	00000070 SYSCFG_registers
08006ebc g     F .text	0000005c raise
080187b8 g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
08004010 g     F .text	00000010 free
08003858 g     F .text	00000002 __sinit_lock_acquire
0800cde8  w    F .text	00000002 DMA2_Channel3_IRQHandler
08016818 g     O .rodata	000000d0 EXTI_FTSR1_fields
0800be70 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
08014638 g     O .rodata	00000100 CAN_F7R1_fields
080048b4 g     F .text	000000a8 __multadd
0800b3da g     F .text	0000005a USBD_LL_SetupStage
080048a0 g     F .text	00000012 _Bfree
08007d88 g     F .text	0000000a Error_Handler
0801c9e0 g     O .rodata	00000010 WWDG_CR_fields
0800cde8  w    F .text	00000002 EXTI2_TSC_IRQHandler
080183d0 g     O .rodata	00000008 NVIC_STIR_fields
0800cde8  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
0801b638 g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	20000c2c 	.word	0x20000c2c
 80001d4:	20000c2c 	.word	0x20000c2c
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <register_tm_clones+0x18>)
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a0b      	subs	r3, r1, r0
 80001e2:	0fd9      	lsrs	r1, r3, #31
 80001e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	20000c2c 	.word	0x20000c2c
 80001f8:	20000c2c 	.word	0x20000c2c
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	; (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000c2c 	.word	0x20000c2c
 8000220:	00000000 	.word	0x00000000
 8000224:	0800ce00 	.word	0x0800ce00

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	; (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	20000c30 	.word	0x20000c30
 8000244:	0800ce00 	.word	0x0800ce00

08000248 <add_test>:
@ Returns: r0
@r
@
@ Here is the actual add_test function
add_test:
push {r4, r6, r7, lr} @preserve r4 and r6 and lr
 8000248:	b5d0      	push	{r4, r6, r7, lr}

add r0, r0, r1 @adding r0 and r1 and storing it in r0
 800024a:	4408      	add	r0, r1

mov r6, r0 @moving r0 to r4
 800024c:	4606      	mov	r6, r0

mov r7, r3 @move the value of r3 into r7 to be restored after the led toggle messes up all my registers
 800024e:	461f      	mov	r7, r3

mov r0, #1 @storing a constant into r0
 8000250:	f04f 0001 	mov.w	r0, #1

bl BSP_LED_Toggle @toggling a light with index 1
 8000254:	f00b ff4a 	bl	800c0ec <BSP_LED_Toggle>

bl busy_delay
 8000258:	f000 f807 	bl	800026a <busy_delay>

mov r3, r7 @restoring r3 to be 10
 800025c:	463b      	mov	r3, r7

bl blink_led
 800025e:	f000 f80c 	bl	800027a <blink_led>

mov r0, r6 @moving the original value of the sum back to r0 to be returned
 8000262:	4630      	mov	r0, r6

pop {r4, r6, r7, lr} @popping r4 and r6 and lr
 8000264:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
@put stuff back to how you found it right before you leave

bx lr @ Return (Branch eXchange) to the address in the link register (lr)
 8000268:	4770      	bx	lr

0800026a <busy_delay>:
@ Input: r0 (i.e. r0 holds number of cycles to delay)
@ Returns: r0
@
@ Here is the actual function. DO NOT MODIFY THIS FUNCTION.
busy_delay:
push {r0, r5} @pushing register 5
 800026a:	b421      	push	{r0, r5}
mov r5, r0 @moving the value within r0 to r5
 800026c:	4605      	mov	r5, r0

0800026e <delay_1oop>:
delay_1oop:
    subs r5, r5, #1
 800026e:	3d01      	subs	r5, #1
    bge delay_1oop
 8000270:	dafd      	bge.n	800026e <delay_1oop>
mov r0, #0 @ Return zero (success)
 8000272:	f04f 0000 	mov.w	r0, #0
pop {r0, r5} @popping off r5
 8000276:	bc21      	pop	{r0, r5}
bx lr @ Return (Branch eXchange) to the address in the link register (lr
 8000278:	4770      	bx	lr

0800027a <blink_led>:
@
@ Input: r0, r3 
@ Returns: r0, r3
@
blink_led:
push {r0, r3, r5, r7, lr}
 800027a:	b5a9      	push	{r0, r3, r5, r7, lr}
mov r3, #0 @move the value 0 into r3
 800027c:	f04f 0300 	mov.w	r3, #0

08000280 <start_loop>:
start_loop:
cmp r3, r7 @compare r3 to r7
 8000280:	42bb      	cmp	r3, r7
bge end_loop 
 8000282:	da08      	bge.n	8000296 <end_loop>
    mov r0, #1 @r0 always gets messed up in BSP_LED_Toggle so i will keep making it 1 every loop
 8000284:	f04f 0001 	mov.w	r0, #1
    mov r5, r3 @move r3 into r5 so it doesn't get messed up in BSP_LED_Toggle
 8000288:	461d      	mov	r5, r3
    bl BSP_LED_Toggle @toggling a light with index 1
 800028a:	f00b ff2f 	bl	800c0ec <BSP_LED_Toggle>
    mov r3, r5 @bring r3 original value back
 800028e:	462b      	mov	r3, r5
    add r3, r3, #1
 8000290:	f103 0301 	add.w	r3, r3, #1
    b start_loop @branch back to the beginning of the loop
 8000294:	e7f4      	b.n	8000280 <start_loop>

08000296 <end_loop>:
end_loop:
    pop {r0, r3, r5, r7, lr}
 8000296:	e8bd 40a9 	ldmia.w	sp!, {r0, r3, r5, r7, lr}
    bx lr
 800029a:	4770      	bx	lr

0800029c <bc_led_demo_a2>:
@Parameters: none
@Returns: nothing
@
bc_led_demo_a2:
@r0 is count and r1 is delay
push {r0-r7, lr} @pushing all available registers because I don't know what I'll end up using
 800029c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

bl led_delay
 800029e:	f000 f800 	bl	80002a2 <led_delay>

080002a2 <led_delay>:
@it turns on and off all the lights on the board one after another as many times as the user wants and as fast as the user wants
@Parameters: none
@Returns: nothing
@
led_delay:
    mov r2, #0 @r2 is used to see if an led is on or off, if it's an even number the led should be off and if it's odd it should be on
 80002a2:	f04f 0200 	mov.w	r2, #0
    mov r3, r1 @moving the delay value to r4
 80002a6:	460b      	mov	r3, r1
    mov r4, r1 @moving the delay value to r4 for use later when resetting the loop
 80002a8:	460c      	mov	r4, r1
    mov r5, r0 @moving count into r5
 80002aa:	4605      	mov	r5, r0
    mov r6, #0 @r6 is going to keep track of how many times we have gone through a complete cycle
 80002ac:	f04f 0600 	mov.w	r6, #0
    mov r7, #0 @r7 is going to hold which led is supposed to be toggled
 80002b0:	f04f 0700 	mov.w	r7, #0
    bl first_light @turning the light on to start
 80002b4:	f000 f826 	bl	8000304 <first_light>

080002b8 <led_1oop>:
    led_1oop: @repeat r5 times
        subs r3, r3, #1
 80002b8:	3b01      	subs	r3, #1
        bge led_1oop
 80002ba:	dafd      	bge.n	80002b8 <led_1oop>
        @loop over
    @if r6 is greater than r5
    add r2, r2, #1
 80002bc:	f102 0201 	add.w	r2, r2, #1
    cmp r7, #8
 80002c0:	2f08      	cmp	r7, #8
        beq else1
 80002c2:	d010      	beq.n	80002e6 <else1>
    mov r0, r7 @update the led to be toggled
 80002c4:	4638      	mov	r0, r7
    bl BSP_LED_Toggle @calling BSP_LED_Toggle
 80002c6:	f00b ff11 	bl	800c0ec <BSP_LED_Toggle>
    mov r3, r4 @moving the delay back into r3 for another loop
 80002ca:	4623      	mov	r3, r4
    @need to put an if statement inside an if statement here
    cmp r2, #2
 80002cc:	2a02      	cmp	r2, #2
        bge else2
 80002ce:	da02      	bge.n	80002d6 <else2>
    mov r0, r7 @make r0 the original number again 
 80002d0:	4638      	mov	r0, r7
    bl led_1oop @if the led is toggled on and hasnt been turned off its going to loop again
 80002d2:	f7ff fff1 	bl	80002b8 <led_1oop>

080002d6 <else2>:
@Description: This function is used for switching which led is going to be toggled next
@Parameters: none
@Returns: nothing
@
else2:
    add r7, r7, #1 @change which led is being toggled
 80002d6:	f107 0701 	add.w	r7, r7, #1
    mov r2, #0 @move the status of the LED back to being off
 80002da:	f04f 0200 	mov.w	r2, #0
    cmp r7, #8 @comparing again to try and avoid unnessecary loops
 80002de:	2f08      	cmp	r7, #8
        beq else1
 80002e0:	d001      	beq.n	80002e6 <else1>
    bl led_1oop @going back to loop again
 80002e2:	f7ff ffe9 	bl	80002b8 <led_1oop>

080002e6 <else1>:
@then it loops from the beginning again
@Parameters: none
@Returns: nothing
@
else1:
    add r6, r6, #1 @the program has officially looped and r6 needs to be updated to reflect that
 80002e6:	f106 0601 	add.w	r6, r6, #1
    mov r7, #0 @resetting the number incase there is more than one cycle
 80002ea:	f04f 0700 	mov.w	r7, #0
    @need to put an if statement to check if the count is the same as the one that the user entered
    bl else3 @going back to the loop
 80002ee:	f000 f800 	bl	80002f2 <else3>

080002f2 <else3>:
@it compared r6 to r5 and if they are equal it will exit and if not it will go back and loop from the beginning again
@Parameters: none
@Returns: nothing
@
else3:
    cmp r6, r5 @compare r6 to r5
 80002f2:	42ae      	cmp	r6, r5
        beq exit @if theyre equal go to exit
 80002f4:	d003      	beq.n	80002fe <exit>
    mov r2, #0 @if theyre not then make r2 0
 80002f6:	f04f 0200 	mov.w	r2, #0
    bl led_1oop @go back to the loop
 80002fa:	f7ff ffdd 	bl	80002b8 <led_1oop>

080002fe <exit>:
@it pops all the registers to how they were before entering the main looping function
@Parameters: none
@Returns: nothing
@
exit:
    pop {r0-r7, lr} @popping off everything
 80002fe:	e8bd 40ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, lr}
    bx lr @ Return (Branch eXchange) to the address in the link register (lr
 8000302:	4770      	bx	lr

08000304 <first_light>:
@Description: This function is used only for the first turning on of light 0 on the board
@Parameters: none
@Returns: nothing
@
first_light:
    mov r0, r7 @making r0 the same as r7
 8000304:	4638      	mov	r0, r7
    bl BSP_LED_Toggle @toggling the light
 8000306:	f00b fef1 	bl	800c0ec <BSP_LED_Toggle>
    add r2, r2, #1 @adding 1 to r2 to tell the program that the light is on
 800030a:	f102 0201 	add.w	r2, r2, #1
    mov r3, r4
 800030e:	4623      	mov	r3, r4
    bl led_1oop @going back to the loop
 8000310:	f7ff ffd2 	bl	80002b8 <led_1oop>

08000314 <get_string>:
.thumb_func @ Specifies that the following symbol is the name of a THUMB
@ encoded function. Necessary for interlinking between ARM and THUMB code.
.type get_string, %function @ Declares that the symbol is a function (not strictly required)
@ Function Declaration : int bc_led_demo_a2(int x, int y)
get_string:
    push {lr}
 8000314:	b500      	push	{lr}
    mov r1, #0 @setting up index
 8000316:	f04f 0100 	mov.w	r1, #0
    @turn the ascii value into something
    @bl iterateLoop

    @iterateLoop:
    @{
        ldrb r1, [r0] @dereference the character that r0 points to
 800031a:	7801      	ldrb	r1, [r0, #0]
        @puts the byte that was in r0 into r1

        mov r0, r1 @move the ascii value back into r0 maybe?
 800031c:	4608      	mov	r0, r1
        pop {lr}
 800031e:	f85d eb04 	ldr.w	lr, [sp], #4
        bx lr        
 8000322:	4770      	bx	lr

08000324 <bc_Game>:
@r
@
@ Here is the actual add_test function
bc_Game:
    @this function gets input from the program at r0 r1 and r2 so I need to do something with all of those values
    push {r0-r9, lr}
 8000324:	e92d 43ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    @lets first get the pattern becasue it is arguably the most inportant
    mov r4, r1 @loading the whole string into r4
 8000328:	460c      	mov	r4, r1
    mov r5, r0 @moving delay into r5 for use later
 800032a:	4605      	mov	r5, r0
    mov r6, r2 @moving the winning number into r6 for us later
 800032c:	4616      	mov	r6, r2
    @since r2 is not used currently I will use it to turn off all the lights
    mov r2, #7 @7 for the amount of leds on the board
 800032e:	f04f 0207 	mov.w	r2, #7



    mov r3, #1000 @for some reason I can't just multiply r5 by 1000 so I needed to put that number somewhere that hadn't been touched by the input from C
 8000332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    @after this line r3 being 1000 does not matter and is not needed

    mul r5, r5, r3 @getting the delay to be larger, ie original delay = 500, and the new delay is 500,000
 8000336:	fb05 f503 	mul.w	r5, r5, r3
    mov r7, r5 @moving the delay into a safer register that will only be used to replenish the delay after the loops
 800033a:	462f      	mov	r7, r5
    mov r2, #0 @make sure r2 is 0 because it is now going to be used for the index of the string
 800033c:	f04f 0200 	mov.w	r2, #0
        mov r9, #0 @make r9 0
 8000340:	f04f 0900 	mov.w	r9, #0
    bl all_off_loop
 8000344:	f000 f800 	bl	8000348 <all_off_loop>

08000348 <all_off_loop>:
@Description: This loop is called at the beginning of the program to ensure all lights are starting turned off
@Parameters: none
@Returns: nothing
@
all_off_loop:
    mov r0, r2
 8000348:	4610      	mov	r0, r2
    bl BSP_LED_Off
 800034a:	f00b fec1 	bl	800c0d0 <BSP_LED_Off>
    subs r2, #1
 800034e:	3a01      	subs	r2, #1
    bge first_light
 8000350:	dad8      	bge.n	8000304 <first_light>

08000352 <pattern_loop>:
@Parameters: none
@Returns: nothing
@
pattern_loop:
    @loop while delay > 0
    mov r0, #0 @make sure r0 is 0 before calling get state
 8000352:	f04f 0000 	mov.w	r0, #0
    bl BSP_PB_GetState @comparing the button to 1
 8000356:	f00b ff0f 	bl	800c178 <BSP_PB_GetState>
    cmp r0, #1
 800035a:	2801      	cmp	r0, #1
    beq win_or_lose
 800035c:	d02a      	beq.n	80003b4 <win_or_lose>
    subs r5, r5, #1 @subtract one from r5 every time    
 800035e:	3d01      	subs	r5, #1
    bge pattern_loop @looping
 8000360:	daf7      	bge.n	8000352 <pattern_loop>

@when done looping
    b toggle_light
 8000362:	e7ff      	b.n	8000364 <toggle_light>

08000364 <toggle_light>:
@Parameters: none
@Returns: nothing
@
toggle_light:
@this function is going to toggle the light that is currently turned on
    ldrb r8, [r4, r2] @loading r8 with the ascii character that is at r3 of the string r4
 8000364:	f814 8002 	ldrb.w	r8, [r4, r2]
    @going to check if r8 is null
    @make an if statement to check if r8 is 0 because it shouldn't ever be unles the string has reached the end
    @if it has reached the end the function is goint o be called again after the index has been reset
    cmp r8, #0 @if r8 == 0
 8000368:	f1b8 0f00 	cmp.w	r8, #0
    beq reset_iterator
 800036c:	d017      	beq.n	800039e <reset_iterator>
    @if r8 is not == 8
    @need to use a variable to demonstrate if the loop has currently gone through and the light is on still
    @ill use r9 for now    
    add r9, r9, #1 @add 1 into r9
 800036e:	f109 0901 	add.w	r9, r9, #1

    subs r8, r8, 48 @subtracting 48 from r8 to get the actual integer value instead of the ascii value
 8000372:	f1b8 0830 	subs.w	r8, r8, #48	; 0x30
    mov r0, r8 @move r8 into r0 to be used when calling BSP_LED_TOGGLE
 8000376:	4640      	mov	r0, r8
    bl BSP_LED_Toggle @turn on the light that r0 is equal to
 8000378:	f00b feb8 	bl	800c0ec <BSP_LED_Toggle>
    mov r5, r7 @move r7 into r5 to loop again
 800037c:	463d      	mov	r5, r7
    cmp r9, #2 @if r9 is 2
 800037e:	f1b9 0f02 	cmp.w	r9, #2
    bge update_iterator @go to update the iterator if r9 is 2 meaning this is the second loop through
 8000382:	da10      	bge.n	80003a6 <update_iterator>

    bl pattern_loop @go back into the loop
 8000384:	f7ff ffe5 	bl	8000352 <pattern_loop>

08000388 <toggle_light_first>:
@Parameters: none
@Returns: nothing
@
toggle_light_first:
@this function is just for the first instance of turning on the light
    ldrb r8, [r4, r2] @loading r8 with the ascii character that is at r3 of the string r4
 8000388:	f814 8002 	ldrb.w	r8, [r4, r2]
    add r9, r9, #1 @add 1 into r9
 800038c:	f109 0901 	add.w	r9, r9, #1
    subs r8, r8, 48 @subtracting 48 from r8 to get the actual integer value instead of the ascii value
 8000390:	f1b8 0830 	subs.w	r8, r8, #48	; 0x30
    mov r0, r8 @move r8 into r0 to be used when calling BSP_LED_TOGGLE
 8000394:	4640      	mov	r0, r8
    bl BSP_LED_Toggle @turn on the light that r0 is equal to
 8000396:	f00b fea9 	bl	800c0ec <BSP_LED_Toggle>
    bl pattern_loop @go back into the loop
 800039a:	f7ff ffda 	bl	8000352 <pattern_loop>

0800039e <reset_iterator>:
@Description: This function resets the register that has been used to iterate through the string passed by the user
@Parameters: none
@Returns: nothing
@
reset_iterator:
    mov r2, #0 @resetting r2 to be 0
 800039e:	f04f 0200 	mov.w	r2, #0
    bl toggle_light @going back to try again now that the index is reset
 80003a2:	f7ff ffdf 	bl	8000364 <toggle_light>

080003a6 <update_iterator>:
@Description: This function is used to updat the iterator to be the next item in the string that has been passed in
@Parameters: none
@Returns: nothing
@
update_iterator:
    add r2, r2, #1 @increment the index
 80003a6:	f102 0201 	add.w	r2, r2, #1
    mov r9, #0 @put 0 back into r9
 80003aa:	f04f 0900 	mov.w	r9, #0
    @we need to reset the dealy and then go back to the loop from here
    mov r5, r7 @move delay back
 80003ae:	463d      	mov	r5, r7
    bl pattern_loop @going back to loop again
 80003b0:	f7ff ffcf 	bl	8000352 <pattern_loop>

080003b4 <win_or_lose>:
@Parameters: none
@Returns: nothing
@
win_or_lose:
@this function is going to check if the user pressed the button at the right time
    mov r4, #3 @used for if the player wins
 80003b4:	f04f 0403 	mov.w	r4, #3
    @need to turn off the curent light that is on
    mov r0, r8 @getting the led thats currently on
 80003b8:	4640      	mov	r0, r8
    @need to see if the led is currently on or not
    cmp r9, #1 @if the light is currently turned on it will turn it off
 80003ba:	f1b9 0f01 	cmp.w	r9, #1
    beq final_toggle
 80003be:	d003      	beq.n	80003c8 <final_toggle>
    cmp r6, r8 @comparing the target button to the current light that is active
 80003c0:	4546      	cmp	r6, r8
    beq winner @if they are the same then the user wins and if theyre not then they lose
 80003c2:	d007      	beq.n	80003d4 <winner>
    @if its not the same then they lose
    bl loser @branch to the losing function
 80003c4:	f000 f819 	bl	80003fa <loser>

080003c8 <final_toggle>:
@Description: This function turns off the light if the usr happened to press the button while the light was still on
@Parameters: none
@Returns: nothing
@
final_toggle:
    bl BSP_LED_Toggle
 80003c8:	f00b fe90 	bl	800c0ec <BSP_LED_Toggle>
    mov r9, #0 @signifying the led is off
 80003cc:	f04f 0900 	mov.w	r9, #0
    bl win_or_lose
 80003d0:	f7ff fff0 	bl	80003b4 <win_or_lose>

080003d4 <winner>:
@
winner:
    @this function needs to turn on all lights twice then bx lr
    @this is the end of the program so the registers values are not important any more seeing as most of them will not be touched any more
    @I want to try looping the led toggle inside of here so I'll make a winner loop 
    mov r5, r7 @moving the delay back to r5 for use inside winner_delay
 80003d4:	463d      	mov	r5, r7
    mov r6, #7 @r6 holds the amount of leds on the board and the amount of times the program is going to loop (counting 0 as a light)
 80003d6:	f04f 0607 	mov.w	r6, #7

    bl winner_loop
 80003da:	f000 f804 	bl	80003e6 <winner_loop>

080003de <winner_delay>:
@Description: This function is used to delay the time where the lights are blinked on and off if the user has won
@Parameters: none
@Returns: nothing
@
winner_delay:
    subs r5, r5, #1 @subtracting 1 every time it loops
 80003de:	3d01      	subs	r5, #1
    bge winner_delay
 80003e0:	dafd      	bge.n	80003de <winner_delay>

    @if the loop is over
    bl winner @go back to winner
 80003e2:	f7ff fff7 	bl	80003d4 <winner>

080003e6 <winner_loop>:
@Description: This loop will loop through all the lights on the board and turn them all on, if the program is done looping through it will exit
@Parameters: none
@Returns: nothing
@
winner_loop:
    mov r0, r6 @move the led into r0
 80003e6:	4630      	mov	r0, r6
    bl BSP_LED_Toggle @toggling led
 80003e8:	f00b fe80 	bl	800c0ec <BSP_LED_Toggle>
    subs r6, #1 @taking 1 away from the loop total
 80003ec:	3e01      	subs	r6, #1
    bge winner_loop
 80003ee:	dafa      	bge.n	80003e6 <winner_loop>

    @if the loop is over
    subs r4, #1
 80003f0:	3c01      	subs	r4, #1
    bge winner_delay @going back because we need to blink the lights twice
 80003f2:	daf4      	bge.n	80003de <winner_delay>

    @if all the lights have been turned on and off twice
    pop {r0-r9, lr}
 80003f4:	e8bd 43ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    bx lr @return
 80003f8:	4770      	bx	lr

080003fa <loser>:
@Parameters: none
@Returns: nothing
@
loser:
    @this function turns on the led that was the target
    mov r0, r6 @moving the target into r0 to be turned on
 80003fa:	4630      	mov	r0, r6
    bl BSP_LED_Toggle
 80003fc:	f00b fe76 	bl	800c0ec <BSP_LED_Toggle>
    pop {r0-r9, lr}
 8000400:	e8bd 43ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    bx lr @return
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <accel_test>:
@
@ (-X, -Y)          7           (+X, -Y)


accel_test:
    push {lr}
 8000408:	b500      	push	{lr}

    ldr r0, =READ_DELAY
 800040a:	4867      	ldr	r0, [pc, #412]	; (80005a8 <_bc_a5_tick_check+0x18>)
    bl busy_delay
 800040c:	f7ff ff2d 	bl	800026a <busy_delay>
    
    mov r0, #I2C_Address
 8000410:	f04f 0032 	mov.w	r0, #50	; 0x32
    mov r1, #Y_HI @reads the Y value at high order
 8000414:	f04f 012b 	mov.w	r1, #43	; 0x2b
    bl COMPASSACCELERO_IO_Read @called to read the accelerometer value
 8000418:	f00b ffa2 	bl	800c360 <COMPASSACCELERO_IO_Read>
    
    sxtb r0, r0 @turn 8 bit value into 32 bit value
 800041c:	b240      	sxtb	r0, r0

    @at this point r0 holds a useful value in the range of -128 to +127 represnting the tilt on the axis read

    pop {lr}
 800041e:	f85d eb04 	ldr.w	lr, [sp], #4
    bx lr @ Return (Branch eXchange) to the address in the link register (lr)
 8000422:	4770      	bx	lr

08000424 <GAME_TIME>:
 8000424:	00000000 	.word	0x00000000

08000428 <TARGET>:
 8000428:	00000000 	.word	0x00000000

0800042c <TARGET_TIME>:
 800042c:	00000000 	.word	0x00000000

08000430 <X_VAL>:
 8000430:	00000000 	.word	0x00000000

08000434 <Y_VAL>:
 8000434:	00000000 	.word	0x00000000

08000438 <CURRENT_LED>:
 8000438:	00000000 	.word	0x00000000

0800043c <PREVIOUS_LED>:
 800043c:	00000000 	.word	0x00000000

08000440 <bc_tilt>:
@Returns: r0 - the delay variable
@
bc_tilt:
@start of function
@r0 is the delay r1 is the target r2 is the game duration
    push {r4, lr}
 8000440:	b510      	push	{r4, lr}

    @going to use r4 for the address of stuff
    ldr r4, =TARGET_TIME
 8000442:	4c5a      	ldr	r4, [pc, #360]	; (80005ac <_bc_a5_tick_check+0x1c>)
    str r0, [r4] @loading target time with the delay passed in by the user
 8000444:	6020      	str	r0, [r4, #0]
    ldr r4, =TARGET
 8000446:	4c5a      	ldr	r4, [pc, #360]	; (80005b0 <_bc_a5_tick_check+0x20>)
    str r1, [r4] @loading the target variable with the target LED
 8000448:	6021      	str	r1, [r4, #0]
    mov r4, #TIME_MULTIPLIER @moving time multiplier into r4
 800044a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    mul r4, r2, r4 @multiplying the game time to be in the 10 thousands of ticks
 800044e:	fb02 f404 	mul.w	r4, r2, r4
    ldr r2, =GAME_TIME
 8000452:	4a58      	ldr	r2, [pc, #352]	; (80005b4 <_bc_a5_tick_check+0x24>)
    str r4, [r2] @moving the now ready time into game time
 8000454:	6014      	str	r4, [r2, #0]

    @r4 holds the time the user needs to keep the target light on for
    @r5 holds the target light
    @r6 holds the total game time

    pop {r4, lr}
 8000456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bx lr
 800045a:	4770      	bx	lr

0800045c <bc_tick>:
@Parameters: none
@Returns: nothing
@
bc_tick:

    push {lr}
 800045c:	b500      	push	{lr}
    ldr r1, =GAME_TIME
 800045e:	4955      	ldr	r1, [pc, #340]	; (80005b4 <_bc_a5_tick_check+0x24>)
    ldr r0, [r1] @loading r1 into r0
 8000460:	6808      	ldr	r0, [r1, #0]
    subs r0, r0, 1 @subtracting 1 from r0 and if its 0 sent the negative flag
 8000462:	3801      	subs	r0, #1

    @if ticks hit 0 stop doing stuff
    ble game_lose
 8000464:	dd62      	ble.n	800052c <game_lose>

    @if above 0 store the result back and do stuff or tick another value
    str r0, [r1]
 8000466:	6008      	str	r0, [r1, #0]

    bgt do_nothing @do nothing if we have not hit 0
 8000468:	dc7d      	bgt.n	8000566 <do_nothing>

    @call the function to check values of X and Y for the board
    mov r0, #I2C_Address
 800046a:	f04f 0032 	mov.w	r0, #50	; 0x32
    mov r1, #X_HI @getting the X value first
 800046e:	f04f 0129 	mov.w	r1, #41	; 0x29
    bl COMPASSACCELERO_IO_Read @call to read accelerometer value for X
 8000472:	f00b ff75 	bl	800c360 <COMPASSACCELERO_IO_Read>
    sxtb r0, r0 @turn the 8 bit into a 32 bit for use
 8000476:	b240      	sxtb	r0, r0

    ldr r2, =X_VAL @ getting X address
 8000478:	4a4f      	ldr	r2, [pc, #316]	; (80005b8 <_bc_a5_tick_check+0x28>)
    str r0, [r2] @putting the value into X_VAL
 800047a:	6010      	str	r0, [r2, #0]

    @now onto getting the Y value
    mov r0, #I2C_Address
 800047c:	f04f 0032 	mov.w	r0, #50	; 0x32
    mov r1, #Y_HI @getting the Y value second
 8000480:	f04f 012b 	mov.w	r1, #43	; 0x2b
    bl COMPASSACCELERO_IO_Read
 8000484:	f00b ff6c 	bl	800c360 <COMPASSACCELERO_IO_Read>
    sxtb r0, r0 @turning the 8 bit into 32 bit
 8000488:	b240      	sxtb	r0, r0

    ldr r2, =Y_VAL @getting Y address 
 800048a:	4a4c      	ldr	r2, [pc, #304]	; (80005bc <_bc_a5_tick_check+0x2c>)
    str r0, [r2] @storing the value
 800048c:	6010      	str	r0, [r2, #0]

    @right about here we probably call the function to check the value of the accelerometer and return it as a workable

    bl accel_to_LED @the r0 value exiting this function should be between 0 and 7
 800048e:	f000 f806 	bl	800049e <accel_to_LED>
    @value for an led between 0 and 7 and if its the same as the target then we would decrement the target led
    ldr r2, =CURRENT_LED
 8000492:	4a4b      	ldr	r2, [pc, #300]	; (80005c0 <_bc_a5_tick_check+0x30>)
    ldr r1, [r2]
 8000494:	6811      	ldr	r1, [r2, #0]
    

    @call function to decrement the winning time
    cmp r0, r1 @Compare the currently turned on LED to the LED returned from accel_to_LED
 8000496:	4288      	cmp	r0, r1
    beq CORRECT_LED @if the light is the correct one we go into this function to decrement how long the timer needs to be held for
 8000498:	d025      	beq.n	80004e6 <CORRECT_LED>

    @if the led currently on is WRONG we go into a different function
    bl WRONG_LED
 800049a:	f000 f838 	bl	800050e <WRONG_LED>

0800049e <accel_to_LED>:
 @if Y is positive output will be 0, 1, or 2
 @if Y is negative output will be 5, 6, or 7


@LEDS CURRENTLY USED 0 1 2 3 4 5 6 7
    push {lr}
 800049e:	b500      	push	{lr}


    ldr r0, =X_VAL @load the X value into r0
 80004a0:	4845      	ldr	r0, [pc, #276]	; (80005b8 <_bc_a5_tick_check+0x28>)

    ldr r1, =Y_VAL @load the Y value into r1
 80004a2:	4946      	ldr	r1, [pc, #280]	; (80005bc <_bc_a5_tick_check+0x2c>)


    cmp r0, #0 @compare r0 to 0
 80004a4:	2800      	cmp	r0, #0
    ble X_NEGATIVE @if X is less than or equal to 0 it goes into X_NEGATIVE    
 80004a6:	dd03      	ble.n	80004b0 <X_NEGATIVE>
    @if it gets past this line that means that X is positive

    cmp r1, #0 @compare Y to 0
 80004a8:	2900      	cmp	r1, #0
    ble Y_NEGATIVE @ if Y is below 0 then we go to Y_NEGATIVE
 80004aa:	dd13      	ble.n	80004d4 <Y_NEGATIVE>

    mov r0, #2 @return LED 2
 80004ac:	f04f 0002 	mov.w	r0, #2

080004b0 <X_NEGATIVE>:


    X_NEGATIVE:
        cmp r0, #0 @need to compare X to 0 again
 80004b0:	2800      	cmp	r0, #0
        beq X_IS_ZERO @checking if X is 0 and if it is we go to X_IS_ZERO
 80004b2:	d007      	beq.n	80004c4 <X_IS_ZERO>

        cmp r1, #0 @compare Y to 0
 80004b4:	2900      	cmp	r1, #0
        ble X_NEGATIVE_Y_NEGATIVE @if X and Y are both negative but NOT 0 brach to X_NEGATIVE_Y_NEGATIVE
 80004b6:	dd01      	ble.n	80004bc <X_NEGATIVE_Y_NEGATIVE>

        mov r0, #1 @returning LED 1
 80004b8:	f04f 0001 	mov.w	r0, #1

080004bc <X_NEGATIVE_Y_NEGATIVE>:

        X_NEGATIVE_Y_NEGATIVE:
            cmp r1, #0 @checking if Y is 0
 80004bc:	2900      	cmp	r1, #0
            beq X_NEGATIVE_Y_IS_ZERO @if X is negative and Y is 0 brahcn to X_NEGATIVE_Y_IS_ZERO
 80004be:	d007      	beq.n	80004d0 <X_NEGATIVE_Y_IS_ZERO>

            mov r0, #5 @returning LED 5
 80004c0:	f04f 0005 	mov.w	r0, #5

080004c4 <X_IS_ZERO>:


        X_IS_ZERO:
        @if it gets to here we know X is 0
            cmp r1, #0 @comparing Y to 0
 80004c4:	2900      	cmp	r1, #0
            ble X_IS_ZERO_Y_NEGATIVE
 80004c6:	dd01      	ble.n	80004cc <X_IS_ZERO_Y_NEGATIVE>

            mov r0, #0 @returning LED 0
 80004c8:	f04f 0000 	mov.w	r0, #0

080004cc <X_IS_ZERO_Y_NEGATIVE>:


        X_IS_ZERO_Y_NEGATIVE:
            mov r0, #7 @returning LED 7
 80004cc:	f04f 0007 	mov.w	r0, #7

080004d0 <X_NEGATIVE_Y_IS_ZERO>:


        X_NEGATIVE_Y_IS_ZERO:
            mov r0, #3 @returning LED 3
 80004d0:	f04f 0003 	mov.w	r0, #3

080004d4 <Y_NEGATIVE>:
            

    Y_NEGATIVE:
        cmp r1, #0 @compare Y to 0 again
 80004d4:	2900      	cmp	r1, #0
        beq Y_IS_ZERO @if Y is 0 branch to Y_IS_ZERO
 80004d6:	d001      	beq.n	80004dc <Y_IS_ZERO>

        mov r0, #6 @return LED 6
 80004d8:	f04f 0006 	mov.w	r0, #6

080004dc <Y_IS_ZERO>:


        Y_IS_ZERO:
            mov r0, #4 @return LED 4
 80004dc:	f04f 0004 	mov.w	r0, #4
    @start by checking if



    pop {lr}
 80004e0:	f85d eb04 	ldr.w	lr, [sp], #4
    bx lr
 80004e4:	4770      	bx	lr

080004e6 <CORRECT_LED>:
@Description: This function is used to decrement the total time the user has held the light on the winning number for
@Parameters: none
@Returns: nothing
@
CORRECT_LED:
    push {r4, lr}
 80004e6:	b510      	push	{r4, lr}
    @turn off the old led first
    ldr r2, =PREVIOUS_LED
 80004e8:	4a36      	ldr	r2, [pc, #216]	; (80005c4 <_bc_a5_tick_check+0x34>)
    ldr r0, [r2]
 80004ea:	6810      	ldr	r0, [r2, #0]
    bl BSP_LED_Off @turning off the old LED
 80004ec:	f00b fdf0 	bl	800c0d0 <BSP_LED_Off>
    @then turn on the new one
    mov r4, r0
 80004f0:	4604      	mov	r4, r0
    bl BSP_LED_On @r0 should still be whatever it was returned from the accel_to_LED function
 80004f2:	f00b fddf 	bl	800c0b4 <BSP_LED_On>
    ldr r1, =TARGET_TIME @loading r1 with the target
 80004f6:	492d      	ldr	r1, [pc, #180]	; (80005ac <_bc_a5_tick_check+0x1c>)
    ldr r0, [r1]
 80004f8:	6808      	ldr	r0, [r1, #0]
    subs r0, r0, #1 @subtracting 1 from the target timer
 80004fa:	3801      	subs	r0, #1
    ble game_win
 80004fc:	dd1f      	ble.n	800053e <game_win>

    mov r0, r4
 80004fe:	4620      	mov	r0, r4
    @these lines deal with manipulating the most recent LED to be turned on
    ldr r1, =CURRENT_LED
 8000500:	492f      	ldr	r1, [pc, #188]	; (80005c0 <_bc_a5_tick_check+0x30>)
    ldr r2, =PREVIOUS_LED
 8000502:	4a30      	ldr	r2, [pc, #192]	; (80005c4 <_bc_a5_tick_check+0x34>)
    ldr r0, [r1]
 8000504:	6808      	ldr	r0, [r1, #0]
    str r0, [r2]
 8000506:	6010      	str	r0, [r2, #0]


    pop {r4, lr}
 8000508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bx lr
 800050c:	4770      	bx	lr

0800050e <WRONG_LED>:
@because this is the wrong light
@Parameters: none
@Returns: nothing
@
WRONG_LED:
    push {r4, lr}
 800050e:	b510      	push	{r4, lr}
    @old light must be turned off first
    ldr r2, =PREVIOUS_LED
 8000510:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <_bc_a5_tick_check+0x34>)
    ldr r0, [r2]
 8000512:	6810      	ldr	r0, [r2, #0]
    bl BSP_LED_Off @turning off the old LED
 8000514:	f00b fddc 	bl	800c0d0 <BSP_LED_Off>

    mov r4, r0
 8000518:	4604      	mov	r4, r0
    bl BSP_LED_On @r0 should still be whatever it was returned from the accel_to_LED function
 800051a:	f00b fdcb 	bl	800c0b4 <BSP_LED_On>
    @these lines deal with manipulating the most recent LED to be turned on
    ldr r1, =CURRENT_LED
 800051e:	4928      	ldr	r1, [pc, #160]	; (80005c0 <_bc_a5_tick_check+0x30>)
    ldr r2, =PREVIOUS_LED
 8000520:	4a28      	ldr	r2, [pc, #160]	; (80005c4 <_bc_a5_tick_check+0x34>)
    mov r0, r4
 8000522:	4620      	mov	r0, r4
    ldr r0, [r1]
 8000524:	6808      	ldr	r0, [r1, #0]
    str r0, [r2]
 8000526:	6010      	str	r0, [r2, #0]
    pop {r4, lr}
 8000528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

0800052c <game_lose>:
@Parameters: none
@Returns: nothing
@
game_lose:
@empty function currently
    ldr r1, =CURRENT_LED
 800052c:	4924      	ldr	r1, [pc, #144]	; (80005c0 <_bc_a5_tick_check+0x30>)
    ldr r0, [r1]
 800052e:	6808      	ldr	r0, [r1, #0]
    @turn off whatever light is still on
    bl BSP_LED_Off
 8000530:	f00b fdce 	bl	800c0d0 <BSP_LED_Off>

    ldr r1, =TARGET
 8000534:	491e      	ldr	r1, [pc, #120]	; (80005b0 <_bc_a5_tick_check+0x20>)
    ldr r0, [r1] @assigning r0 to be the target to stay on
 8000536:	6808      	ldr	r0, [r1, #0]
    bl BSP_LED_On
 8000538:	f00b fdbc 	bl	800c0b4 <BSP_LED_On>

    bx lr 
 800053c:	4770      	bx	lr

0800053e <game_win>:
@Description: This function is used to blink on and off all the LEDs twice to indicate that the user has won the game
@Parameters: none
@Returns: nothing
@
game_win:
    push {r4, r5, lr}
 800053e:	b530      	push	{r4, r5, lr}
    mov r4, #7 @7 for how many lights
 8000540:	f04f 0407 	mov.w	r4, #7
    mov r5, #4 @runs through 4 times
 8000544:	f04f 0504 	mov.w	r5, #4

08000548 <toggle_loop>:
    toggle_loop:
    @runs 4 times
    @ldr r1, TARGET_TIME @the delay variable passed in at the start of the game
    @ldr r0, [r1]
    @bl busy_delay @delaying the blinking
    mov r0, r4
 8000548:	4620      	mov	r0, r4
    bl BSP_LED_Toggle
 800054a:	f00b fdcf 	bl	800c0ec <BSP_LED_Toggle>
    subs r4, r4, #1 @take one away from r4
 800054e:	3c01      	subs	r4, #1
    ble win_loop
 8000550:	ddff      	ble.n	8000552 <win_loop>

08000552 <win_loop>:

    win_loop: 
    ldr r1, TARGET_TIME @the delay variable passed in at the start of the game
 8000552:	f85f 1128 	ldr.w	r1, [pc, #-296]	; 800042c <TARGET_TIME>
    ldr r0, [r1]
 8000556:	6808      	ldr	r0, [r1, #0]
    bl busy_delay @delaying the blinking
 8000558:	f7ff fe87 	bl	800026a <busy_delay>
    subs r5, r5, #1
 800055c:	3d01      	subs	r5, #1
    ble toggle_loop @go back to toggle the lights if r5 isn't 0
 800055e:	ddf3      	ble.n	8000548 <toggle_loop>

    @if it is 0
    pop {r4, r5, lr}
 8000560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    bx lr @return
 8000564:	4770      	bx	lr

08000566 <do_nothing>:
@Description: This function does nothing
@Parameters: none
@Returns: nothing
@
do_nothing:
    pop {lr}
 8000566:	f85d eb04 	ldr.w	lr, [sp], #4
    bx lr
 800056a:	4770      	bx	lr

0800056c <lab8>:
.thumb_func @ Specifies that the following symbol is the name of a THUMB
@ encoded function. Necessary for interlinking between ARM and THUMB code.
.type lab8, %function @ Declares that the symbol is a function (not strictly required)

lab8:
push {lr}
 800056c:	b500      	push	{lr}
    @ This code turns on only one light – can you make it turn them all on at once?
    ldr r1, =LEDaddress @ Load the GPIO address we need
 800056e:	4916      	ldr	r1, [pc, #88]	; (80005c8 <_bc_a5_tick_check+0x38>)
    ldr r1, [r1] @ Dereference r1 to get the value we want
 8000570:	6809      	ldr	r1, [r1, #0]
    ldrh r0, [r1] @ Get the current state of that GPIO (half word only)
 8000572:	8808      	ldrh	r0, [r1, #0]
    orr r0, r0, #0x0100 @ Use bitwise OR (ORR) to set the bit at 0x0100
 8000574:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    strh r0, [r1] @ Write the half word back to the memory address for the GPIO
 8000578:	8008      	strh	r0, [r1, #0]
    pop {lr}
 800057a:	f85d eb04 	ldr.w	lr, [sp], #4
    bx lr
 800057e:	4770      	bx	lr

08000580 <LEDaddress>:
 8000580:	48001014 	.word	0x48001014

08000584 <_bc_a5_tick_handler>:
a5_delay: .word 0 @creating a variable for the delay

.text
_bc_a5_tick_handler:

    ldr r2, =a5_timeout
 8000584:	4a11      	ldr	r2, [pc, #68]	; (80005cc <_bc_a5_tick_check+0x3c>)
    str r0, [r2] @storing r0 into a5_timeout
 8000586:	6010      	str	r0, [r2, #0]
    ldr r2, =a5_delay
 8000588:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <_bc_a5_tick_check+0x40>)
    str r1, [r2] @storing r1 into a5_delay
 800058a:	6011      	str	r1, [r2, #0]


bx lr 
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <_bc_a5_tick_check>:
.thumb_func @ Specifies that the following symbol is the name of a THUMB
@ encoded function. Necessary for interlinking between ARM and THUMB code.
.type _bc_a5_tick_check, %function @ Declares that the symbol is a function (not strictly required)

_bc_a5_tick_check:
    push {lr}
 8000590:	b500      	push	{lr}

    @checking values to see if anything has been loaded into them

    ldr r2, =a5_timeout
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <_bc_a5_tick_check+0x3c>)
    ldr r4, [r2]
 8000594:	6814      	ldr	r4, [r2, #0]
    @ldr r2, =a5_delay
    @ldr r5, [r2]

    @checking if r4 is 0 or less than 0 and if it is we do nothing
    @we don't need to check r1 because they should only change within the same function
    subs r4, r4, #1 @#take 1 away from r0
 8000596:	3c01      	subs	r4, #1

    @if it's 0 or less than 0 we do nothing
    ble do_nothing
 8000598:	dde5      	ble.n	8000566 <do_nothing>

    @for early testing only turning on an led if it gets here
    mov r0, #1 @moving 1 into r0
 800059a:	f04f 0001 	mov.w	r0, #1
    bl BSP_LED_On
 800059e:	f00b fd89 	bl	800c0b4 <BSP_LED_On>

    pop {lr}
 80005a2:	f85d eb04 	ldr.w	lr, [sp], #4
    bx lr
 80005a6:	4770      	bx	lr
    ldr r0, =READ_DELAY
 80005a8:	000fffff 	.word	0x000fffff
    ldr r4, =TARGET_TIME
 80005ac:	0800042c 	.word	0x0800042c
    ldr r4, =TARGET
 80005b0:	08000428 	.word	0x08000428
    ldr r2, =GAME_TIME
 80005b4:	08000425 	.word	0x08000425
    ldr r2, =X_VAL @ getting X address
 80005b8:	08000430 	.word	0x08000430
    ldr r2, =Y_VAL @getting Y address 
 80005bc:	08000434 	.word	0x08000434
    ldr r2, =CURRENT_LED
 80005c0:	08000438 	.word	0x08000438
    ldr r2, =PREVIOUS_LED
 80005c4:	0800043c 	.word	0x0800043c
    ldr r1, =LEDaddress @ Load the GPIO address we need
 80005c8:	08000580 	.word	0x08000580
    ldr r2, =a5_timeout
 80005cc:	20000000 	.word	0x20000000
    ldr r2, =a5_delay
 80005d0:	20000004 	.word	0x20000004

080005d4 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80005d4:	b500      	push	{lr}
    push {r1}
 80005d6:	b402      	push	{r1}
    push {r0-r7}
 80005d8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r0, =0
 80005da:	f04f 0000 	mov.w	r0, #0
    bl   BSP_LED_Toggle           @@ call BSP function
 80005de:	f00b fd85 	bl	800c0ec <BSP_LED_Toggle>
    pop  {r0-r7}
 80005e2:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80005e4:	4908      	ldr	r1, [pc, #32]	; (8000608 <my_Init+0x4>)
    ldr  r0, [r1]
 80005e6:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80005e8:	bc02      	pop	{r1}
    pop  {pc}
 80005ea:	bd00      	pop	{pc}

080005ec <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80005ec:	b500      	push	{lr}
    push {r0-r1}
 80005ee:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80005f0:	4905      	ldr	r1, [pc, #20]	; (8000608 <my_Init+0x4>)
    ldr  r0, [r1]
 80005f2:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80005f4:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 80005f8:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 80005fa:	bc03      	pop	{r0, r1}
    pop  {pc}
 80005fc:	bd00      	pop	{pc}
 80005fe:	bf00      	nop

08000600 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000600:	b500      	push	{lr}
    pop  {pc}
 8000602:	bd00      	pop	{pc}

08000604 <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 8000604:	b500      	push	{lr}
    pop  {pc}
 8000606:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000608:	20000008 	.word	0x20000008

0800060c <atexit>:
 800060c:	2300      	movs	r3, #0
 800060e:	4601      	mov	r1, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f001 bef0 	b.w	80023f8 <__register_exitproc>

08000618 <__errno>:
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <__errno+0x8>)
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000010 	.word	0x20000010

08000624 <__libc_fini_array>:
 8000624:	b538      	push	{r3, r4, r5, lr}
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <__libc_fini_array+0x24>)
 8000628:	4d08      	ldr	r5, [pc, #32]	; (800064c <__libc_fini_array+0x28>)
 800062a:	1b5b      	subs	r3, r3, r5
 800062c:	109c      	asrs	r4, r3, #2
 800062e:	d007      	beq.n	8000640 <__libc_fini_array+0x1c>
 8000630:	3b04      	subs	r3, #4
 8000632:	441d      	add	r5, r3
 8000634:	3c01      	subs	r4, #1
 8000636:	f855 3904 	ldr.w	r3, [r5], #-4
 800063a:	4798      	blx	r3
 800063c:	2c00      	cmp	r4, #0
 800063e:	d1f9      	bne.n	8000634 <__libc_fini_array+0x10>
 8000640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000644:	f00c bbe2 	b.w	800ce0c <_fini>
 8000648:	0801cc04 	.word	0x0801cc04
 800064c:	0801cc00 	.word	0x0801cc00

08000650 <__libc_init_array>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	4e0d      	ldr	r6, [pc, #52]	; (8000688 <__libc_init_array+0x38>)
 8000654:	4d0d      	ldr	r5, [pc, #52]	; (800068c <__libc_init_array+0x3c>)
 8000656:	1b76      	subs	r6, r6, r5
 8000658:	10b6      	asrs	r6, r6, #2
 800065a:	d006      	beq.n	800066a <__libc_init_array+0x1a>
 800065c:	2400      	movs	r4, #0
 800065e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000662:	3401      	adds	r4, #1
 8000664:	4798      	blx	r3
 8000666:	42a6      	cmp	r6, r4
 8000668:	d1f9      	bne.n	800065e <__libc_init_array+0xe>
 800066a:	4e09      	ldr	r6, [pc, #36]	; (8000690 <__libc_init_array+0x40>)
 800066c:	4d09      	ldr	r5, [pc, #36]	; (8000694 <__libc_init_array+0x44>)
 800066e:	1b76      	subs	r6, r6, r5
 8000670:	f00c fbc6 	bl	800ce00 <_init>
 8000674:	10b6      	asrs	r6, r6, #2
 8000676:	d006      	beq.n	8000686 <__libc_init_array+0x36>
 8000678:	2400      	movs	r4, #0
 800067a:	f855 3b04 	ldr.w	r3, [r5], #4
 800067e:	3401      	adds	r4, #1
 8000680:	4798      	blx	r3
 8000682:	42a6      	cmp	r6, r4
 8000684:	d1f9      	bne.n	800067a <__libc_init_array+0x2a>
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	0801cbf8 	.word	0x0801cbf8
 800068c:	0801cbf8 	.word	0x0801cbf8
 8000690:	0801cc00 	.word	0x0801cc00
 8000694:	0801cbf8 	.word	0x0801cbf8

08000698 <memset>:
 8000698:	0783      	lsls	r3, r0, #30
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	d048      	beq.n	8000730 <memset+0x98>
 800069e:	1e54      	subs	r4, r2, #1
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d03f      	beq.n	8000724 <memset+0x8c>
 80006a4:	b2ca      	uxtb	r2, r1
 80006a6:	4603      	mov	r3, r0
 80006a8:	e001      	b.n	80006ae <memset+0x16>
 80006aa:	3c01      	subs	r4, #1
 80006ac:	d33a      	bcc.n	8000724 <memset+0x8c>
 80006ae:	f803 2b01 	strb.w	r2, [r3], #1
 80006b2:	079d      	lsls	r5, r3, #30
 80006b4:	d1f9      	bne.n	80006aa <memset+0x12>
 80006b6:	2c03      	cmp	r4, #3
 80006b8:	d92d      	bls.n	8000716 <memset+0x7e>
 80006ba:	b2cd      	uxtb	r5, r1
 80006bc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80006c0:	2c0f      	cmp	r4, #15
 80006c2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80006c6:	d936      	bls.n	8000736 <memset+0x9e>
 80006c8:	f1a4 0210 	sub.w	r2, r4, #16
 80006cc:	f022 0c0f 	bic.w	ip, r2, #15
 80006d0:	f103 0e20 	add.w	lr, r3, #32
 80006d4:	44e6      	add	lr, ip
 80006d6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80006da:	f103 0210 	add.w	r2, r3, #16
 80006de:	e942 5504 	strd	r5, r5, [r2, #-16]
 80006e2:	e942 5502 	strd	r5, r5, [r2, #-8]
 80006e6:	3210      	adds	r2, #16
 80006e8:	4572      	cmp	r2, lr
 80006ea:	d1f8      	bne.n	80006de <memset+0x46>
 80006ec:	f10c 0201 	add.w	r2, ip, #1
 80006f0:	f014 0f0c 	tst.w	r4, #12
 80006f4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80006f8:	f004 0c0f 	and.w	ip, r4, #15
 80006fc:	d013      	beq.n	8000726 <memset+0x8e>
 80006fe:	f1ac 0304 	sub.w	r3, ip, #4
 8000702:	f023 0303 	bic.w	r3, r3, #3
 8000706:	3304      	adds	r3, #4
 8000708:	4413      	add	r3, r2
 800070a:	f842 5b04 	str.w	r5, [r2], #4
 800070e:	4293      	cmp	r3, r2
 8000710:	d1fb      	bne.n	800070a <memset+0x72>
 8000712:	f00c 0403 	and.w	r4, ip, #3
 8000716:	b12c      	cbz	r4, 8000724 <memset+0x8c>
 8000718:	b2ca      	uxtb	r2, r1
 800071a:	441c      	add	r4, r3
 800071c:	f803 2b01 	strb.w	r2, [r3], #1
 8000720:	429c      	cmp	r4, r3
 8000722:	d1fb      	bne.n	800071c <memset+0x84>
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	4664      	mov	r4, ip
 8000728:	4613      	mov	r3, r2
 800072a:	2c00      	cmp	r4, #0
 800072c:	d1f4      	bne.n	8000718 <memset+0x80>
 800072e:	e7f9      	b.n	8000724 <memset+0x8c>
 8000730:	4603      	mov	r3, r0
 8000732:	4614      	mov	r4, r2
 8000734:	e7bf      	b.n	80006b6 <memset+0x1e>
 8000736:	461a      	mov	r2, r3
 8000738:	46a4      	mov	ip, r4
 800073a:	e7e0      	b.n	80006fe <memset+0x66>

0800073c <_printf_r>:
 800073c:	b40e      	push	{r1, r2, r3}
 800073e:	b500      	push	{lr}
 8000740:	b082      	sub	sp, #8
 8000742:	ab03      	add	r3, sp, #12
 8000744:	6881      	ldr	r1, [r0, #8]
 8000746:	f853 2b04 	ldr.w	r2, [r3], #4
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	f000 fb1c 	bl	8000d88 <_vfprintf_r>
 8000750:	b002      	add	sp, #8
 8000752:	f85d eb04 	ldr.w	lr, [sp], #4
 8000756:	b003      	add	sp, #12
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <printf>:
 800075c:	b40f      	push	{r0, r1, r2, r3}
 800075e:	b500      	push	{lr}
 8000760:	4907      	ldr	r1, [pc, #28]	; (8000780 <printf+0x24>)
 8000762:	b083      	sub	sp, #12
 8000764:	ab04      	add	r3, sp, #16
 8000766:	6808      	ldr	r0, [r1, #0]
 8000768:	f853 2b04 	ldr.w	r2, [r3], #4
 800076c:	6881      	ldr	r1, [r0, #8]
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	f000 fb0a 	bl	8000d88 <_vfprintf_r>
 8000774:	b003      	add	sp, #12
 8000776:	f85d eb04 	ldr.w	lr, [sp], #4
 800077a:	b004      	add	sp, #16
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000010 	.word	0x20000010

08000784 <_putchar_r>:
 8000784:	6882      	ldr	r2, [r0, #8]
 8000786:	f004 bdb5 	b.w	80052f4 <_putc_r>
 800078a:	bf00      	nop

0800078c <putchar>:
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <putchar+0xc>)
 800078e:	4601      	mov	r1, r0
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	6882      	ldr	r2, [r0, #8]
 8000794:	f004 bdae 	b.w	80052f4 <_putc_r>
 8000798:	20000010 	.word	0x20000010

0800079c <_puts_r>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	4604      	mov	r4, r0
 80007a0:	b088      	sub	sp, #32
 80007a2:	4608      	mov	r0, r1
 80007a4:	460d      	mov	r5, r1
 80007a6:	f000 f98b 	bl	8000ac0 <strlen>
 80007aa:	4e15      	ldr	r6, [pc, #84]	; (8000800 <_puts_r+0x64>)
 80007ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007ae:	9005      	str	r0, [sp, #20]
 80007b0:	2101      	movs	r1, #1
 80007b2:	1843      	adds	r3, r0, r1
 80007b4:	e9cd 6106 	strd	r6, r1, [sp, #24]
 80007b8:	a804      	add	r0, sp, #16
 80007ba:	2102      	movs	r1, #2
 80007bc:	9504      	str	r5, [sp, #16]
 80007be:	9303      	str	r3, [sp, #12]
 80007c0:	68a5      	ldr	r5, [r4, #8]
 80007c2:	9001      	str	r0, [sp, #4]
 80007c4:	9102      	str	r1, [sp, #8]
 80007c6:	b1b2      	cbz	r2, 80007f6 <_puts_r+0x5a>
 80007c8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80007cc:	049a      	lsls	r2, r3, #18
 80007ce:	d406      	bmi.n	80007de <_puts_r+0x42>
 80007d0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80007d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80007da:	81ab      	strh	r3, [r5, #12]
 80007dc:	666a      	str	r2, [r5, #100]	; 0x64
 80007de:	aa01      	add	r2, sp, #4
 80007e0:	4629      	mov	r1, r5
 80007e2:	4620      	mov	r0, r4
 80007e4:	f003 f9a6 	bl	8003b34 <__sfvwrite_r>
 80007e8:	2800      	cmp	r0, #0
 80007ea:	bf14      	ite	ne
 80007ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007f0:	200a      	moveq	r0, #10
 80007f2:	b008      	add	sp, #32
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	4620      	mov	r0, r4
 80007f8:	f003 f826 	bl	8003848 <__sinit>
 80007fc:	e7e4      	b.n	80007c8 <_puts_r+0x2c>
 80007fe:	bf00      	nop
 8000800:	0801cacc 	.word	0x0801cacc

08000804 <puts>:
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <puts+0xc>)
 8000806:	4601      	mov	r1, r0
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	f7ff bfc7 	b.w	800079c <_puts_r>
 800080e:	bf00      	nop
 8000810:	20000010 	.word	0x20000010

08000814 <setvbuf>:
 8000814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000818:	4c5a      	ldr	r4, [pc, #360]	; (8000984 <setvbuf+0x170>)
 800081a:	f8d4 8000 	ldr.w	r8, [r4]
 800081e:	b083      	sub	sp, #12
 8000820:	4604      	mov	r4, r0
 8000822:	460e      	mov	r6, r1
 8000824:	4617      	mov	r7, r2
 8000826:	461d      	mov	r5, r3
 8000828:	f1b8 0f00 	cmp.w	r8, #0
 800082c:	d003      	beq.n	8000836 <setvbuf+0x22>
 800082e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8000832:	2b00      	cmp	r3, #0
 8000834:	d068      	beq.n	8000908 <setvbuf+0xf4>
 8000836:	2f02      	cmp	r7, #2
 8000838:	d005      	beq.n	8000846 <setvbuf+0x32>
 800083a:	2f01      	cmp	r7, #1
 800083c:	f200 808e 	bhi.w	800095c <setvbuf+0x148>
 8000840:	2d00      	cmp	r5, #0
 8000842:	f2c0 808b 	blt.w	800095c <setvbuf+0x148>
 8000846:	4621      	mov	r1, r4
 8000848:	4640      	mov	r0, r8
 800084a:	f002 fed3 	bl	80035f4 <_fflush_r>
 800084e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000850:	b141      	cbz	r1, 8000864 <setvbuf+0x50>
 8000852:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8000856:	4299      	cmp	r1, r3
 8000858:	d002      	beq.n	8000860 <setvbuf+0x4c>
 800085a:	4640      	mov	r0, r8
 800085c:	f003 f864 	bl	8003928 <_free_r>
 8000860:	2300      	movs	r3, #0
 8000862:	6323      	str	r3, [r4, #48]	; 0x30
 8000864:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000868:	2300      	movs	r3, #0
 800086a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800086e:	61a3      	str	r3, [r4, #24]
 8000870:	6063      	str	r3, [r4, #4]
 8000872:	d151      	bne.n	8000918 <setvbuf+0x104>
 8000874:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
 8000878:	f02c 0c03 	bic.w	ip, ip, #3
 800087c:	2f02      	cmp	r7, #2
 800087e:	f8a4 c00c 	strh.w	ip, [r4, #12]
 8000882:	d057      	beq.n	8000934 <setvbuf+0x120>
 8000884:	ab01      	add	r3, sp, #4
 8000886:	466a      	mov	r2, sp
 8000888:	4621      	mov	r1, r4
 800088a:	4640      	mov	r0, r8
 800088c:	f003 fb88 	bl	8003fa0 <__swhatbuf_r>
 8000890:	89a3      	ldrh	r3, [r4, #12]
 8000892:	4318      	orrs	r0, r3
 8000894:	81a0      	strh	r0, [r4, #12]
 8000896:	b325      	cbz	r5, 80008e2 <setvbuf+0xce>
 8000898:	b326      	cbz	r6, 80008e4 <setvbuf+0xd0>
 800089a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800089e:	b37b      	cbz	r3, 8000900 <setvbuf+0xec>
 80008a0:	9b00      	ldr	r3, [sp, #0]
 80008a2:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80008a6:	6026      	str	r6, [r4, #0]
 80008a8:	42ab      	cmp	r3, r5
 80008aa:	bf1c      	itt	ne
 80008ac:	f44c 6c00 	orrne.w	ip, ip, #2048	; 0x800
 80008b0:	f8a4 c00c 	strhne.w	ip, [r4, #12]
 80008b4:	2f01      	cmp	r7, #1
 80008b6:	bf04      	itt	eq
 80008b8:	f04c 0c01 	orreq.w	ip, ip, #1
 80008bc:	f8a4 c00c 	strheq.w	ip, [r4, #12]
 80008c0:	f01c 0008 	ands.w	r0, ip, #8
 80008c4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80008c8:	fa1f f38c 	uxth.w	r3, ip
 80008cc:	d020      	beq.n	8000910 <setvbuf+0xfc>
 80008ce:	f013 0001 	ands.w	r0, r3, #1
 80008d2:	d03f      	beq.n	8000954 <setvbuf+0x140>
 80008d4:	2000      	movs	r0, #0
 80008d6:	426d      	negs	r5, r5
 80008d8:	60a0      	str	r0, [r4, #8]
 80008da:	61a5      	str	r5, [r4, #24]
 80008dc:	b003      	add	sp, #12
 80008de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008e2:	9d00      	ldr	r5, [sp, #0]
 80008e4:	4628      	mov	r0, r5
 80008e6:	f003 fb8b 	bl	8004000 <malloc>
 80008ea:	4606      	mov	r6, r0
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d038      	beq.n	8000962 <setvbuf+0x14e>
 80008f0:	89a3      	ldrh	r3, [r4, #12]
 80008f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f6:	81a3      	strh	r3, [r4, #12]
 80008f8:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1cf      	bne.n	80008a0 <setvbuf+0x8c>
 8000900:	4640      	mov	r0, r8
 8000902:	f002 ffa1 	bl	8003848 <__sinit>
 8000906:	e7cb      	b.n	80008a0 <setvbuf+0x8c>
 8000908:	4640      	mov	r0, r8
 800090a:	f002 ff9d 	bl	8003848 <__sinit>
 800090e:	e792      	b.n	8000836 <setvbuf+0x22>
 8000910:	60a0      	str	r0, [r4, #8]
 8000912:	b003      	add	sp, #12
 8000914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000918:	6921      	ldr	r1, [r4, #16]
 800091a:	4640      	mov	r0, r8
 800091c:	f003 f804 	bl	8003928 <_free_r>
 8000920:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000924:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
 8000928:	f02c 0c03 	bic.w	ip, ip, #3
 800092c:	2f02      	cmp	r7, #2
 800092e:	f8a4 c00c 	strh.w	ip, [r4, #12]
 8000932:	d1a7      	bne.n	8000884 <setvbuf+0x70>
 8000934:	2000      	movs	r0, #0
 8000936:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800093a:	f04c 0c02 	orr.w	ip, ip, #2
 800093e:	2100      	movs	r1, #0
 8000940:	2201      	movs	r2, #1
 8000942:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8000946:	f8a4 c00c 	strh.w	ip, [r4, #12]
 800094a:	60a1      	str	r1, [r4, #8]
 800094c:	6023      	str	r3, [r4, #0]
 800094e:	b003      	add	sp, #12
 8000950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000954:	60a5      	str	r5, [r4, #8]
 8000956:	b003      	add	sp, #12
 8000958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800095c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000960:	e7d7      	b.n	8000912 <setvbuf+0xfe>
 8000962:	f8dd 9000 	ldr.w	r9, [sp]
 8000966:	45a9      	cmp	r9, r5
 8000968:	d004      	beq.n	8000974 <setvbuf+0x160>
 800096a:	4648      	mov	r0, r9
 800096c:	f003 fb48 	bl	8004000 <malloc>
 8000970:	4606      	mov	r6, r0
 8000972:	b920      	cbnz	r0, 800097e <setvbuf+0x16a>
 8000974:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800097c:	e7db      	b.n	8000936 <setvbuf+0x122>
 800097e:	464d      	mov	r5, r9
 8000980:	e7b6      	b.n	80008f0 <setvbuf+0xdc>
 8000982:	bf00      	nop
 8000984:	20000010 	.word	0x20000010

08000988 <strcasecmp>:
 8000988:	b510      	push	{r4, lr}
 800098a:	4c11      	ldr	r4, [pc, #68]	; (80009d0 <strcasecmp+0x48>)
 800098c:	4686      	mov	lr, r0
 800098e:	f81e cb01 	ldrb.w	ip, [lr], #1
 8000992:	f814 300c 	ldrb.w	r3, [r4, ip]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	2b01      	cmp	r3, #1
 800099c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009a0:	4662      	mov	r2, ip
 80009a2:	bf08      	it	eq
 80009a4:	f10c 0220 	addeq.w	r2, ip, #32
 80009a8:	f814 c003 	ldrb.w	ip, [r4, r3]
 80009ac:	f00c 0c03 	and.w	ip, ip, #3
 80009b0:	f1bc 0f01 	cmp.w	ip, #1
 80009b4:	4618      	mov	r0, r3
 80009b6:	d004      	beq.n	80009c2 <strcasecmp+0x3a>
 80009b8:	1ad2      	subs	r2, r2, r3
 80009ba:	d106      	bne.n	80009ca <strcasecmp+0x42>
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1e6      	bne.n	800098e <strcasecmp+0x6>
 80009c0:	bd10      	pop	{r4, pc}
 80009c2:	3320      	adds	r3, #32
 80009c4:	1ad0      	subs	r0, r2, r3
 80009c6:	d0e2      	beq.n	800098e <strcasecmp+0x6>
 80009c8:	bd10      	pop	{r4, pc}
 80009ca:	4610      	mov	r0, r2
 80009cc:	bd10      	pop	{r4, pc}
 80009ce:	bf00      	nop
 80009d0:	0800d2ad 	.word	0x0800d2ad

080009d4 <strcpy>:
 80009d4:	ea80 0201 	eor.w	r2, r0, r1
 80009d8:	4684      	mov	ip, r0
 80009da:	f012 0f03 	tst.w	r2, #3
 80009de:	d14f      	bne.n	8000a80 <strcpy+0xac>
 80009e0:	f011 0f03 	tst.w	r1, #3
 80009e4:	d132      	bne.n	8000a4c <strcpy+0x78>
 80009e6:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80009ea:	f011 0f04 	tst.w	r1, #4
 80009ee:	f851 3b04 	ldr.w	r3, [r1], #4
 80009f2:	d00b      	beq.n	8000a0c <strcpy+0x38>
 80009f4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80009f8:	439a      	bics	r2, r3
 80009fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80009fe:	bf04      	itt	eq
 8000a00:	f84c 3b04 	streq.w	r3, [ip], #4
 8000a04:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000a08:	d116      	bne.n	8000a38 <strcpy+0x64>
 8000a0a:	bf00      	nop
 8000a0c:	f851 4b04 	ldr.w	r4, [r1], #4
 8000a10:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000a14:	439a      	bics	r2, r3
 8000a16:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000a1a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8000a1e:	d10b      	bne.n	8000a38 <strcpy+0x64>
 8000a20:	f84c 3b04 	str.w	r3, [ip], #4
 8000a24:	43a2      	bics	r2, r4
 8000a26:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000a2a:	bf04      	itt	eq
 8000a2c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000a30:	f84c 4b04 	streq.w	r4, [ip], #4
 8000a34:	d0ea      	beq.n	8000a0c <strcpy+0x38>
 8000a36:	4623      	mov	r3, r4
 8000a38:	f80c 3b01 	strb.w	r3, [ip], #1
 8000a3c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000a40:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000a44:	d1f8      	bne.n	8000a38 <strcpy+0x64>
 8000a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 0f01 	tst.w	r1, #1
 8000a50:	d006      	beq.n	8000a60 <strcpy+0x8c>
 8000a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000a56:	f80c 2b01 	strb.w	r2, [ip], #1
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	bf08      	it	eq
 8000a5e:	4770      	bxeq	lr
 8000a60:	f011 0f02 	tst.w	r1, #2
 8000a64:	d0bf      	beq.n	80009e6 <strcpy+0x12>
 8000a66:	f831 2b02 	ldrh.w	r2, [r1], #2
 8000a6a:	f012 0fff 	tst.w	r2, #255	; 0xff
 8000a6e:	bf16      	itet	ne
 8000a70:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000a74:	f88c 2000 	strbeq.w	r2, [ip]
 8000a78:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8000a7c:	d1b3      	bne.n	80009e6 <strcpy+0x12>
 8000a7e:	4770      	bx	lr
 8000a80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000a84:	f80c 2b01 	strb.w	r2, [ip], #1
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	d1f9      	bne.n	8000a80 <strcpy+0xac>
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
	...

08000ac0 <strlen>:
 8000ac0:	f890 f000 	pld	[r0]
 8000ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000ac8:	f020 0107 	bic.w	r1, r0, #7
 8000acc:	f06f 0c00 	mvn.w	ip, #0
 8000ad0:	f010 0407 	ands.w	r4, r0, #7
 8000ad4:	f891 f020 	pld	[r1, #32]
 8000ad8:	f040 8049 	bne.w	8000b6e <strlen+0xae>
 8000adc:	f04f 0400 	mov.w	r4, #0
 8000ae0:	f06f 0007 	mvn.w	r0, #7
 8000ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000ae8:	f891 f040 	pld	[r1, #64]	; 0x40
 8000aec:	f100 0008 	add.w	r0, r0, #8
 8000af0:	fa82 f24c 	uadd8	r2, r2, ip
 8000af4:	faa4 f28c 	sel	r2, r4, ip
 8000af8:	fa83 f34c 	uadd8	r3, r3, ip
 8000afc:	faa2 f38c 	sel	r3, r2, ip
 8000b00:	bb4b      	cbnz	r3, 8000b56 <strlen+0x96>
 8000b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000b06:	fa82 f24c 	uadd8	r2, r2, ip
 8000b0a:	f100 0008 	add.w	r0, r0, #8
 8000b0e:	faa4 f28c 	sel	r2, r4, ip
 8000b12:	fa83 f34c 	uadd8	r3, r3, ip
 8000b16:	faa2 f38c 	sel	r3, r2, ip
 8000b1a:	b9e3      	cbnz	r3, 8000b56 <strlen+0x96>
 8000b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000b20:	fa82 f24c 	uadd8	r2, r2, ip
 8000b24:	f100 0008 	add.w	r0, r0, #8
 8000b28:	faa4 f28c 	sel	r2, r4, ip
 8000b2c:	fa83 f34c 	uadd8	r3, r3, ip
 8000b30:	faa2 f38c 	sel	r3, r2, ip
 8000b34:	b97b      	cbnz	r3, 8000b56 <strlen+0x96>
 8000b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000b3a:	f101 0120 	add.w	r1, r1, #32
 8000b3e:	fa82 f24c 	uadd8	r2, r2, ip
 8000b42:	f100 0008 	add.w	r0, r0, #8
 8000b46:	faa4 f28c 	sel	r2, r4, ip
 8000b4a:	fa83 f34c 	uadd8	r3, r3, ip
 8000b4e:	faa2 f38c 	sel	r3, r2, ip
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0c6      	beq.n	8000ae4 <strlen+0x24>
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	bf04      	itt	eq
 8000b5a:	3004      	addeq	r0, #4
 8000b5c:	461a      	moveq	r2, r3
 8000b5e:	ba12      	rev	r2, r2
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000b6c:	4770      	bx	lr
 8000b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000b72:	f004 0503 	and.w	r5, r4, #3
 8000b76:	f1c4 0000 	rsb	r0, r4, #0
 8000b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000b7e:	f014 0f04 	tst.w	r4, #4
 8000b82:	f891 f040 	pld	[r1, #64]	; 0x40
 8000b86:	fa0c f505 	lsl.w	r5, ip, r5
 8000b8a:	ea62 0205 	orn	r2, r2, r5
 8000b8e:	bf1c      	itt	ne
 8000b90:	ea63 0305 	ornne	r3, r3, r5
 8000b94:	4662      	movne	r2, ip
 8000b96:	f04f 0400 	mov.w	r4, #0
 8000b9a:	e7a9      	b.n	8000af0 <strlen+0x30>

08000b9c <strtok>:
 8000b9c:	4a02      	ldr	r2, [pc, #8]	; (8000ba8 <strtok+0xc>)
 8000b9e:	6812      	ldr	r2, [r2, #0]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	325c      	adds	r2, #92	; 0x5c
 8000ba4:	f000 b802 	b.w	8000bac <__strtok_r>
 8000ba8:	20000010 	.word	0x20000010

08000bac <__strtok_r>:
 8000bac:	b4f0      	push	{r4, r5, r6, r7}
 8000bae:	4607      	mov	r7, r0
 8000bb0:	b310      	cbz	r0, 8000bf8 <__strtok_r+0x4c>
 8000bb2:	463e      	mov	r6, r7
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000bba:	e001      	b.n	8000bc0 <__strtok_r+0x14>
 8000bbc:	42a0      	cmp	r0, r4
 8000bbe:	d016      	beq.n	8000bee <__strtok_r+0x42>
 8000bc0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8000bc4:	2c00      	cmp	r4, #0
 8000bc6:	d1f9      	bne.n	8000bbc <__strtok_r+0x10>
 8000bc8:	b1d8      	cbz	r0, 8000c02 <__strtok_r+0x56>
 8000bca:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000bce:	460c      	mov	r4, r1
 8000bd0:	e001      	b.n	8000bd6 <__strtok_r+0x2a>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f9      	beq.n	8000bca <__strtok_r+0x1e>
 8000bd6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000bda:	429d      	cmp	r5, r3
 8000bdc:	d1f9      	bne.n	8000bd2 <__strtok_r+0x26>
 8000bde:	b14d      	cbz	r5, 8000bf4 <__strtok_r+0x48>
 8000be0:	2300      	movs	r3, #0
 8000be2:	f806 3c01 	strb.w	r3, [r6, #-1]
 8000be6:	6016      	str	r6, [r2, #0]
 8000be8:	4638      	mov	r0, r7
 8000bea:	bcf0      	pop	{r4, r5, r6, r7}
 8000bec:	4770      	bx	lr
 8000bee:	b15b      	cbz	r3, 8000c08 <__strtok_r+0x5c>
 8000bf0:	4637      	mov	r7, r6
 8000bf2:	e7de      	b.n	8000bb2 <__strtok_r+0x6>
 8000bf4:	462e      	mov	r6, r5
 8000bf6:	e7f6      	b.n	8000be6 <__strtok_r+0x3a>
 8000bf8:	6817      	ldr	r7, [r2, #0]
 8000bfa:	2f00      	cmp	r7, #0
 8000bfc:	d1d9      	bne.n	8000bb2 <__strtok_r+0x6>
 8000bfe:	4638      	mov	r0, r7
 8000c00:	e7f3      	b.n	8000bea <__strtok_r+0x3e>
 8000c02:	bcf0      	pop	{r4, r5, r6, r7}
 8000c04:	6010      	str	r0, [r2, #0]
 8000c06:	4770      	bx	lr
 8000c08:	6016      	str	r6, [r2, #0]
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	703b      	strb	r3, [r7, #0]
 8000c0e:	e7ec      	b.n	8000bea <__strtok_r+0x3e>

08000c10 <strtok_r>:
 8000c10:	2301      	movs	r3, #1
 8000c12:	f7ff bfcb 	b.w	8000bac <__strtok_r>
 8000c16:	bf00      	nop

08000c18 <_strtoul_l.constprop.0>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	4607      	mov	r7, r0
 8000c1e:	484b      	ldr	r0, [pc, #300]	; (8000d4c <_strtoul_l.constprop.0+0x134>)
 8000c20:	460e      	mov	r6, r1
 8000c22:	4635      	mov	r5, r6
 8000c24:	f816 cb01 	ldrb.w	ip, [r6], #1
 8000c28:	f810 400c 	ldrb.w	r4, [r0, ip]
 8000c2c:	f014 0408 	ands.w	r4, r4, #8
 8000c30:	d1f7      	bne.n	8000c22 <_strtoul_l.constprop.0+0xa>
 8000c32:	f1bc 0f2d 	cmp.w	ip, #45	; 0x2d
 8000c36:	46e6      	mov	lr, ip
 8000c38:	d058      	beq.n	8000cec <_strtoul_l.constprop.0+0xd4>
 8000c3a:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
 8000c3e:	bf04      	itt	eq
 8000c40:	f896 e000 	ldrbeq.w	lr, [r6]
 8000c44:	1cae      	addeq	r6, r5, #2
 8000c46:	b15b      	cbz	r3, 8000c60 <_strtoul_l.constprop.0+0x48>
 8000c48:	2b10      	cmp	r3, #16
 8000c4a:	d054      	beq.n	8000cf6 <_strtoul_l.constprop.0+0xde>
 8000c4c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8000c50:	fbb8 f8f3 	udiv	r8, r8, r3
 8000c54:	fb03 fa08 	mul.w	sl, r3, r8
 8000c58:	ea6f 0a0a 	mvn.w	sl, sl
 8000c5c:	4699      	mov	r9, r3
 8000c5e:	e008      	b.n	8000c72 <_strtoul_l.constprop.0+0x5a>
 8000c60:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 8000c64:	d05a      	beq.n	8000d1c <_strtoul_l.constprop.0+0x104>
 8000c66:	230a      	movs	r3, #10
 8000c68:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8000d50 <_strtoul_l.constprop.0+0x138>
 8000c6c:	f04f 0a05 	mov.w	sl, #5
 8000c70:	4699      	mov	r9, r3
 8000c72:	2500      	movs	r5, #0
 8000c74:	4628      	mov	r0, r5
 8000c76:	e007      	b.n	8000c88 <_strtoul_l.constprop.0+0x70>
 8000c78:	4540      	cmp	r0, r8
 8000c7a:	d815      	bhi.n	8000ca8 <_strtoul_l.constprop.0+0x90>
 8000c7c:	d029      	beq.n	8000cd2 <_strtoul_l.constprop.0+0xba>
 8000c7e:	fb09 c000 	mla	r0, r9, r0, ip
 8000c82:	2501      	movs	r5, #1
 8000c84:	f816 eb01 	ldrb.w	lr, [r6], #1
 8000c88:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
 8000c8c:	f1bc 0f09 	cmp.w	ip, #9
 8000c90:	d906      	bls.n	8000ca0 <_strtoul_l.constprop.0+0x88>
 8000c92:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
 8000c96:	f1bc 0f19 	cmp.w	ip, #25
 8000c9a:	d808      	bhi.n	8000cae <_strtoul_l.constprop.0+0x96>
 8000c9c:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
 8000ca0:	4563      	cmp	r3, ip
 8000ca2:	dd0d      	ble.n	8000cc0 <_strtoul_l.constprop.0+0xa8>
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	dae7      	bge.n	8000c78 <_strtoul_l.constprop.0+0x60>
 8000ca8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000cac:	e7ea      	b.n	8000c84 <_strtoul_l.constprop.0+0x6c>
 8000cae:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
 8000cb2:	f1bc 0f19 	cmp.w	ip, #25
 8000cb6:	d803      	bhi.n	8000cc0 <_strtoul_l.constprop.0+0xa8>
 8000cb8:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
 8000cbc:	4563      	cmp	r3, ip
 8000cbe:	dcf1      	bgt.n	8000ca4 <_strtoul_l.constprop.0+0x8c>
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	db0b      	blt.n	8000cdc <_strtoul_l.constprop.0+0xc4>
 8000cc4:	b104      	cbz	r4, 8000cc8 <_strtoul_l.constprop.0+0xb0>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	b10a      	cbz	r2, 8000cce <_strtoul_l.constprop.0+0xb6>
 8000cca:	b96d      	cbnz	r5, 8000ce8 <_strtoul_l.constprop.0+0xd0>
 8000ccc:	6011      	str	r1, [r2, #0]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	45d4      	cmp	ip, sl
 8000cd4:	ddd3      	ble.n	8000c7e <_strtoul_l.constprop.0+0x66>
 8000cd6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000cda:	e7d3      	b.n	8000c84 <_strtoul_l.constprop.0+0x6c>
 8000cdc:	2322      	movs	r3, #34	; 0x22
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	d0f2      	beq.n	8000cce <_strtoul_l.constprop.0+0xb6>
 8000ce8:	1e71      	subs	r1, r6, #1
 8000cea:	e7ef      	b.n	8000ccc <_strtoul_l.constprop.0+0xb4>
 8000cec:	f896 e000 	ldrb.w	lr, [r6]
 8000cf0:	2401      	movs	r4, #1
 8000cf2:	1cae      	adds	r6, r5, #2
 8000cf4:	e7a7      	b.n	8000c46 <_strtoul_l.constprop.0+0x2e>
 8000cf6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 8000cfa:	d121      	bne.n	8000d40 <_strtoul_l.constprop.0+0x128>
 8000cfc:	7830      	ldrb	r0, [r6, #0]
 8000cfe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8000d02:	2858      	cmp	r0, #88	; 0x58
 8000d04:	d116      	bne.n	8000d34 <_strtoul_l.constprop.0+0x11c>
 8000d06:	f04f 0910 	mov.w	r9, #16
 8000d0a:	f896 e001 	ldrb.w	lr, [r6, #1]
 8000d0e:	f04f 0a0f 	mov.w	sl, #15
 8000d12:	3602      	adds	r6, #2
 8000d14:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000d18:	464b      	mov	r3, r9
 8000d1a:	e7aa      	b.n	8000c72 <_strtoul_l.constprop.0+0x5a>
 8000d1c:	7833      	ldrb	r3, [r6, #0]
 8000d1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000d22:	2b58      	cmp	r3, #88	; 0x58
 8000d24:	d0ef      	beq.n	8000d06 <_strtoul_l.constprop.0+0xee>
 8000d26:	2308      	movs	r3, #8
 8000d28:	f04f 0a07 	mov.w	sl, #7
 8000d2c:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8000d30:	4699      	mov	r9, r3
 8000d32:	e79e      	b.n	8000c72 <_strtoul_l.constprop.0+0x5a>
 8000d34:	4699      	mov	r9, r3
 8000d36:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000d3a:	f04f 0a0f 	mov.w	sl, #15
 8000d3e:	e798      	b.n	8000c72 <_strtoul_l.constprop.0+0x5a>
 8000d40:	f04f 0a0f 	mov.w	sl, #15
 8000d44:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000d48:	4699      	mov	r9, r3
 8000d4a:	e792      	b.n	8000c72 <_strtoul_l.constprop.0+0x5a>
 8000d4c:	0800d2ad 	.word	0x0800d2ad
 8000d50:	19999999 	.word	0x19999999

08000d54 <_strtoul_r>:
 8000d54:	e760      	b.n	8000c18 <_strtoul_l.constprop.0>
 8000d56:	bf00      	nop

08000d58 <strtoul_l>:
 8000d58:	b410      	push	{r4}
 8000d5a:	4c04      	ldr	r4, [pc, #16]	; (8000d6c <strtoul_l+0x14>)
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4613      	mov	r3, r2
 8000d60:	6820      	ldr	r0, [r4, #0]
 8000d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d66:	460a      	mov	r2, r1
 8000d68:	4661      	mov	r1, ip
 8000d6a:	e755      	b.n	8000c18 <_strtoul_l.constprop.0>
 8000d6c:	20000010 	.word	0x20000010

08000d70 <strtoul>:
 8000d70:	b410      	push	{r4}
 8000d72:	4c04      	ldr	r4, [pc, #16]	; (8000d84 <strtoul+0x14>)
 8000d74:	4684      	mov	ip, r0
 8000d76:	4613      	mov	r3, r2
 8000d78:	6820      	ldr	r0, [r4, #0]
 8000d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d7e:	460a      	mov	r2, r1
 8000d80:	4661      	mov	r1, ip
 8000d82:	e749      	b.n	8000c18 <_strtoul_l.constprop.0>
 8000d84:	20000010 	.word	0x20000010

08000d88 <_vfprintf_r>:
 8000d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d8c:	ed2d 8b06 	vpush	{d8-d10}
 8000d90:	b0bb      	sub	sp, #236	; 0xec
 8000d92:	461c      	mov	r4, r3
 8000d94:	4688      	mov	r8, r1
 8000d96:	4691      	mov	r9, r2
 8000d98:	ee09 0a10 	vmov	s18, r0
 8000d9c:	4605      	mov	r5, r0
 8000d9e:	f003 f887 	bl	8003eb0 <_localeconv_r>
 8000da2:	6803      	ldr	r3, [r0, #0]
 8000da4:	9310      	str	r3, [sp, #64]	; 0x40
 8000da6:	4618      	mov	r0, r3
 8000da8:	9409      	str	r4, [sp, #36]	; 0x24
 8000daa:	f7ff fe89 	bl	8000ac0 <strlen>
 8000dae:	900e      	str	r0, [sp, #56]	; 0x38
 8000db0:	b11d      	cbz	r5, 8000dba <_vfprintf_r+0x32>
 8000db2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 8242 	beq.w	800123e <_vfprintf_r+0x4b6>
 8000dba:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 8000dbe:	0495      	lsls	r5, r2, #18
 8000dc0:	b293      	uxth	r3, r2
 8000dc2:	d40a      	bmi.n	8000dda <_vfprintf_r+0x52>
 8000dc4:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8000dc8:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8000dcc:	f8a8 300c 	strh.w	r3, [r8, #12]
 8000dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
 8000dda:	0718      	lsls	r0, r3, #28
 8000ddc:	f140 80ab 	bpl.w	8000f36 <_vfprintf_r+0x1ae>
 8000de0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f000 80a6 	beq.w	8000f36 <_vfprintf_r+0x1ae>
 8000dea:	f003 031a 	and.w	r3, r3, #26
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	f000 80b0 	beq.w	8000f54 <_vfprintf_r+0x1cc>
 8000df4:	ed9f 7b94 	vldr	d7, [pc, #592]	; 8001048 <_vfprintf_r+0x2c0>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
 8000dfe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8000e02:	aa2a      	add	r2, sp, #168	; 0xa8
 8000e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e06:	921d      	str	r2, [sp, #116]	; 0x74
 8000e08:	4692      	mov	sl, r2
 8000e0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e0c:	9311      	str	r3, [sp, #68]	; 0x44
 8000e0e:	9307      	str	r3, [sp, #28]
 8000e10:	f899 3000 	ldrb.w	r3, [r9]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 81a4 	beq.w	8001162 <_vfprintf_r+0x3da>
 8000e1a:	464c      	mov	r4, r9
 8000e1c:	e004      	b.n	8000e28 <_vfprintf_r+0xa0>
 8000e1e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 80e5 	beq.w	8000ff2 <_vfprintf_r+0x26a>
 8000e28:	2b25      	cmp	r3, #37	; 0x25
 8000e2a:	d1f8      	bne.n	8000e1e <_vfprintf_r+0x96>
 8000e2c:	ebb4 0509 	subs.w	r5, r4, r9
 8000e30:	f040 80e3 	bne.w	8000ffa <_vfprintf_r+0x272>
 8000e34:	7823      	ldrb	r3, [r4, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8193 	beq.w	8001162 <_vfprintf_r+0x3da>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e46:	7865      	ldrb	r5, [r4, #1]
 8000e48:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8000e4c:	f104 0901 	add.w	r9, r4, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	469b      	mov	fp, r3
 8000e54:	f109 0901 	add.w	r9, r9, #1
 8000e58:	f1a5 0220 	sub.w	r2, r5, #32
 8000e5c:	2a58      	cmp	r2, #88	; 0x58
 8000e5e:	f200 80f7 	bhi.w	8001050 <_vfprintf_r+0x2c8>
 8000e62:	e8df f012 	tbh	[pc, r2, lsl #1]
 8000e66:	027f      	.short	0x027f
 8000e68:	00f500f5 	.word	0x00f500f5
 8000e6c:	00f5027a 	.word	0x00f5027a
 8000e70:	00f500f5 	.word	0x00f500f5
 8000e74:	00f500f5 	.word	0x00f500f5
 8000e78:	022d00f5 	.word	0x022d00f5
 8000e7c:	00f50275 	.word	0x00f50275
 8000e80:	023d0238 	.word	0x023d0238
 8000e84:	027000f5 	.word	0x027000f5
 8000e88:	00590059 	.word	0x00590059
 8000e8c:	00590059 	.word	0x00590059
 8000e90:	00590059 	.word	0x00590059
 8000e94:	00590059 	.word	0x00590059
 8000e98:	00f50059 	.word	0x00f50059
 8000e9c:	00f500f5 	.word	0x00f500f5
 8000ea0:	00f500f5 	.word	0x00f500f5
 8000ea4:	00f500f5 	.word	0x00f500f5
 8000ea8:	00f500f5 	.word	0x00f500f5
 8000eac:	025700f5 	.word	0x025700f5
 8000eb0:	00f50189 	.word	0x00f50189
 8000eb4:	00f50189 	.word	0x00f50189
 8000eb8:	00f500f5 	.word	0x00f500f5
 8000ebc:	02b600f5 	.word	0x02b600f5
 8000ec0:	00f500f5 	.word	0x00f500f5
 8000ec4:	00f50098 	.word	0x00f50098
 8000ec8:	00f500f5 	.word	0x00f500f5
 8000ecc:	00f500f5 	.word	0x00f500f5
 8000ed0:	00f50088 	.word	0x00f50088
 8000ed4:	029500f5 	.word	0x029500f5
 8000ed8:	00f500f5 	.word	0x00f500f5
 8000edc:	00f500f5 	.word	0x00f500f5
 8000ee0:	00f500f5 	.word	0x00f500f5
 8000ee4:	00f500f5 	.word	0x00f500f5
 8000ee8:	00f500f5 	.word	0x00f500f5
 8000eec:	01f00287 	.word	0x01f00287
 8000ef0:	01890189 	.word	0x01890189
 8000ef4:	02bb0189 	.word	0x02bb0189
 8000ef8:	00f501f0 	.word	0x00f501f0
 8000efc:	02ec00f5 	.word	0x02ec00f5
 8000f00:	02d600f5 	.word	0x02d600f5
 8000f04:	02c5009a 	.word	0x02c5009a
 8000f08:	00f502c0 	.word	0x00f502c0
 8000f0c:	00f5031b 	.word	0x00f5031b
 8000f10:	00f5008a 	.word	0x00f5008a
 8000f14:	02f900f5 	.word	0x02f900f5
 8000f18:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f819 5b01 	ldrb.w	r5, [r9], #1
 8000f22:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000f26:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8000f2a:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8000f2e:	2a09      	cmp	r2, #9
 8000f30:	d9f5      	bls.n	8000f1e <_vfprintf_r+0x196>
 8000f32:	9106      	str	r1, [sp, #24]
 8000f34:	e790      	b.n	8000e58 <_vfprintf_r+0xd0>
 8000f36:	ee19 0a10 	vmov	r0, s18
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	f001 f9f2 	bl	8002324 <__swsetup_r>
 8000f40:	2800      	cmp	r0, #0
 8000f42:	f041 8126 	bne.w	8002192 <_vfprintf_r+0x140a>
 8000f46:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8000f4a:	f003 031a 	and.w	r3, r3, #26
 8000f4e:	2b0a      	cmp	r3, #10
 8000f50:	f47f af50 	bne.w	8000df4 <_vfprintf_r+0x6c>
 8000f54:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f6ff af4b 	blt.w	8000df4 <_vfprintf_r+0x6c>
 8000f5e:	ee19 0a10 	vmov	r0, s18
 8000f62:	4623      	mov	r3, r4
 8000f64:	464a      	mov	r2, r9
 8000f66:	4641      	mov	r1, r8
 8000f68:	b03b      	add	sp, #236	; 0xec
 8000f6a:	ecbd 8b06 	vpop	{d8-d10}
 8000f6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f72:	f001 b9a1 	b.w	80022b8 <__sbprintf>
 8000f76:	f04b 0b10 	orr.w	fp, fp, #16
 8000f7a:	f01b 0120 	ands.w	r1, fp, #32
 8000f7e:	f000 8150 	beq.w	8001222 <_vfprintf_r+0x49a>
 8000f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f84:	3307      	adds	r3, #7
 8000f86:	f023 0307 	bic.w	r3, r3, #7
 8000f8a:	6859      	ldr	r1, [r3, #4]
 8000f8c:	f853 0b08 	ldr.w	r0, [r3], #8
 8000f90:	9309      	str	r3, [sp, #36]	; 0x24
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <_vfprintf_r+0x22c>
 8000f96:	f04b 0b10 	orr.w	fp, fp, #16
 8000f9a:	f01b 0120 	ands.w	r1, fp, #32
 8000f9e:	f000 8133 	beq.w	8001208 <_vfprintf_r+0x480>
 8000fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fa4:	3307      	adds	r3, #7
 8000fa6:	f023 0307 	bic.w	r3, r3, #7
 8000faa:	6859      	ldr	r1, [r3, #4]
 8000fac:	f853 0b08 	ldr.w	r0, [r3], #8
 8000fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	2400      	movs	r4, #0
 8000fb6:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8000fba:	9a05      	ldr	r2, [sp, #20]
 8000fbc:	1c56      	adds	r6, r2, #1
 8000fbe:	f000 8291 	beq.w	80014e4 <_vfprintf_r+0x75c>
 8000fc2:	f02b 0680 	bic.w	r6, fp, #128	; 0x80
 8000fc6:	9603      	str	r6, [sp, #12]
 8000fc8:	ea50 0601 	orrs.w	r6, r0, r1
 8000fcc:	f040 8288 	bne.w	80014e0 <_vfprintf_r+0x758>
 8000fd0:	2a00      	cmp	r2, #0
 8000fd2:	f040 830d 	bne.w	80015f0 <_vfprintf_r+0x868>
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f040 851e 	bne.w	8001a18 <_vfprintf_r+0xc90>
 8000fdc:	f01b 0301 	ands.w	r3, fp, #1
 8000fe0:	9308      	str	r3, [sp, #32]
 8000fe2:	f000 8594 	beq.w	8001b0e <_vfprintf_r+0xd86>
 8000fe6:	2330      	movs	r3, #48	; 0x30
 8000fe8:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 8000fec:	f10d 06a7 	add.w	r6, sp, #167	; 0xa7
 8000ff0:	e29d      	b.n	800152e <_vfprintf_r+0x7a6>
 8000ff2:	ebb4 0509 	subs.w	r5, r4, r9
 8000ff6:	f000 80b4 	beq.w	8001162 <_vfprintf_r+0x3da>
 8000ffa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000ffc:	442b      	add	r3, r5
 8000ffe:	931f      	str	r3, [sp, #124]	; 0x7c
 8001000:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001002:	3301      	adds	r3, #1
 8001004:	2b07      	cmp	r3, #7
 8001006:	e9ca 9500 	strd	r9, r5, [sl]
 800100a:	931e      	str	r3, [sp, #120]	; 0x78
 800100c:	dc05      	bgt.n	800101a <_vfprintf_r+0x292>
 800100e:	f10a 0a08 	add.w	sl, sl, #8
 8001012:	9b07      	ldr	r3, [sp, #28]
 8001014:	442b      	add	r3, r5
 8001016:	9307      	str	r3, [sp, #28]
 8001018:	e70c      	b.n	8000e34 <_vfprintf_r+0xac>
 800101a:	ee19 0a10 	vmov	r0, s18
 800101e:	aa1d      	add	r2, sp, #116	; 0x74
 8001020:	4641      	mov	r1, r8
 8001022:	f004 fc33 	bl	800588c <__sprint_r>
 8001026:	b918      	cbnz	r0, 8001030 <_vfprintf_r+0x2a8>
 8001028:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800102c:	e7f1      	b.n	8001012 <_vfprintf_r+0x28a>
 800102e:	46b0      	mov	r8, r6
 8001030:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8001034:	065b      	lsls	r3, r3, #25
 8001036:	f101 80ac 	bmi.w	8002192 <_vfprintf_r+0x140a>
 800103a:	9807      	ldr	r0, [sp, #28]
 800103c:	b03b      	add	sp, #236	; 0xec
 800103e:	ecbd 8b06 	vpop	{d8-d10}
 8001042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001046:	bf00      	nop
	...
 8001050:	2b00      	cmp	r3, #0
 8001052:	f040 87e5 	bne.w	8002020 <_vfprintf_r+0x1298>
 8001056:	2d00      	cmp	r5, #0
 8001058:	f000 8083 	beq.w	8001162 <_vfprintf_r+0x3da>
 800105c:	2300      	movs	r3, #0
 800105e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8001062:	2301      	movs	r3, #1
 8001064:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
 8001068:	9304      	str	r3, [sp, #16]
 800106a:	9308      	str	r3, [sp, #32]
 800106c:	ae20      	add	r6, sp, #128	; 0x80
 800106e:	2300      	movs	r3, #0
 8001070:	f8cd b00c 	str.w	fp, [sp, #12]
 8001074:	9305      	str	r3, [sp, #20]
 8001076:	930a      	str	r3, [sp, #40]	; 0x28
 8001078:	9b03      	ldr	r3, [sp, #12]
 800107a:	f013 0302 	ands.w	r3, r3, #2
 800107e:	d002      	beq.n	8001086 <_vfprintf_r+0x2fe>
 8001080:	9a04      	ldr	r2, [sp, #16]
 8001082:	3202      	adds	r2, #2
 8001084:	9204      	str	r2, [sp, #16]
 8001086:	9a03      	ldr	r2, [sp, #12]
 8001088:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
 800108c:	d105      	bne.n	800109a <_vfprintf_r+0x312>
 800108e:	9a06      	ldr	r2, [sp, #24]
 8001090:	9904      	ldr	r1, [sp, #16]
 8001092:	1a57      	subs	r7, r2, r1
 8001094:	2f00      	cmp	r7, #0
 8001096:	f300 83a2 	bgt.w	80017de <_vfprintf_r+0xa56>
 800109a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800109c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 80010a0:	b18a      	cbz	r2, 80010c6 <_vfprintf_r+0x33e>
 80010a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80010a4:	f10d 0157 	add.w	r1, sp, #87	; 0x57
 80010a8:	3201      	adds	r2, #1
 80010aa:	3401      	adds	r4, #1
 80010ac:	f8ca 1000 	str.w	r1, [sl]
 80010b0:	2a07      	cmp	r2, #7
 80010b2:	f04f 0101 	mov.w	r1, #1
 80010b6:	941f      	str	r4, [sp, #124]	; 0x7c
 80010b8:	921e      	str	r2, [sp, #120]	; 0x78
 80010ba:	f8ca 1004 	str.w	r1, [sl, #4]
 80010be:	f300 83dd 	bgt.w	800187c <_vfprintf_r+0xaf4>
 80010c2:	f10a 0a08 	add.w	sl, sl, #8
 80010c6:	b183      	cbz	r3, 80010ea <_vfprintf_r+0x362>
 80010c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80010ca:	aa16      	add	r2, sp, #88	; 0x58
 80010cc:	3301      	adds	r3, #1
 80010ce:	3402      	adds	r4, #2
 80010d0:	f8ca 2000 	str.w	r2, [sl]
 80010d4:	2b07      	cmp	r3, #7
 80010d6:	f04f 0202 	mov.w	r2, #2
 80010da:	941f      	str	r4, [sp, #124]	; 0x7c
 80010dc:	931e      	str	r3, [sp, #120]	; 0x78
 80010de:	f8ca 2004 	str.w	r2, [sl, #4]
 80010e2:	f300 83da 	bgt.w	800189a <_vfprintf_r+0xb12>
 80010e6:	f10a 0a08 	add.w	sl, sl, #8
 80010ea:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 80010ee:	f000 829b 	beq.w	8001628 <_vfprintf_r+0x8a0>
 80010f2:	9b05      	ldr	r3, [sp, #20]
 80010f4:	9a08      	ldr	r2, [sp, #32]
 80010f6:	eba3 0b02 	sub.w	fp, r3, r2
 80010fa:	f1bb 0f00 	cmp.w	fp, #0
 80010fe:	f300 82d6 	bgt.w	80016ae <_vfprintf_r+0x926>
 8001102:	9b03      	ldr	r3, [sp, #12]
 8001104:	05df      	lsls	r7, r3, #23
 8001106:	f100 821b 	bmi.w	8001540 <_vfprintf_r+0x7b8>
 800110a:	9b08      	ldr	r3, [sp, #32]
 800110c:	f8ca 3004 	str.w	r3, [sl, #4]
 8001110:	441c      	add	r4, r3
 8001112:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001114:	f8ca 6000 	str.w	r6, [sl]
 8001118:	3301      	adds	r3, #1
 800111a:	2b07      	cmp	r3, #7
 800111c:	941f      	str	r4, [sp, #124]	; 0x7c
 800111e:	931e      	str	r3, [sp, #120]	; 0x78
 8001120:	f300 8350 	bgt.w	80017c4 <_vfprintf_r+0xa3c>
 8001124:	f10a 0a08 	add.w	sl, sl, #8
 8001128:	9b03      	ldr	r3, [sp, #12]
 800112a:	075a      	lsls	r2, r3, #29
 800112c:	d505      	bpl.n	800113a <_vfprintf_r+0x3b2>
 800112e:	9b06      	ldr	r3, [sp, #24]
 8001130:	9a04      	ldr	r2, [sp, #16]
 8001132:	1a9d      	subs	r5, r3, r2
 8001134:	2d00      	cmp	r5, #0
 8001136:	f300 83bd 	bgt.w	80018b4 <_vfprintf_r+0xb2c>
 800113a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800113e:	9904      	ldr	r1, [sp, #16]
 8001140:	428a      	cmp	r2, r1
 8001142:	bfac      	ite	ge
 8001144:	189b      	addge	r3, r3, r2
 8001146:	185b      	addlt	r3, r3, r1
 8001148:	9307      	str	r3, [sp, #28]
 800114a:	2c00      	cmp	r4, #0
 800114c:	f040 82ea 	bne.w	8001724 <_vfprintf_r+0x99c>
 8001150:	2300      	movs	r3, #0
 8001152:	931e      	str	r3, [sp, #120]	; 0x78
 8001154:	f899 3000 	ldrb.w	r3, [r9]
 8001158:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800115c:	2b00      	cmp	r3, #0
 800115e:	f47f ae5c 	bne.w	8000e1a <_vfprintf_r+0x92>
 8001162:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001164:	2b00      	cmp	r3, #0
 8001166:	f43f af63 	beq.w	8001030 <_vfprintf_r+0x2a8>
 800116a:	ee19 0a10 	vmov	r0, s18
 800116e:	aa1d      	add	r2, sp, #116	; 0x74
 8001170:	4641      	mov	r1, r8
 8001172:	f004 fb8b 	bl	800588c <__sprint_r>
 8001176:	e75b      	b.n	8001030 <_vfprintf_r+0x2a8>
 8001178:	2b00      	cmp	r3, #0
 800117a:	f040 87f6 	bne.w	800216a <_vfprintf_r+0x13e2>
 800117e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001180:	3307      	adds	r3, #7
 8001182:	f023 0307 	bic.w	r3, r3, #7
 8001186:	ecb3 7b02 	vldmia	r3!, {d7}
 800118a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800118e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8001192:	9309      	str	r3, [sp, #36]	; 0x24
 8001194:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8001198:	ee08 3a90 	vmov	s17, r3
 800119c:	ee08 6a10 	vmov	s16, r6
 80011a0:	4bb9      	ldr	r3, [pc, #740]	; (8001488 <_vfprintf_r+0x700>)
 80011a2:	ec51 0b18 	vmov	r0, r1, d8
 80011a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011aa:	f006 fb9d 	bl	80078e8 <__aeabi_dcmpun>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	f040 84b4 	bne.w	8001b1c <_vfprintf_r+0xd94>
 80011b4:	4bb4      	ldr	r3, [pc, #720]	; (8001488 <_vfprintf_r+0x700>)
 80011b6:	ec51 0b18 	vmov	r0, r1, d8
 80011ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011be:	f006 fb75 	bl	80078ac <__aeabi_dcmple>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	f040 84aa 	bne.w	8001b1c <_vfprintf_r+0xd94>
 80011c8:	2200      	movs	r2, #0
 80011ca:	2300      	movs	r3, #0
 80011cc:	4630      	mov	r0, r6
 80011ce:	4639      	mov	r1, r7
 80011d0:	f006 fb62 	bl	8007898 <__aeabi_dcmplt>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	f040 8702 	bne.w	8001fde <_vfprintf_r+0x1256>
 80011da:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 80011de:	4eab      	ldr	r6, [pc, #684]	; (800148c <_vfprintf_r+0x704>)
 80011e0:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 80011e4:	9303      	str	r3, [sp, #12]
 80011e6:	4baa      	ldr	r3, [pc, #680]	; (8001490 <_vfprintf_r+0x708>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	2d47      	cmp	r5, #71	; 0x47
 80011ec:	bfc8      	it	gt
 80011ee:	461e      	movgt	r6, r3
 80011f0:	2303      	movs	r3, #3
 80011f2:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80011f6:	9308      	str	r3, [sp, #32]
 80011f8:	920a      	str	r2, [sp, #40]	; 0x28
 80011fa:	2c00      	cmp	r4, #0
 80011fc:	f43f af3c 	beq.w	8001078 <_vfprintf_r+0x2f0>
 8001200:	9b04      	ldr	r3, [sp, #16]
 8001202:	3301      	adds	r3, #1
 8001204:	9304      	str	r3, [sp, #16]
 8001206:	e737      	b.n	8001078 <_vfprintf_r+0x2f0>
 8001208:	f01b 0310 	ands.w	r3, fp, #16
 800120c:	d152      	bne.n	80012b4 <_vfprintf_r+0x52c>
 800120e:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8001212:	d04f      	beq.n	80012b4 <_vfprintf_r+0x52c>
 8001214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001216:	f852 0b04 	ldr.w	r0, [r2], #4
 800121a:	9209      	str	r2, [sp, #36]	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	b280      	uxth	r0, r0
 8001220:	e6c8      	b.n	8000fb4 <_vfprintf_r+0x22c>
 8001222:	f01b 0310 	ands.w	r3, fp, #16
 8001226:	d13f      	bne.n	80012a8 <_vfprintf_r+0x520>
 8001228:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800122c:	d03c      	beq.n	80012a8 <_vfprintf_r+0x520>
 800122e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001230:	f852 0b04 	ldr.w	r0, [r2], #4
 8001234:	9209      	str	r2, [sp, #36]	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	b280      	uxth	r0, r0
 800123a:	2301      	movs	r3, #1
 800123c:	e6ba      	b.n	8000fb4 <_vfprintf_r+0x22c>
 800123e:	4628      	mov	r0, r5
 8001240:	f002 fb02 	bl	8003848 <__sinit>
 8001244:	e5b9      	b.n	8000dba <_vfprintf_r+0x32>
 8001246:	2b00      	cmp	r3, #0
 8001248:	f040 879f 	bne.w	800218a <_vfprintf_r+0x1402>
 800124c:	f01b 0f20 	tst.w	fp, #32
 8001250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001252:	d068      	beq.n	8001326 <_vfprintf_r+0x59e>
 8001254:	3307      	adds	r3, #7
 8001256:	f023 0307 	bic.w	r3, r3, #7
 800125a:	461a      	mov	r2, r3
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f852 0b08 	ldr.w	r0, [r2], #8
 8001262:	9209      	str	r2, [sp, #36]	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	f2c0 843d 	blt.w	8001ae6 <_vfprintf_r+0xd5e>
 800126c:	9b05      	ldr	r3, [sp, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	f000 8505 	beq.w	8001c7e <_vfprintf_r+0xef6>
 8001274:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8001278:	9303      	str	r3, [sp, #12]
 800127a:	ea50 0301 	orrs.w	r3, r0, r1
 800127e:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001282:	f000 83c5 	beq.w	8001a10 <_vfprintf_r+0xc88>
 8001286:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800128a:	280a      	cmp	r0, #10
 800128c:	f171 0300 	sbcs.w	r3, r1, #0
 8001290:	f080 84fc 	bcs.w	8001c8c <_vfprintf_r+0xf04>
 8001294:	3030      	adds	r0, #48	; 0x30
 8001296:	2301      	movs	r3, #1
 8001298:	f88d 00a7 	strb.w	r0, [sp, #167]	; 0xa7
 800129c:	f8cd b00c 	str.w	fp, [sp, #12]
 80012a0:	9308      	str	r3, [sp, #32]
 80012a2:	f10d 06a7 	add.w	r6, sp, #167	; 0xa7
 80012a6:	e142      	b.n	800152e <_vfprintf_r+0x7a6>
 80012a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80012ae:	9309      	str	r3, [sp, #36]	; 0x24
 80012b0:	2301      	movs	r3, #1
 80012b2:	e67f      	b.n	8000fb4 <_vfprintf_r+0x22c>
 80012b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80012ba:	9309      	str	r3, [sp, #36]	; 0x24
 80012bc:	460b      	mov	r3, r1
 80012be:	e679      	b.n	8000fb4 <_vfprintf_r+0x22c>
 80012c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80012c6:	9106      	str	r1, [sp, #24]
 80012c8:	2900      	cmp	r1, #0
 80012ca:	f280 841b 	bge.w	8001b04 <_vfprintf_r+0xd7c>
 80012ce:	9906      	ldr	r1, [sp, #24]
 80012d0:	9209      	str	r2, [sp, #36]	; 0x24
 80012d2:	4249      	negs	r1, r1
 80012d4:	9106      	str	r1, [sp, #24]
 80012d6:	f899 5000 	ldrb.w	r5, [r9]
 80012da:	f04b 0b04 	orr.w	fp, fp, #4
 80012de:	e5b9      	b.n	8000e54 <_vfprintf_r+0xcc>
 80012e0:	4649      	mov	r1, r9
 80012e2:	f811 5b01 	ldrb.w	r5, [r1], #1
 80012e6:	2d2a      	cmp	r5, #42	; 0x2a
 80012e8:	f000 87c5 	beq.w	8002276 <_vfprintf_r+0x14ee>
 80012ec:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 80012f0:	2a09      	cmp	r2, #9
 80012f2:	4689      	mov	r9, r1
 80012f4:	bf98      	it	ls
 80012f6:	2100      	movls	r1, #0
 80012f8:	f200 8733 	bhi.w	8002162 <_vfprintf_r+0x13da>
 80012fc:	f819 5b01 	ldrb.w	r5, [r9], #1
 8001300:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001304:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8001308:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 800130c:	2a09      	cmp	r2, #9
 800130e:	d9f5      	bls.n	80012fc <_vfprintf_r+0x574>
 8001310:	9105      	str	r1, [sp, #20]
 8001312:	e5a1      	b.n	8000e58 <_vfprintf_r+0xd0>
 8001314:	2b00      	cmp	r3, #0
 8001316:	f040 8730 	bne.w	800217a <_vfprintf_r+0x13f2>
 800131a:	f04b 0b10 	orr.w	fp, fp, #16
 800131e:	f01b 0f20 	tst.w	fp, #32
 8001322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001324:	d196      	bne.n	8001254 <_vfprintf_r+0x4cc>
 8001326:	f853 0b04 	ldr.w	r0, [r3], #4
 800132a:	9309      	str	r3, [sp, #36]	; 0x24
 800132c:	f01b 0f10 	tst.w	fp, #16
 8001330:	f040 83d4 	bne.w	8001adc <_vfprintf_r+0xd54>
 8001334:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8001338:	f000 83d0 	beq.w	8001adc <_vfprintf_r+0xd54>
 800133c:	f340 31c0 	sbfx	r1, r0, #15, #1
 8001340:	460b      	mov	r3, r1
 8001342:	b200      	sxth	r0, r0
 8001344:	e78f      	b.n	8001266 <_vfprintf_r+0x4de>
 8001346:	f899 5000 	ldrb.w	r5, [r9]
 800134a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800134e:	e581      	b.n	8000e54 <_vfprintf_r+0xcc>
 8001350:	f899 5000 	ldrb.w	r5, [r9]
 8001354:	2301      	movs	r3, #1
 8001356:	202b      	movs	r0, #43	; 0x2b
 8001358:	e57c      	b.n	8000e54 <_vfprintf_r+0xcc>
 800135a:	f899 5000 	ldrb.w	r5, [r9]
 800135e:	f04b 0b01 	orr.w	fp, fp, #1
 8001362:	e577      	b.n	8000e54 <_vfprintf_r+0xcc>
 8001364:	f899 5000 	ldrb.w	r5, [r9]
 8001368:	2800      	cmp	r0, #0
 800136a:	f47f ad73 	bne.w	8000e54 <_vfprintf_r+0xcc>
 800136e:	2301      	movs	r3, #1
 8001370:	2020      	movs	r0, #32
 8001372:	e56f      	b.n	8000e54 <_vfprintf_r+0xcc>
 8001374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001376:	2200      	movs	r2, #0
 8001378:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
 800137c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001380:	9309      	str	r3, [sp, #36]	; 0x24
 8001382:	2301      	movs	r3, #1
 8001384:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
 8001388:	9304      	str	r3, [sp, #16]
 800138a:	9308      	str	r3, [sp, #32]
 800138c:	ae20      	add	r6, sp, #128	; 0x80
 800138e:	e66e      	b.n	800106e <_vfprintf_r+0x2e6>
 8001390:	2b00      	cmp	r3, #0
 8001392:	f040 86e2 	bne.w	800215a <_vfprintf_r+0x13d2>
 8001396:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <_vfprintf_r+0x70c>)
 8001398:	930f      	str	r3, [sp, #60]	; 0x3c
 800139a:	f01b 0120 	ands.w	r1, fp, #32
 800139e:	d063      	beq.n	8001468 <_vfprintf_r+0x6e0>
 80013a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013a2:	3307      	adds	r3, #7
 80013a4:	f023 0307 	bic.w	r3, r3, #7
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	f853 0b08 	ldr.w	r0, [r3], #8
 80013ae:	9309      	str	r3, [sp, #36]	; 0x24
 80013b0:	f01b 0f01 	tst.w	fp, #1
 80013b4:	d00b      	beq.n	80013ce <_vfprintf_r+0x646>
 80013b6:	ea50 0301 	orrs.w	r3, r0, r1
 80013ba:	d008      	beq.n	80013ce <_vfprintf_r+0x646>
 80013bc:	2330      	movs	r3, #48	; 0x30
 80013be:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 80013c2:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
 80013c6:	f04b 0b02 	orr.w	fp, fp, #2
 80013ca:	2302      	movs	r3, #2
 80013cc:	e5f2      	b.n	8000fb4 <_vfprintf_r+0x22c>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e5f0      	b.n	8000fb4 <_vfprintf_r+0x22c>
 80013d2:	f899 5000 	ldrb.w	r5, [r9]
 80013d6:	f04b 0b08 	orr.w	fp, fp, #8
 80013da:	e53b      	b.n	8000e54 <_vfprintf_r+0xcc>
 80013dc:	f899 5000 	ldrb.w	r5, [r9]
 80013e0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 80013e4:	e536      	b.n	8000e54 <_vfprintf_r+0xcc>
 80013e6:	f899 5000 	ldrb.w	r5, [r9]
 80013ea:	f04b 0b20 	orr.w	fp, fp, #32
 80013ee:	e531      	b.n	8000e54 <_vfprintf_r+0xcc>
 80013f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80013f6:	9309      	str	r3, [sp, #36]	; 0x24
 80013f8:	2330      	movs	r3, #48	; 0x30
 80013fa:	2578      	movs	r5, #120	; 0x78
 80013fc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <_vfprintf_r+0x710>)
 8001402:	930f      	str	r3, [sp, #60]	; 0x3c
 8001404:	f04b 0b02 	orr.w	fp, fp, #2
 8001408:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
 800140c:	2100      	movs	r1, #0
 800140e:	2302      	movs	r3, #2
 8001410:	e5d0      	b.n	8000fb4 <_vfprintf_r+0x22c>
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 86ad 	bne.w	8002172 <_vfprintf_r+0x13ea>
 8001418:	f01b 0f20 	tst.w	fp, #32
 800141c:	f040 8425 	bne.w	8001c6a <_vfprintf_r+0xee2>
 8001420:	f01b 0f10 	tst.w	fp, #16
 8001424:	f040 849d 	bne.w	8001d62 <_vfprintf_r+0xfda>
 8001428:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800142c:	f000 8499 	beq.w	8001d62 <_vfprintf_r+0xfda>
 8001430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001432:	9907      	ldr	r1, [sp, #28]
 8001434:	f853 2b04 	ldr.w	r2, [r3], #4
 8001438:	9309      	str	r3, [sp, #36]	; 0x24
 800143a:	8011      	strh	r1, [r2, #0]
 800143c:	e4e8      	b.n	8000e10 <_vfprintf_r+0x88>
 800143e:	f899 5000 	ldrb.w	r5, [r9]
 8001442:	2d6c      	cmp	r5, #108	; 0x6c
 8001444:	bf03      	ittte	eq
 8001446:	f899 5001 	ldrbeq.w	r5, [r9, #1]
 800144a:	f04b 0b20 	orreq.w	fp, fp, #32
 800144e:	f109 0901 	addeq.w	r9, r9, #1
 8001452:	f04b 0b10 	orrne.w	fp, fp, #16
 8001456:	e4fd      	b.n	8000e54 <_vfprintf_r+0xcc>
 8001458:	2b00      	cmp	r3, #0
 800145a:	f040 8692 	bne.w	8002182 <_vfprintf_r+0x13fa>
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <_vfprintf_r+0x710>)
 8001460:	930f      	str	r3, [sp, #60]	; 0x3c
 8001462:	f01b 0120 	ands.w	r1, fp, #32
 8001466:	d19b      	bne.n	80013a0 <_vfprintf_r+0x618>
 8001468:	f01b 0310 	ands.w	r3, fp, #16
 800146c:	f040 8331 	bne.w	8001ad2 <_vfprintf_r+0xd4a>
 8001470:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8001474:	f000 832d 	beq.w	8001ad2 <_vfprintf_r+0xd4a>
 8001478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800147a:	f852 0b04 	ldr.w	r0, [r2], #4
 800147e:	9209      	str	r2, [sp, #36]	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	b280      	uxth	r0, r0
 8001484:	e794      	b.n	80013b0 <_vfprintf_r+0x628>
 8001486:	bf00      	nop
 8001488:	7fefffff 	.word	0x7fefffff
 800148c:	0801cad0 	.word	0x0801cad0
 8001490:	0801cad4 	.word	0x0801cad4
 8001494:	0801caf4 	.word	0x0801caf4
 8001498:	0801cae0 	.word	0x0801cae0
 800149c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800149e:	9b05      	ldr	r3, [sp, #20]
 80014a0:	f854 6b04 	ldr.w	r6, [r4], #4
 80014a4:	2700      	movs	r7, #0
 80014a6:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
 80014aa:	2e00      	cmp	r6, #0
 80014ac:	f000 8427 	beq.w	8001cfe <_vfprintf_r+0xf76>
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	f000 8523 	beq.w	8001efc <_vfprintf_r+0x1174>
 80014b6:	461a      	mov	r2, r3
 80014b8:	4639      	mov	r1, r7
 80014ba:	4630      	mov	r0, r6
 80014bc:	f003 f860 	bl	8004580 <memchr>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	f000 8632 	beq.w	800212a <_vfprintf_r+0x13a2>
 80014c6:	1b83      	subs	r3, r0, r6
 80014c8:	9308      	str	r3, [sp, #32]
 80014ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80014ce:	9409      	str	r4, [sp, #36]	; 0x24
 80014d0:	9705      	str	r7, [sp, #20]
 80014d2:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 80014d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80014da:	9304      	str	r3, [sp, #16]
 80014dc:	970a      	str	r7, [sp, #40]	; 0x28
 80014de:	e68c      	b.n	80011fa <_vfprintf_r+0x472>
 80014e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	f43f aed0 	beq.w	800128a <_vfprintf_r+0x502>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	f000 8088 	beq.w	8001600 <_vfprintf_r+0x878>
 80014f0:	ae2a      	add	r6, sp, #168	; 0xa8
 80014f2:	f000 0307 	and.w	r3, r0, #7
 80014f6:	08c0      	lsrs	r0, r0, #3
 80014f8:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 80014fc:	08c9      	lsrs	r1, r1, #3
 80014fe:	3330      	adds	r3, #48	; 0x30
 8001500:	ea50 0701 	orrs.w	r7, r0, r1
 8001504:	4632      	mov	r2, r6
 8001506:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800150a:	d1f2      	bne.n	80014f2 <_vfprintf_r+0x76a>
 800150c:	f01b 0f01 	tst.w	fp, #1
 8001510:	f000 8084 	beq.w	800161c <_vfprintf_r+0x894>
 8001514:	2b30      	cmp	r3, #48	; 0x30
 8001516:	f000 8081 	beq.w	800161c <_vfprintf_r+0x894>
 800151a:	2330      	movs	r3, #48	; 0x30
 800151c:	3a02      	subs	r2, #2
 800151e:	f806 3c01 	strb.w	r3, [r6, #-1]
 8001522:	ab2a      	add	r3, sp, #168	; 0xa8
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	f8cd b00c 	str.w	fp, [sp, #12]
 800152a:	9308      	str	r3, [sp, #32]
 800152c:	4616      	mov	r6, r2
 800152e:	9b05      	ldr	r3, [sp, #20]
 8001530:	9a08      	ldr	r2, [sp, #32]
 8001532:	4293      	cmp	r3, r2
 8001534:	bfb8      	it	lt
 8001536:	4613      	movlt	r3, r2
 8001538:	9304      	str	r3, [sp, #16]
 800153a:	2300      	movs	r3, #0
 800153c:	930a      	str	r3, [sp, #40]	; 0x28
 800153e:	e65c      	b.n	80011fa <_vfprintf_r+0x472>
 8001540:	2d65      	cmp	r5, #101	; 0x65
 8001542:	f340 80f9 	ble.w	8001738 <_vfprintf_r+0x9b0>
 8001546:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800154a:	2200      	movs	r2, #0
 800154c:	2300      	movs	r3, #0
 800154e:	f006 f999 	bl	8007884 <__aeabi_dcmpeq>
 8001552:	2800      	cmp	r0, #0
 8001554:	f000 81e9 	beq.w	800192a <_vfprintf_r+0xba2>
 8001558:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800155a:	4ac5      	ldr	r2, [pc, #788]	; (8001870 <_vfprintf_r+0xae8>)
 800155c:	f8ca 2000 	str.w	r2, [sl]
 8001560:	3301      	adds	r3, #1
 8001562:	3401      	adds	r4, #1
 8001564:	2201      	movs	r2, #1
 8001566:	2b07      	cmp	r3, #7
 8001568:	941f      	str	r4, [sp, #124]	; 0x7c
 800156a:	931e      	str	r3, [sp, #120]	; 0x78
 800156c:	f8ca 2004 	str.w	r2, [sl, #4]
 8001570:	f300 846b 	bgt.w	8001e4a <_vfprintf_r+0x10c2>
 8001574:	f10a 0a08 	add.w	sl, sl, #8
 8001578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800157a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800157c:	4293      	cmp	r3, r2
 800157e:	f280 82bc 	bge.w	8001afa <_vfprintf_r+0xd72>
 8001582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001586:	441c      	add	r4, r3
 8001588:	e9ca 2300 	strd	r2, r3, [sl]
 800158c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800158e:	941f      	str	r4, [sp, #124]	; 0x7c
 8001590:	3301      	adds	r3, #1
 8001592:	2b07      	cmp	r3, #7
 8001594:	931e      	str	r3, [sp, #120]	; 0x78
 8001596:	f300 83a5 	bgt.w	8001ce4 <_vfprintf_r+0xf5c>
 800159a:	f10a 0a08 	add.w	sl, sl, #8
 800159e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015a0:	1e5d      	subs	r5, r3, #1
 80015a2:	2d00      	cmp	r5, #0
 80015a4:	f77f adc0 	ble.w	8001128 <_vfprintf_r+0x3a0>
 80015a8:	2d10      	cmp	r5, #16
 80015aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80015ac:	4fb1      	ldr	r7, [pc, #708]	; (8001874 <_vfprintf_r+0xaec>)
 80015ae:	f340 8440 	ble.w	8001e32 <_vfprintf_r+0x10aa>
 80015b2:	ee19 ba10 	vmov	fp, s18
 80015b6:	2610      	movs	r6, #16
 80015b8:	e005      	b.n	80015c6 <_vfprintf_r+0x83e>
 80015ba:	f10a 0a08 	add.w	sl, sl, #8
 80015be:	3d10      	subs	r5, #16
 80015c0:	2d10      	cmp	r5, #16
 80015c2:	f340 8436 	ble.w	8001e32 <_vfprintf_r+0x10aa>
 80015c6:	3301      	adds	r3, #1
 80015c8:	3410      	adds	r4, #16
 80015ca:	2b07      	cmp	r3, #7
 80015cc:	e9ca 7600 	strd	r7, r6, [sl]
 80015d0:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 80015d4:	ddf1      	ble.n	80015ba <_vfprintf_r+0x832>
 80015d6:	aa1d      	add	r2, sp, #116	; 0x74
 80015d8:	4641      	mov	r1, r8
 80015da:	4658      	mov	r0, fp
 80015dc:	f004 f956 	bl	800588c <__sprint_r>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	f47f ad25 	bne.w	8001030 <_vfprintf_r+0x2a8>
 80015e6:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 80015ea:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80015ee:	e7e6      	b.n	80015be <_vfprintf_r+0x836>
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	f000 8548 	beq.w	8002086 <_vfprintf_r+0x12fe>
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80015fc:	f47f af78 	bne.w	80014f0 <_vfprintf_r+0x768>
 8001600:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001602:	ae2a      	add	r6, sp, #168	; 0xa8
 8001604:	f000 030f 	and.w	r3, r0, #15
 8001608:	0900      	lsrs	r0, r0, #4
 800160a:	5cd3      	ldrb	r3, [r2, r3]
 800160c:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8001610:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8001614:	0909      	lsrs	r1, r1, #4
 8001616:	ea50 0301 	orrs.w	r3, r0, r1
 800161a:	d1f3      	bne.n	8001604 <_vfprintf_r+0x87c>
 800161c:	ab2a      	add	r3, sp, #168	; 0xa8
 800161e:	1b9b      	subs	r3, r3, r6
 8001620:	f8cd b00c 	str.w	fp, [sp, #12]
 8001624:	9308      	str	r3, [sp, #32]
 8001626:	e782      	b.n	800152e <_vfprintf_r+0x7a6>
 8001628:	9b06      	ldr	r3, [sp, #24]
 800162a:	9a04      	ldr	r2, [sp, #16]
 800162c:	eba3 0b02 	sub.w	fp, r3, r2
 8001630:	f1bb 0f00 	cmp.w	fp, #0
 8001634:	f77f ad5d 	ble.w	80010f2 <_vfprintf_r+0x36a>
 8001638:	f1bb 0f10 	cmp.w	fp, #16
 800163c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800163e:	4f8d      	ldr	r7, [pc, #564]	; (8001874 <_vfprintf_r+0xaec>)
 8001640:	dd27      	ble.n	8001692 <_vfprintf_r+0x90a>
 8001642:	4621      	mov	r1, r4
 8001644:	2310      	movs	r3, #16
 8001646:	ee19 4a10 	vmov	r4, s18
 800164a:	e006      	b.n	800165a <_vfprintf_r+0x8d2>
 800164c:	f1ab 0b10 	sub.w	fp, fp, #16
 8001650:	f1bb 0f10 	cmp.w	fp, #16
 8001654:	f10a 0a08 	add.w	sl, sl, #8
 8001658:	dd1a      	ble.n	8001690 <_vfprintf_r+0x908>
 800165a:	3201      	adds	r2, #1
 800165c:	3110      	adds	r1, #16
 800165e:	2a07      	cmp	r2, #7
 8001660:	e9ca 7300 	strd	r7, r3, [sl]
 8001664:	e9cd 211e 	strd	r2, r1, [sp, #120]	; 0x78
 8001668:	ddf0      	ble.n	800164c <_vfprintf_r+0x8c4>
 800166a:	aa1d      	add	r2, sp, #116	; 0x74
 800166c:	4641      	mov	r1, r8
 800166e:	4620      	mov	r0, r4
 8001670:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001674:	f004 f90a 	bl	800588c <__sprint_r>
 8001678:	2800      	cmp	r0, #0
 800167a:	f47f acd9 	bne.w	8001030 <_vfprintf_r+0x2a8>
 800167e:	f1ab 0b10 	sub.w	fp, fp, #16
 8001682:	f1bb 0f10 	cmp.w	fp, #16
 8001686:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 800168a:	f04f 0310 	mov.w	r3, #16
 800168e:	dce4      	bgt.n	800165a <_vfprintf_r+0x8d2>
 8001690:	460c      	mov	r4, r1
 8001692:	3201      	adds	r2, #1
 8001694:	445c      	add	r4, fp
 8001696:	2a07      	cmp	r2, #7
 8001698:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 800169c:	f8ca 7000 	str.w	r7, [sl]
 80016a0:	f8ca b004 	str.w	fp, [sl, #4]
 80016a4:	f300 83df 	bgt.w	8001e66 <_vfprintf_r+0x10de>
 80016a8:	f10a 0a08 	add.w	sl, sl, #8
 80016ac:	e521      	b.n	80010f2 <_vfprintf_r+0x36a>
 80016ae:	f1bb 0f10 	cmp.w	fp, #16
 80016b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80016b4:	4f6f      	ldr	r7, [pc, #444]	; (8001874 <_vfprintf_r+0xaec>)
 80016b6:	dd27      	ble.n	8001708 <_vfprintf_r+0x980>
 80016b8:	4621      	mov	r1, r4
 80016ba:	2310      	movs	r3, #16
 80016bc:	ee19 4a10 	vmov	r4, s18
 80016c0:	e006      	b.n	80016d0 <_vfprintf_r+0x948>
 80016c2:	f1ab 0b10 	sub.w	fp, fp, #16
 80016c6:	f1bb 0f10 	cmp.w	fp, #16
 80016ca:	f10a 0a08 	add.w	sl, sl, #8
 80016ce:	dd1a      	ble.n	8001706 <_vfprintf_r+0x97e>
 80016d0:	3201      	adds	r2, #1
 80016d2:	3110      	adds	r1, #16
 80016d4:	2a07      	cmp	r2, #7
 80016d6:	e9ca 7300 	strd	r7, r3, [sl]
 80016da:	e9cd 211e 	strd	r2, r1, [sp, #120]	; 0x78
 80016de:	ddf0      	ble.n	80016c2 <_vfprintf_r+0x93a>
 80016e0:	aa1d      	add	r2, sp, #116	; 0x74
 80016e2:	4641      	mov	r1, r8
 80016e4:	4620      	mov	r0, r4
 80016e6:	f004 f8d1 	bl	800588c <__sprint_r>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	f47f aca0 	bne.w	8001030 <_vfprintf_r+0x2a8>
 80016f0:	f1ab 0b10 	sub.w	fp, fp, #16
 80016f4:	f1bb 0f10 	cmp.w	fp, #16
 80016f8:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 80016fc:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001700:	f04f 0310 	mov.w	r3, #16
 8001704:	dce4      	bgt.n	80016d0 <_vfprintf_r+0x948>
 8001706:	460c      	mov	r4, r1
 8001708:	3201      	adds	r2, #1
 800170a:	445c      	add	r4, fp
 800170c:	2a07      	cmp	r2, #7
 800170e:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 8001712:	f8ca 7000 	str.w	r7, [sl]
 8001716:	f8ca b004 	str.w	fp, [sl, #4]
 800171a:	f300 81cc 	bgt.w	8001ab6 <_vfprintf_r+0xd2e>
 800171e:	f10a 0a08 	add.w	sl, sl, #8
 8001722:	e4ee      	b.n	8001102 <_vfprintf_r+0x37a>
 8001724:	ee19 0a10 	vmov	r0, s18
 8001728:	aa1d      	add	r2, sp, #116	; 0x74
 800172a:	4641      	mov	r1, r8
 800172c:	f004 f8ae 	bl	800588c <__sprint_r>
 8001730:	2800      	cmp	r0, #0
 8001732:	f43f ad0d 	beq.w	8001150 <_vfprintf_r+0x3c8>
 8001736:	e47b      	b.n	8001030 <_vfprintf_r+0x2a8>
 8001738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800173a:	2b01      	cmp	r3, #1
 800173c:	f340 8171 	ble.w	8001a22 <_vfprintf_r+0xc9a>
 8001740:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001742:	f8ca 6000 	str.w	r6, [sl]
 8001746:	3501      	adds	r5, #1
 8001748:	3401      	adds	r4, #1
 800174a:	2301      	movs	r3, #1
 800174c:	2d07      	cmp	r5, #7
 800174e:	941f      	str	r4, [sp, #124]	; 0x7c
 8001750:	951e      	str	r5, [sp, #120]	; 0x78
 8001752:	f8ca 3004 	str.w	r3, [sl, #4]
 8001756:	f300 830c 	bgt.w	8001d72 <_vfprintf_r+0xfea>
 800175a:	f10a 0a08 	add.w	sl, sl, #8
 800175e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001760:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001762:	3501      	adds	r5, #1
 8001764:	441c      	add	r4, r3
 8001766:	2d07      	cmp	r5, #7
 8001768:	e9ca 2300 	strd	r2, r3, [sl]
 800176c:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 8001770:	f300 830d 	bgt.w	8001d8e <_vfprintf_r+0x1006>
 8001774:	f10a 0a08 	add.w	sl, sl, #8
 8001778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800177c:	2200      	movs	r2, #0
 800177e:	2300      	movs	r3, #0
 8001780:	f006 f880 	bl	8007884 <__aeabi_dcmpeq>
 8001784:	2800      	cmp	r0, #0
 8001786:	f040 816b 	bne.w	8001a60 <_vfprintf_r+0xcd8>
 800178a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800178c:	3501      	adds	r5, #1
 800178e:	3b01      	subs	r3, #1
 8001790:	3601      	adds	r6, #1
 8001792:	441c      	add	r4, r3
 8001794:	2d07      	cmp	r5, #7
 8001796:	f8ca 6000 	str.w	r6, [sl]
 800179a:	951e      	str	r5, [sp, #120]	; 0x78
 800179c:	f8ca 3004 	str.w	r3, [sl, #4]
 80017a0:	941f      	str	r4, [sp, #124]	; 0x7c
 80017a2:	f300 814f 	bgt.w	8001a44 <_vfprintf_r+0xcbc>
 80017a6:	f10a 0a08 	add.w	sl, sl, #8
 80017aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017ac:	f8ca 3004 	str.w	r3, [sl, #4]
 80017b0:	3501      	adds	r5, #1
 80017b2:	441c      	add	r4, r3
 80017b4:	2d07      	cmp	r5, #7
 80017b6:	ab19      	add	r3, sp, #100	; 0x64
 80017b8:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 80017bc:	f8ca 3000 	str.w	r3, [sl]
 80017c0:	f77f acb0 	ble.w	8001124 <_vfprintf_r+0x39c>
 80017c4:	ee19 0a10 	vmov	r0, s18
 80017c8:	aa1d      	add	r2, sp, #116	; 0x74
 80017ca:	4641      	mov	r1, r8
 80017cc:	f004 f85e 	bl	800588c <__sprint_r>
 80017d0:	2800      	cmp	r0, #0
 80017d2:	f47f ac2d 	bne.w	8001030 <_vfprintf_r+0x2a8>
 80017d6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80017d8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80017dc:	e4a4      	b.n	8001128 <_vfprintf_r+0x3a0>
 80017de:	2f10      	cmp	r7, #16
 80017e0:	e9dd 211e 	ldrd	r2, r1, [sp, #120]	; 0x78
 80017e4:	dd34      	ble.n	8001850 <_vfprintf_r+0xac8>
 80017e6:	9312      	str	r3, [sp, #72]	; 0x48
 80017e8:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80017ec:	2410      	movs	r4, #16
 80017ee:	46b1      	mov	r9, r6
 80017f0:	460b      	mov	r3, r1
 80017f2:	4646      	mov	r6, r8
 80017f4:	46b8      	mov	r8, r7
 80017f6:	462f      	mov	r7, r5
 80017f8:	ee19 5a10 	vmov	r5, s18
 80017fc:	e006      	b.n	800180c <_vfprintf_r+0xa84>
 80017fe:	f1a8 0810 	sub.w	r8, r8, #16
 8001802:	f1b8 0f10 	cmp.w	r8, #16
 8001806:	f10a 0a08 	add.w	sl, sl, #8
 800180a:	dd19      	ble.n	8001840 <_vfprintf_r+0xab8>
 800180c:	3201      	adds	r2, #1
 800180e:	491a      	ldr	r1, [pc, #104]	; (8001878 <_vfprintf_r+0xaf0>)
 8001810:	3310      	adds	r3, #16
 8001812:	2a07      	cmp	r2, #7
 8001814:	e9ca 1400 	strd	r1, r4, [sl]
 8001818:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 800181c:	ddef      	ble.n	80017fe <_vfprintf_r+0xa76>
 800181e:	aa1d      	add	r2, sp, #116	; 0x74
 8001820:	4631      	mov	r1, r6
 8001822:	4628      	mov	r0, r5
 8001824:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001828:	f004 f830 	bl	800588c <__sprint_r>
 800182c:	2800      	cmp	r0, #0
 800182e:	f47f abfe 	bne.w	800102e <_vfprintf_r+0x2a6>
 8001832:	f1a8 0810 	sub.w	r8, r8, #16
 8001836:	f1b8 0f10 	cmp.w	r8, #16
 800183a:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800183e:	dce5      	bgt.n	800180c <_vfprintf_r+0xa84>
 8001840:	463d      	mov	r5, r7
 8001842:	4619      	mov	r1, r3
 8001844:	4647      	mov	r7, r8
 8001846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001848:	46b0      	mov	r8, r6
 800184a:	464e      	mov	r6, r9
 800184c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8001850:	f8ca 7004 	str.w	r7, [sl, #4]
 8001854:	3201      	adds	r2, #1
 8001856:	187c      	adds	r4, r7, r1
 8001858:	2a07      	cmp	r2, #7
 800185a:	4907      	ldr	r1, [pc, #28]	; (8001878 <_vfprintf_r+0xaf0>)
 800185c:	f8ca 1000 	str.w	r1, [sl]
 8001860:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
 8001864:	f300 82d5 	bgt.w	8001e12 <_vfprintf_r+0x108a>
 8001868:	f10a 0a08 	add.w	sl, sl, #8
 800186c:	e416      	b.n	800109c <_vfprintf_r+0x314>
 800186e:	bf00      	nop
 8001870:	0801cb10 	.word	0x0801cb10
 8001874:	0800d3c4 	.word	0x0800d3c4
 8001878:	0800d3b4 	.word	0x0800d3b4
 800187c:	ee19 0a10 	vmov	r0, s18
 8001880:	aa1d      	add	r2, sp, #116	; 0x74
 8001882:	4641      	mov	r1, r8
 8001884:	9312      	str	r3, [sp, #72]	; 0x48
 8001886:	f004 f801 	bl	800588c <__sprint_r>
 800188a:	2800      	cmp	r0, #0
 800188c:	f47f abd0 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001890:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001892:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001894:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001898:	e415      	b.n	80010c6 <_vfprintf_r+0x33e>
 800189a:	ee19 0a10 	vmov	r0, s18
 800189e:	aa1d      	add	r2, sp, #116	; 0x74
 80018a0:	4641      	mov	r1, r8
 80018a2:	f003 fff3 	bl	800588c <__sprint_r>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	f47f abc2 	bne.w	8001030 <_vfprintf_r+0x2a8>
 80018ac:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80018ae:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80018b2:	e41a      	b.n	80010ea <_vfprintf_r+0x362>
 80018b4:	2d10      	cmp	r5, #16
 80018b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80018b8:	dd20      	ble.n	80018fc <_vfprintf_r+0xb74>
 80018ba:	ee19 7a10 	vmov	r7, s18
 80018be:	2610      	movs	r6, #16
 80018c0:	e004      	b.n	80018cc <_vfprintf_r+0xb44>
 80018c2:	3d10      	subs	r5, #16
 80018c4:	2d10      	cmp	r5, #16
 80018c6:	f10a 0a08 	add.w	sl, sl, #8
 80018ca:	dd17      	ble.n	80018fc <_vfprintf_r+0xb74>
 80018cc:	3301      	adds	r3, #1
 80018ce:	4a91      	ldr	r2, [pc, #580]	; (8001b14 <_vfprintf_r+0xd8c>)
 80018d0:	3410      	adds	r4, #16
 80018d2:	2b07      	cmp	r3, #7
 80018d4:	e9ca 2600 	strd	r2, r6, [sl]
 80018d8:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 80018dc:	ddf1      	ble.n	80018c2 <_vfprintf_r+0xb3a>
 80018de:	aa1d      	add	r2, sp, #116	; 0x74
 80018e0:	4641      	mov	r1, r8
 80018e2:	4638      	mov	r0, r7
 80018e4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80018e8:	f003 ffd0 	bl	800588c <__sprint_r>
 80018ec:	2800      	cmp	r0, #0
 80018ee:	f47f ab9f 	bne.w	8001030 <_vfprintf_r+0x2a8>
 80018f2:	3d10      	subs	r5, #16
 80018f4:	2d10      	cmp	r5, #16
 80018f6:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 80018fa:	dce7      	bgt.n	80018cc <_vfprintf_r+0xb44>
 80018fc:	3301      	adds	r3, #1
 80018fe:	4a85      	ldr	r2, [pc, #532]	; (8001b14 <_vfprintf_r+0xd8c>)
 8001900:	f8ca 5004 	str.w	r5, [sl, #4]
 8001904:	442c      	add	r4, r5
 8001906:	2b07      	cmp	r3, #7
 8001908:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 800190c:	f8ca 2000 	str.w	r2, [sl]
 8001910:	f77f ac13 	ble.w	800113a <_vfprintf_r+0x3b2>
 8001914:	ee19 0a10 	vmov	r0, s18
 8001918:	aa1d      	add	r2, sp, #116	; 0x74
 800191a:	4641      	mov	r1, r8
 800191c:	f003 ffb6 	bl	800588c <__sprint_r>
 8001920:	2800      	cmp	r0, #0
 8001922:	f47f ab85 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001926:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001928:	e407      	b.n	800113a <_vfprintf_r+0x3b2>
 800192a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800192c:	2900      	cmp	r1, #0
 800192e:	f340 823c 	ble.w	8001daa <_vfprintf_r+0x1022>
 8001932:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	; 0x28
 8001936:	429f      	cmp	r7, r3
 8001938:	bfa8      	it	ge
 800193a:	461f      	movge	r7, r3
 800193c:	2f00      	cmp	r7, #0
 800193e:	dd0b      	ble.n	8001958 <_vfprintf_r+0xbd0>
 8001940:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001942:	3301      	adds	r3, #1
 8001944:	443c      	add	r4, r7
 8001946:	2b07      	cmp	r3, #7
 8001948:	e9ca 6700 	strd	r6, r7, [sl]
 800194c:	941f      	str	r4, [sp, #124]	; 0x7c
 800194e:	931e      	str	r3, [sp, #120]	; 0x78
 8001950:	f300 83cb 	bgt.w	80020ea <_vfprintf_r+0x1362>
 8001954:	f10a 0a08 	add.w	sl, sl, #8
 8001958:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800195a:	2f00      	cmp	r7, #0
 800195c:	bfa8      	it	ge
 800195e:	1bed      	subge	r5, r5, r7
 8001960:	2d00      	cmp	r5, #0
 8001962:	f300 81d5 	bgt.w	8001d10 <_vfprintf_r+0xf88>
 8001966:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800196a:	429d      	cmp	r5, r3
 800196c:	f280 81ae 	bge.w	8001ccc <_vfprintf_r+0xf44>
 8001970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001972:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001974:	441c      	add	r4, r3
 8001976:	e9ca 2300 	strd	r2, r3, [sl]
 800197a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800197c:	941f      	str	r4, [sp, #124]	; 0x7c
 800197e:	3301      	adds	r3, #1
 8001980:	2b07      	cmp	r3, #7
 8001982:	931e      	str	r3, [sp, #120]	; 0x78
 8001984:	f300 83a3 	bgt.w	80020ce <_vfprintf_r+0x1346>
 8001988:	f10a 0a08 	add.w	sl, sl, #8
 800198c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800198e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001990:	1b5d      	subs	r5, r3, r5
 8001992:	1a9f      	subs	r7, r3, r2
 8001994:	42af      	cmp	r7, r5
 8001996:	bfa8      	it	ge
 8001998:	462f      	movge	r7, r5
 800199a:	2f00      	cmp	r7, #0
 800199c:	dd0e      	ble.n	80019bc <_vfprintf_r+0xc34>
 800199e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80019a0:	f8ca 7004 	str.w	r7, [sl, #4]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4416      	add	r6, r2
 80019a8:	443c      	add	r4, r7
 80019aa:	2b07      	cmp	r3, #7
 80019ac:	f8ca 6000 	str.w	r6, [sl]
 80019b0:	941f      	str	r4, [sp, #124]	; 0x7c
 80019b2:	931e      	str	r3, [sp, #120]	; 0x78
 80019b4:	f300 83a6 	bgt.w	8002104 <_vfprintf_r+0x137c>
 80019b8:	f10a 0a08 	add.w	sl, sl, #8
 80019bc:	2f00      	cmp	r7, #0
 80019be:	bfa8      	it	ge
 80019c0:	1bed      	subge	r5, r5, r7
 80019c2:	2d00      	cmp	r5, #0
 80019c4:	f77f abb0 	ble.w	8001128 <_vfprintf_r+0x3a0>
 80019c8:	2d10      	cmp	r5, #16
 80019ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80019cc:	4f52      	ldr	r7, [pc, #328]	; (8001b18 <_vfprintf_r+0xd90>)
 80019ce:	f340 8230 	ble.w	8001e32 <_vfprintf_r+0x10aa>
 80019d2:	ee19 ba10 	vmov	fp, s18
 80019d6:	2610      	movs	r6, #16
 80019d8:	e005      	b.n	80019e6 <_vfprintf_r+0xc5e>
 80019da:	f10a 0a08 	add.w	sl, sl, #8
 80019de:	3d10      	subs	r5, #16
 80019e0:	2d10      	cmp	r5, #16
 80019e2:	f340 8226 	ble.w	8001e32 <_vfprintf_r+0x10aa>
 80019e6:	3301      	adds	r3, #1
 80019e8:	3410      	adds	r4, #16
 80019ea:	2b07      	cmp	r3, #7
 80019ec:	e9ca 7600 	strd	r7, r6, [sl]
 80019f0:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 80019f4:	ddf1      	ble.n	80019da <_vfprintf_r+0xc52>
 80019f6:	aa1d      	add	r2, sp, #116	; 0x74
 80019f8:	4641      	mov	r1, r8
 80019fa:	4658      	mov	r0, fp
 80019fc:	f003 ff46 	bl	800588c <__sprint_r>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	f47f ab15 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001a06:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 8001a0a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001a0e:	e7e6      	b.n	80019de <_vfprintf_r+0xc56>
 8001a10:	9b05      	ldr	r3, [sp, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 8337 	bne.w	8002086 <_vfprintf_r+0x12fe>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9305      	str	r3, [sp, #20]
 8001a1c:	9308      	str	r3, [sp, #32]
 8001a1e:	ae2a      	add	r6, sp, #168	; 0xa8
 8001a20:	e585      	b.n	800152e <_vfprintf_r+0x7a6>
 8001a22:	9b03      	ldr	r3, [sp, #12]
 8001a24:	07d9      	lsls	r1, r3, #31
 8001a26:	f53f ae8b 	bmi.w	8001740 <_vfprintf_r+0x9b8>
 8001a2a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001a2c:	f8ca 6000 	str.w	r6, [sl]
 8001a30:	3501      	adds	r5, #1
 8001a32:	3401      	adds	r4, #1
 8001a34:	2301      	movs	r3, #1
 8001a36:	2d07      	cmp	r5, #7
 8001a38:	941f      	str	r4, [sp, #124]	; 0x7c
 8001a3a:	951e      	str	r5, [sp, #120]	; 0x78
 8001a3c:	f8ca 3004 	str.w	r3, [sl, #4]
 8001a40:	f77f aeb1 	ble.w	80017a6 <_vfprintf_r+0xa1e>
 8001a44:	ee19 0a10 	vmov	r0, s18
 8001a48:	aa1d      	add	r2, sp, #116	; 0x74
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	f003 ff1e 	bl	800588c <__sprint_r>
 8001a50:	2800      	cmp	r0, #0
 8001a52:	f47f aaed 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001a56:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001a5a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001a5e:	e6a4      	b.n	80017aa <_vfprintf_r+0xa22>
 8001a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a62:	1e5e      	subs	r6, r3, #1
 8001a64:	2e00      	cmp	r6, #0
 8001a66:	f77f aea0 	ble.w	80017aa <_vfprintf_r+0xa22>
 8001a6a:	2e10      	cmp	r6, #16
 8001a6c:	4f2a      	ldr	r7, [pc, #168]	; (8001b18 <_vfprintf_r+0xd90>)
 8001a6e:	f340 8257 	ble.w	8001f20 <_vfprintf_r+0x1198>
 8001a72:	f8cd 9014 	str.w	r9, [sp, #20]
 8001a76:	f04f 0b10 	mov.w	fp, #16
 8001a7a:	ee19 9a10 	vmov	r9, s18
 8001a7e:	e005      	b.n	8001a8c <_vfprintf_r+0xd04>
 8001a80:	f10a 0a08 	add.w	sl, sl, #8
 8001a84:	3e10      	subs	r6, #16
 8001a86:	2e10      	cmp	r6, #16
 8001a88:	f340 8248 	ble.w	8001f1c <_vfprintf_r+0x1194>
 8001a8c:	3501      	adds	r5, #1
 8001a8e:	3410      	adds	r4, #16
 8001a90:	2d07      	cmp	r5, #7
 8001a92:	e9ca 7b00 	strd	r7, fp, [sl]
 8001a96:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 8001a9a:	ddf1      	ble.n	8001a80 <_vfprintf_r+0xcf8>
 8001a9c:	aa1d      	add	r2, sp, #116	; 0x74
 8001a9e:	4641      	mov	r1, r8
 8001aa0:	4648      	mov	r0, r9
 8001aa2:	f003 fef3 	bl	800588c <__sprint_r>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	f47f aac2 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001aac:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001ab0:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001ab4:	e7e6      	b.n	8001a84 <_vfprintf_r+0xcfc>
 8001ab6:	ee19 0a10 	vmov	r0, s18
 8001aba:	aa1d      	add	r2, sp, #116	; 0x74
 8001abc:	4641      	mov	r1, r8
 8001abe:	f003 fee5 	bl	800588c <__sprint_r>
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	f47f aab4 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001ac8:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001aca:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001ace:	f7ff bb18 	b.w	8001102 <_vfprintf_r+0x37a>
 8001ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ad4:	f853 0b04 	ldr.w	r0, [r3], #4
 8001ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8001ada:	e469      	b.n	80013b0 <_vfprintf_r+0x628>
 8001adc:	17c1      	asrs	r1, r0, #31
 8001ade:	460b      	mov	r3, r1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f6bf abc3 	bge.w	800126c <_vfprintf_r+0x4e4>
 8001ae6:	4240      	negs	r0, r0
 8001ae8:	f04f 042d 	mov.w	r4, #45	; 0x2d
 8001aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001af0:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8001af4:	2301      	movs	r3, #1
 8001af6:	f7ff ba60 	b.w	8000fba <_vfprintf_r+0x232>
 8001afa:	9b03      	ldr	r3, [sp, #12]
 8001afc:	07dd      	lsls	r5, r3, #31
 8001afe:	f57f ab13 	bpl.w	8001128 <_vfprintf_r+0x3a0>
 8001b02:	e53e      	b.n	8001582 <_vfprintf_r+0x7fa>
 8001b04:	f899 5000 	ldrb.w	r5, [r9]
 8001b08:	9209      	str	r2, [sp, #36]	; 0x24
 8001b0a:	f7ff b9a3 	b.w	8000e54 <_vfprintf_r+0xcc>
 8001b0e:	ae2a      	add	r6, sp, #168	; 0xa8
 8001b10:	e50d      	b.n	800152e <_vfprintf_r+0x7a6>
 8001b12:	bf00      	nop
 8001b14:	0800d3b4 	.word	0x0800d3b4
 8001b18:	0800d3c4 	.word	0x0800d3c4
 8001b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	f005 fee0 	bl	80078e8 <__aeabi_dcmpun>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	f040 8365 	bne.w	80021f8 <_vfprintf_r+0x1470>
 8001b2e:	9b05      	ldr	r3, [sp, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	f025 0720 	bic.w	r7, r5, #32
 8001b36:	f000 82f5 	beq.w	8002124 <_vfprintf_r+0x139c>
 8001b3a:	2f47      	cmp	r7, #71	; 0x47
 8001b3c:	f000 8281 	beq.w	8002042 <_vfprintf_r+0x12ba>
 8001b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001b44:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
 8001b48:	2900      	cmp	r1, #0
 8001b4a:	9203      	str	r2, [sp, #12]
 8001b4c:	f2c0 824c 	blt.w	8001fe8 <_vfprintf_r+0x1260>
 8001b50:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8001b54:	2300      	movs	r3, #0
 8001b56:	9312      	str	r3, [sp, #72]	; 0x48
 8001b58:	eeb0 aa47 	vmov.f32	s20, s14
 8001b5c:	eef0 aa67 	vmov.f32	s21, s15
 8001b60:	2d66      	cmp	r5, #102	; 0x66
 8001b62:	f000 81e9 	beq.w	8001f38 <_vfprintf_r+0x11b0>
 8001b66:	2d46      	cmp	r5, #70	; 0x46
 8001b68:	f000 81e6 	beq.w	8001f38 <_vfprintf_r+0x11b0>
 8001b6c:	eeb0 0a4a 	vmov.f32	s0, s20
 8001b70:	eef0 0a6a 	vmov.f32	s1, s21
 8001b74:	2f45      	cmp	r7, #69	; 0x45
 8001b76:	bf0a      	itet	eq
 8001b78:	9b05      	ldreq	r3, [sp, #20]
 8001b7a:	9c05      	ldrne	r4, [sp, #20]
 8001b7c:	1c5c      	addeq	r4, r3, #1
 8001b7e:	ab1b      	add	r3, sp, #108	; 0x6c
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	ab18      	add	r3, sp, #96	; 0x60
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	ee19 0a10 	vmov	r0, s18
 8001b8a:	ab17      	add	r3, sp, #92	; 0x5c
 8001b8c:	4622      	mov	r2, r4
 8001b8e:	2102      	movs	r1, #2
 8001b90:	f000 fcfa 	bl	8002588 <_dtoa_r>
 8001b94:	2d67      	cmp	r5, #103	; 0x67
 8001b96:	4606      	mov	r6, r0
 8001b98:	f040 823d 	bne.w	8002016 <_vfprintf_r+0x128e>
 8001b9c:	f01b 0f01 	tst.w	fp, #1
 8001ba0:	f040 823c 	bne.w	800201c <_vfprintf_r+0x1294>
 8001ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001ba6:	2f47      	cmp	r7, #71	; 0x47
 8001ba8:	eba3 0306 	sub.w	r3, r3, r6
 8001bac:	930b      	str	r3, [sp, #44]	; 0x2c
 8001bae:	f040 836e 	bne.w	800228e <_vfprintf_r+0x1506>
 8001bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001bb4:	930a      	str	r3, [sp, #40]	; 0x28
 8001bb6:	1cd9      	adds	r1, r3, #3
 8001bb8:	db03      	blt.n	8001bc2 <_vfprintf_r+0xe3a>
 8001bba:	9a05      	ldr	r2, [sp, #20]
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f340 8278 	ble.w	80020b2 <_vfprintf_r+0x132a>
 8001bc2:	3d02      	subs	r5, #2
 8001bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001bc6:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
 8001bca:	1e53      	subs	r3, r2, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	9317      	str	r3, [sp, #92]	; 0x5c
 8001bd0:	bfb6      	itet	lt
 8001bd2:	f1c2 0301 	rsblt	r3, r2, #1
 8001bd6:	222b      	movge	r2, #43	; 0x2b
 8001bd8:	222d      	movlt	r2, #45	; 0x2d
 8001bda:	2b09      	cmp	r3, #9
 8001bdc:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
 8001be0:	f340 82f5 	ble.w	80021ce <_vfprintf_r+0x1446>
 8001be4:	f10d 0473 	add.w	r4, sp, #115	; 0x73
 8001be8:	4fc0      	ldr	r7, [pc, #768]	; (8001eec <_vfprintf_r+0x1164>)
 8001bea:	4622      	mov	r2, r4
 8001bec:	4610      	mov	r0, r2
 8001bee:	fb87 2103 	smull	r2, r1, r7, r3
 8001bf2:	17da      	asrs	r2, r3, #31
 8001bf4:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8001bf8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001bfc:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8001c00:	3130      	adds	r1, #48	; 0x30
 8001c02:	f800 1c01 	strb.w	r1, [r0, #-1]
 8001c06:	4619      	mov	r1, r3
 8001c08:	2963      	cmp	r1, #99	; 0x63
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001c10:	dcec      	bgt.n	8001bec <_vfprintf_r+0xe64>
 8001c12:	3330      	adds	r3, #48	; 0x30
 8001c14:	b2d9      	uxtb	r1, r3
 8001c16:	1e83      	subs	r3, r0, #2
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001c1e:	f240 8327 	bls.w	8002270 <_vfprintf_r+0x14e8>
 8001c22:	4613      	mov	r3, r2
 8001c24:	f10d 0266 	add.w	r2, sp, #102	; 0x66
 8001c28:	e001      	b.n	8001c2e <_vfprintf_r+0xea6>
 8001c2a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001c2e:	f802 1b01 	strb.w	r1, [r2], #1
 8001c32:	429c      	cmp	r4, r3
 8001c34:	d1f9      	bne.n	8001c2a <_vfprintf_r+0xea2>
 8001c36:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8001c3a:	f10d 0266 	add.w	r2, sp, #102	; 0x66
 8001c3e:	1a1b      	subs	r3, r3, r0
 8001c40:	4413      	add	r3, r2
 8001c42:	aa19      	add	r2, sp, #100	; 0x64
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	9311      	str	r3, [sp, #68]	; 0x44
 8001c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001c4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001c4c:	2a01      	cmp	r2, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	9308      	str	r3, [sp, #32]
 8001c52:	f340 82c8 	ble.w	80021e6 <_vfprintf_r+0x145e>
 8001c56:	9b08      	ldr	r3, [sp, #32]
 8001c58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001c5a:	4413      	add	r3, r2
 8001c5c:	9308      	str	r3, [sp, #32]
 8001c5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c62:	9304      	str	r3, [sp, #16]
 8001c64:	2300      	movs	r3, #0
 8001c66:	930a      	str	r3, [sp, #40]	; 0x28
 8001c68:	e19e      	b.n	8001fa8 <_vfprintf_r+0x1220>
 8001c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c6c:	9807      	ldr	r0, [sp, #28]
 8001c6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8001c72:	9309      	str	r3, [sp, #36]	; 0x24
 8001c74:	17c2      	asrs	r2, r0, #31
 8001c76:	e9c1 0200 	strd	r0, r2, [r1]
 8001c7a:	f7ff b8c9 	b.w	8000e10 <_vfprintf_r+0x88>
 8001c7e:	280a      	cmp	r0, #10
 8001c80:	f171 0300 	sbcs.w	r3, r1, #0
 8001c84:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001c88:	f4ff ab04 	bcc.w	8001294 <_vfprintf_r+0x50c>
 8001c8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8001c90:	ae2a      	add	r6, sp, #168	; 0xa8
 8001c92:	46a1      	mov	r9, r4
 8001c94:	220a      	movs	r2, #10
 8001c96:	2300      	movs	r3, #0
 8001c98:	4604      	mov	r4, r0
 8001c9a:	460f      	mov	r7, r1
 8001c9c:	f005 fe62 	bl	8007964 <__aeabi_uldivmod>
 8001ca0:	3230      	adds	r2, #48	; 0x30
 8001ca2:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4639      	mov	r1, r7
 8001cac:	220a      	movs	r2, #10
 8001cae:	f005 fe59 	bl	8007964 <__aeabi_uldivmod>
 8001cb2:	2c0a      	cmp	r4, #10
 8001cb4:	f177 0300 	sbcs.w	r3, r7, #0
 8001cb8:	d2ec      	bcs.n	8001c94 <_vfprintf_r+0xf0c>
 8001cba:	ab2a      	add	r3, sp, #168	; 0xa8
 8001cbc:	1b9b      	subs	r3, r3, r6
 8001cbe:	464c      	mov	r4, r9
 8001cc0:	9308      	str	r3, [sp, #32]
 8001cc2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001cc6:	f8cd b00c 	str.w	fp, [sp, #12]
 8001cca:	e430      	b.n	800152e <_vfprintf_r+0x7a6>
 8001ccc:	9b03      	ldr	r3, [sp, #12]
 8001cce:	07d8      	lsls	r0, r3, #31
 8001cd0:	f53f ae4e 	bmi.w	8001970 <_vfprintf_r+0xbe8>
 8001cd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001cd8:	1a9f      	subs	r7, r3, r2
 8001cda:	1b5d      	subs	r5, r3, r5
 8001cdc:	42af      	cmp	r7, r5
 8001cde:	bfa8      	it	ge
 8001ce0:	462f      	movge	r7, r5
 8001ce2:	e66b      	b.n	80019bc <_vfprintf_r+0xc34>
 8001ce4:	ee19 0a10 	vmov	r0, s18
 8001ce8:	aa1d      	add	r2, sp, #116	; 0x74
 8001cea:	4641      	mov	r1, r8
 8001cec:	f003 fdce 	bl	800588c <__sprint_r>
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	f47f a99d 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001cf6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001cf8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001cfc:	e44f      	b.n	800159e <_vfprintf_r+0x816>
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	bf28      	it	cs
 8001d02:	2306      	movcs	r3, #6
 8001d04:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8001d08:	4e79      	ldr	r6, [pc, #484]	; (8001ef0 <_vfprintf_r+0x1168>)
 8001d0a:	9304      	str	r3, [sp, #16]
 8001d0c:	f7ff b9af 	b.w	800106e <_vfprintf_r+0x2e6>
 8001d10:	2d10      	cmp	r5, #16
 8001d12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001d14:	4f77      	ldr	r7, [pc, #476]	; (8001ef4 <_vfprintf_r+0x116c>)
 8001d16:	f340 8155 	ble.w	8001fc4 <_vfprintf_r+0x123c>
 8001d1a:	463a      	mov	r2, r7
 8001d1c:	9605      	str	r6, [sp, #20]
 8001d1e:	4647      	mov	r7, r8
 8001d20:	ee19 6a10 	vmov	r6, s18
 8001d24:	f04f 0b10 	mov.w	fp, #16
 8001d28:	4690      	mov	r8, r2
 8001d2a:	e005      	b.n	8001d38 <_vfprintf_r+0xfb0>
 8001d2c:	f10a 0a08 	add.w	sl, sl, #8
 8001d30:	3d10      	subs	r5, #16
 8001d32:	2d10      	cmp	r5, #16
 8001d34:	f340 8142 	ble.w	8001fbc <_vfprintf_r+0x1234>
 8001d38:	3301      	adds	r3, #1
 8001d3a:	3410      	adds	r4, #16
 8001d3c:	2b07      	cmp	r3, #7
 8001d3e:	e9ca 8b00 	strd	r8, fp, [sl]
 8001d42:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001d46:	ddf1      	ble.n	8001d2c <_vfprintf_r+0xfa4>
 8001d48:	aa1d      	add	r2, sp, #116	; 0x74
 8001d4a:	4639      	mov	r1, r7
 8001d4c:	4630      	mov	r0, r6
 8001d4e:	f003 fd9d 	bl	800588c <__sprint_r>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	f040 8244 	bne.w	80021e0 <_vfprintf_r+0x1458>
 8001d58:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 8001d5c:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001d60:	e7e6      	b.n	8001d30 <_vfprintf_r+0xfa8>
 8001d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d64:	9907      	ldr	r1, [sp, #28]
 8001d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d6a:	6011      	str	r1, [r2, #0]
 8001d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8001d6e:	f7ff b84f 	b.w	8000e10 <_vfprintf_r+0x88>
 8001d72:	ee19 0a10 	vmov	r0, s18
 8001d76:	aa1d      	add	r2, sp, #116	; 0x74
 8001d78:	4641      	mov	r1, r8
 8001d7a:	f003 fd87 	bl	800588c <__sprint_r>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	f47f a956 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001d84:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001d88:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001d8c:	e4e7      	b.n	800175e <_vfprintf_r+0x9d6>
 8001d8e:	ee19 0a10 	vmov	r0, s18
 8001d92:	aa1d      	add	r2, sp, #116	; 0x74
 8001d94:	4641      	mov	r1, r8
 8001d96:	f003 fd79 	bl	800588c <__sprint_r>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	f47f a948 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001da0:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
 8001da4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001da8:	e4e6      	b.n	8001778 <_vfprintf_r+0x9f0>
 8001daa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001dac:	4a52      	ldr	r2, [pc, #328]	; (8001ef8 <_vfprintf_r+0x1170>)
 8001dae:	f8ca 2000 	str.w	r2, [sl]
 8001db2:	3301      	adds	r3, #1
 8001db4:	3401      	adds	r4, #1
 8001db6:	2201      	movs	r2, #1
 8001db8:	2b07      	cmp	r3, #7
 8001dba:	941f      	str	r4, [sp, #124]	; 0x7c
 8001dbc:	931e      	str	r3, [sp, #120]	; 0x78
 8001dbe:	f8ca 2004 	str.w	r2, [sl, #4]
 8001dc2:	f300 811a 	bgt.w	8001ffa <_vfprintf_r+0x1272>
 8001dc6:	f10a 0a08 	add.w	sl, sl, #8
 8001dca:	2900      	cmp	r1, #0
 8001dcc:	d159      	bne.n	8001e82 <_vfprintf_r+0x10fa>
 8001dce:	9b03      	ldr	r3, [sp, #12]
 8001dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f43f a9a6 	beq.w	8001128 <_vfprintf_r+0x3a0>
 8001ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001dde:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001de0:	191a      	adds	r2, r3, r4
 8001de2:	e9ca 1300 	strd	r1, r3, [sl]
 8001de6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001de8:	921f      	str	r2, [sp, #124]	; 0x7c
 8001dea:	3301      	adds	r3, #1
 8001dec:	2b07      	cmp	r3, #7
 8001dee:	931e      	str	r3, [sp, #120]	; 0x78
 8001df0:	f300 812d 	bgt.w	800204e <_vfprintf_r+0x12c6>
 8001df4:	f10a 0a08 	add.w	sl, sl, #8
 8001df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001dfa:	f8ca 6000 	str.w	r6, [sl]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	188c      	adds	r4, r1, r2
 8001e02:	2b07      	cmp	r3, #7
 8001e04:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001e08:	f8ca 1004 	str.w	r1, [sl, #4]
 8001e0c:	f77f a98a 	ble.w	8001124 <_vfprintf_r+0x39c>
 8001e10:	e4d8      	b.n	80017c4 <_vfprintf_r+0xa3c>
 8001e12:	ee19 0a10 	vmov	r0, s18
 8001e16:	aa1d      	add	r2, sp, #116	; 0x74
 8001e18:	4641      	mov	r1, r8
 8001e1a:	9312      	str	r3, [sp, #72]	; 0x48
 8001e1c:	f003 fd36 	bl	800588c <__sprint_r>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	f47f a905 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001e26:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001e2a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001e2e:	f7ff b935 	b.w	800109c <_vfprintf_r+0x314>
 8001e32:	3301      	adds	r3, #1
 8001e34:	442c      	add	r4, r5
 8001e36:	2b07      	cmp	r3, #7
 8001e38:	f8ca 7000 	str.w	r7, [sl]
 8001e3c:	f8ca 5004 	str.w	r5, [sl, #4]
 8001e40:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001e44:	f77f a96e 	ble.w	8001124 <_vfprintf_r+0x39c>
 8001e48:	e4bc      	b.n	80017c4 <_vfprintf_r+0xa3c>
 8001e4a:	ee19 0a10 	vmov	r0, s18
 8001e4e:	aa1d      	add	r2, sp, #116	; 0x74
 8001e50:	4641      	mov	r1, r8
 8001e52:	f003 fd1b 	bl	800588c <__sprint_r>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	f47f a8ea 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001e5c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001e5e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001e62:	f7ff bb89 	b.w	8001578 <_vfprintf_r+0x7f0>
 8001e66:	ee19 0a10 	vmov	r0, s18
 8001e6a:	aa1d      	add	r2, sp, #116	; 0x74
 8001e6c:	4641      	mov	r1, r8
 8001e6e:	f003 fd0d 	bl	800588c <__sprint_r>
 8001e72:	2800      	cmp	r0, #0
 8001e74:	f47f a8dc 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001e78:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8001e7a:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001e7e:	f7ff b938 	b.w	80010f2 <_vfprintf_r+0x36a>
 8001e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001e86:	191a      	adds	r2, r3, r4
 8001e88:	e9ca 0300 	strd	r0, r3, [sl]
 8001e8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001e8e:	921f      	str	r2, [sp, #124]	; 0x7c
 8001e90:	3301      	adds	r3, #1
 8001e92:	2b07      	cmp	r3, #7
 8001e94:	931e      	str	r3, [sp, #120]	; 0x78
 8001e96:	f300 80da 	bgt.w	800204e <_vfprintf_r+0x12c6>
 8001e9a:	f10a 0a08 	add.w	sl, sl, #8
 8001e9e:	2900      	cmp	r1, #0
 8001ea0:	daaa      	bge.n	8001df8 <_vfprintf_r+0x1070>
 8001ea2:	424d      	negs	r5, r1
 8001ea4:	3110      	adds	r1, #16
 8001ea6:	4f13      	ldr	r7, [pc, #76]	; (8001ef4 <_vfprintf_r+0x116c>)
 8001ea8:	f280 8178 	bge.w	800219c <_vfprintf_r+0x1414>
 8001eac:	ee19 ba10 	vmov	fp, s18
 8001eb0:	2410      	movs	r4, #16
 8001eb2:	e005      	b.n	8001ec0 <_vfprintf_r+0x1138>
 8001eb4:	f10a 0a08 	add.w	sl, sl, #8
 8001eb8:	3d10      	subs	r5, #16
 8001eba:	2d10      	cmp	r5, #16
 8001ebc:	f340 816e 	ble.w	800219c <_vfprintf_r+0x1414>
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	3210      	adds	r2, #16
 8001ec4:	2b07      	cmp	r3, #7
 8001ec6:	e9ca 7400 	strd	r7, r4, [sl]
 8001eca:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
 8001ece:	ddf1      	ble.n	8001eb4 <_vfprintf_r+0x112c>
 8001ed0:	aa1d      	add	r2, sp, #116	; 0x74
 8001ed2:	4641      	mov	r1, r8
 8001ed4:	4658      	mov	r0, fp
 8001ed6:	f003 fcd9 	bl	800588c <__sprint_r>
 8001eda:	2800      	cmp	r0, #0
 8001edc:	f47f a8a8 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8001ee0:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8001ee4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8001ee8:	e7e6      	b.n	8001eb8 <_vfprintf_r+0x1130>
 8001eea:	bf00      	nop
 8001eec:	66666667 	.word	0x66666667
 8001ef0:	0801cb08 	.word	0x0801cb08
 8001ef4:	0800d3c4 	.word	0x0800d3c4
 8001ef8:	0801cb10 	.word	0x0801cb10
 8001efc:	4630      	mov	r0, r6
 8001efe:	9409      	str	r4, [sp, #36]	; 0x24
 8001f00:	9705      	str	r7, [sp, #20]
 8001f02:	f8cd b00c 	str.w	fp, [sp, #12]
 8001f06:	f7fe fddb 	bl	8000ac0 <strlen>
 8001f0a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8001f0e:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8001f12:	9008      	str	r0, [sp, #32]
 8001f14:	9304      	str	r3, [sp, #16]
 8001f16:	970a      	str	r7, [sp, #40]	; 0x28
 8001f18:	f7ff b96f 	b.w	80011fa <_vfprintf_r+0x472>
 8001f1c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001f20:	f8ca 7000 	str.w	r7, [sl]
 8001f24:	3501      	adds	r5, #1
 8001f26:	4434      	add	r4, r6
 8001f28:	2d07      	cmp	r5, #7
 8001f2a:	e9cd 541e 	strd	r5, r4, [sp, #120]	; 0x78
 8001f2e:	f8ca 6004 	str.w	r6, [sl, #4]
 8001f32:	f77f ac38 	ble.w	80017a6 <_vfprintf_r+0xa1e>
 8001f36:	e585      	b.n	8001a44 <_vfprintf_r+0xcbc>
 8001f38:	9c05      	ldr	r4, [sp, #20]
 8001f3a:	eeb0 0a4a 	vmov.f32	s0, s20
 8001f3e:	eef0 0a6a 	vmov.f32	s1, s21
 8001f42:	ab1b      	add	r3, sp, #108	; 0x6c
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	ab18      	add	r3, sp, #96	; 0x60
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	ab17      	add	r3, sp, #92	; 0x5c
 8001f4e:	ee19 0a10 	vmov	r0, s18
 8001f52:	2103      	movs	r1, #3
 8001f54:	f000 fb18 	bl	8002588 <_dtoa_r>
 8001f58:	4606      	mov	r6, r0
 8001f5a:	1904      	adds	r4, r0, r4
 8001f5c:	7833      	ldrb	r3, [r6, #0]
 8001f5e:	2b30      	cmp	r3, #48	; 0x30
 8001f60:	d062      	beq.n	8002028 <_vfprintf_r+0x12a0>
 8001f62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001f64:	441c      	add	r4, r3
 8001f66:	ec51 0b1a 	vmov	r0, r1, d10
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f005 fc89 	bl	8007884 <__aeabi_dcmpeq>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	f000 808b 	beq.w	800208e <_vfprintf_r+0x1306>
 8001f78:	4623      	mov	r3, r4
 8001f7a:	1b9b      	subs	r3, r3, r6
 8001f7c:	2f47      	cmp	r7, #71	; 0x47
 8001f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f80:	f43f ae17 	beq.w	8001bb2 <_vfprintf_r+0xe2a>
 8001f84:	2d66      	cmp	r5, #102	; 0x66
 8001f86:	f040 8182 	bne.w	800228e <_vfprintf_r+0x1506>
 8001f8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001f8c:	9a05      	ldr	r2, [sp, #20]
 8001f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f00b 0b01 	and.w	fp, fp, #1
 8001f96:	f340 815c 	ble.w	8002252 <_vfprintf_r+0x14ca>
 8001f9a:	ea5b 0102 	orrs.w	r1, fp, r2
 8001f9e:	f040 8145 	bne.w	800222c <_vfprintf_r+0x14a4>
 8001fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fa4:	9304      	str	r3, [sp, #16]
 8001fa6:	9308      	str	r3, [sp, #32]
 8001fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d07b      	beq.n	80020a6 <_vfprintf_r+0x131e>
 8001fae:	232d      	movs	r3, #45	; 0x2d
 8001fb0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9305      	str	r3, [sp, #20]
 8001fb8:	f7ff b922 	b.w	8001200 <_vfprintf_r+0x478>
 8001fbc:	4642      	mov	r2, r8
 8001fbe:	9e05      	ldr	r6, [sp, #20]
 8001fc0:	46b8      	mov	r8, r7
 8001fc2:	4617      	mov	r7, r2
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	442c      	add	r4, r5
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8001fce:	f8ca 7000 	str.w	r7, [sl]
 8001fd2:	f8ca 5004 	str.w	r5, [sl, #4]
 8001fd6:	dc49      	bgt.n	800206c <_vfprintf_r+0x12e4>
 8001fd8:	f10a 0a08 	add.w	sl, sl, #8
 8001fdc:	e4c3      	b.n	8001966 <_vfprintf_r+0xbde>
 8001fde:	242d      	movs	r4, #45	; 0x2d
 8001fe0:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
 8001fe4:	f7ff b8fb 	b.w	80011de <_vfprintf_r+0x456>
 8001fe8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001fec:	ee0a 3a90 	vmov	s21, r3
 8001ff0:	232d      	movs	r3, #45	; 0x2d
 8001ff2:	ee0a 0a10 	vmov	s20, r0
 8001ff6:	9312      	str	r3, [sp, #72]	; 0x48
 8001ff8:	e5b2      	b.n	8001b60 <_vfprintf_r+0xdd8>
 8001ffa:	ee19 0a10 	vmov	r0, s18
 8001ffe:	aa1d      	add	r2, sp, #116	; 0x74
 8002000:	4641      	mov	r1, r8
 8002002:	f003 fc43 	bl	800588c <__sprint_r>
 8002006:	2800      	cmp	r0, #0
 8002008:	f47f a812 	bne.w	8001030 <_vfprintf_r+0x2a8>
 800200c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800200e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8002010:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002014:	e6d9      	b.n	8001dca <_vfprintf_r+0x1042>
 8002016:	2d47      	cmp	r5, #71	; 0x47
 8002018:	f43f adc0 	beq.w	8001b9c <_vfprintf_r+0xe14>
 800201c:	4434      	add	r4, r6
 800201e:	e7a2      	b.n	8001f66 <_vfprintf_r+0x11de>
 8002020:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8002024:	f7ff b817 	b.w	8001056 <_vfprintf_r+0x2ce>
 8002028:	ec51 0b1a 	vmov	r0, r1, d10
 800202c:	2200      	movs	r2, #0
 800202e:	2300      	movs	r3, #0
 8002030:	f005 fc28 	bl	8007884 <__aeabi_dcmpeq>
 8002034:	2800      	cmp	r0, #0
 8002036:	d194      	bne.n	8001f62 <_vfprintf_r+0x11da>
 8002038:	9b05      	ldr	r3, [sp, #20]
 800203a:	f1c3 0301 	rsb	r3, r3, #1
 800203e:	9317      	str	r3, [sp, #92]	; 0x5c
 8002040:	e790      	b.n	8001f64 <_vfprintf_r+0x11dc>
 8002042:	9b05      	ldr	r3, [sp, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf08      	it	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	9305      	str	r3, [sp, #20]
 800204c:	e578      	b.n	8001b40 <_vfprintf_r+0xdb8>
 800204e:	ee19 0a10 	vmov	r0, s18
 8002052:	aa1d      	add	r2, sp, #116	; 0x74
 8002054:	4641      	mov	r1, r8
 8002056:	f003 fc19 	bl	800588c <__sprint_r>
 800205a:	2800      	cmp	r0, #0
 800205c:	f47e afe8 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8002060:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8002064:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002066:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800206a:	e718      	b.n	8001e9e <_vfprintf_r+0x1116>
 800206c:	ee19 0a10 	vmov	r0, s18
 8002070:	aa1d      	add	r2, sp, #116	; 0x74
 8002072:	4641      	mov	r1, r8
 8002074:	f003 fc0a 	bl	800588c <__sprint_r>
 8002078:	2800      	cmp	r0, #0
 800207a:	f47e afd9 	bne.w	8001030 <_vfprintf_r+0x2a8>
 800207e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8002080:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002084:	e46f      	b.n	8001966 <_vfprintf_r+0xbde>
 8002086:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800208a:	f7ff b903 	b.w	8001294 <_vfprintf_r+0x50c>
 800208e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002090:	42a3      	cmp	r3, r4
 8002092:	f4bf af72 	bcs.w	8001f7a <_vfprintf_r+0x11f2>
 8002096:	2130      	movs	r1, #48	; 0x30
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	921b      	str	r2, [sp, #108]	; 0x6c
 800209c:	7019      	strb	r1, [r3, #0]
 800209e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80020a0:	429c      	cmp	r4, r3
 80020a2:	d8f9      	bhi.n	8002098 <_vfprintf_r+0x1310>
 80020a4:	e769      	b.n	8001f7a <_vfprintf_r+0x11f2>
 80020a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80020a8:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 80020ac:	9305      	str	r3, [sp, #20]
 80020ae:	f7ff b8a4 	b.w	80011fa <_vfprintf_r+0x472>
 80020b2:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 80020b6:	4293      	cmp	r3, r2
 80020b8:	db43      	blt.n	8002142 <_vfprintf_r+0x13ba>
 80020ba:	f01b 0f01 	tst.w	fp, #1
 80020be:	f040 80ac 	bne.w	800221a <_vfprintf_r+0x1492>
 80020c2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80020c6:	9204      	str	r2, [sp, #16]
 80020c8:	9308      	str	r3, [sp, #32]
 80020ca:	2567      	movs	r5, #103	; 0x67
 80020cc:	e76c      	b.n	8001fa8 <_vfprintf_r+0x1220>
 80020ce:	ee19 0a10 	vmov	r0, s18
 80020d2:	aa1d      	add	r2, sp, #116	; 0x74
 80020d4:	4641      	mov	r1, r8
 80020d6:	f003 fbd9 	bl	800588c <__sprint_r>
 80020da:	2800      	cmp	r0, #0
 80020dc:	f47e afa8 	bne.w	8001030 <_vfprintf_r+0x2a8>
 80020e0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80020e2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80020e4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80020e8:	e450      	b.n	800198c <_vfprintf_r+0xc04>
 80020ea:	ee19 0a10 	vmov	r0, s18
 80020ee:	aa1d      	add	r2, sp, #116	; 0x74
 80020f0:	4641      	mov	r1, r8
 80020f2:	f003 fbcb 	bl	800588c <__sprint_r>
 80020f6:	2800      	cmp	r0, #0
 80020f8:	f47e af9a 	bne.w	8001030 <_vfprintf_r+0x2a8>
 80020fc:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80020fe:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002102:	e429      	b.n	8001958 <_vfprintf_r+0xbd0>
 8002104:	ee19 0a10 	vmov	r0, s18
 8002108:	aa1d      	add	r2, sp, #116	; 0x74
 800210a:	4641      	mov	r1, r8
 800210c:	f003 fbbe 	bl	800588c <__sprint_r>
 8002110:	2800      	cmp	r0, #0
 8002112:	f47e af8d 	bne.w	8001030 <_vfprintf_r+0x2a8>
 8002116:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800211a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800211c:	1b5d      	subs	r5, r3, r5
 800211e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8002122:	e44b      	b.n	80019bc <_vfprintf_r+0xc34>
 8002124:	2306      	movs	r3, #6
 8002126:	9305      	str	r3, [sp, #20]
 8002128:	e50a      	b.n	8001b40 <_vfprintf_r+0xdb8>
 800212a:	9b05      	ldr	r3, [sp, #20]
 800212c:	9409      	str	r4, [sp, #36]	; 0x24
 800212e:	f8cd b00c 	str.w	fp, [sp, #12]
 8002132:	f89d 4057 	ldrb.w	r4, [sp, #87]	; 0x57
 8002136:	9304      	str	r3, [sp, #16]
 8002138:	9308      	str	r3, [sp, #32]
 800213a:	9005      	str	r0, [sp, #20]
 800213c:	900a      	str	r0, [sp, #40]	; 0x28
 800213e:	f7ff b85c 	b.w	80011fa <_vfprintf_r+0x472>
 8002142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002146:	4413      	add	r3, r2
 8002148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800214a:	9308      	str	r3, [sp, #32]
 800214c:	2a00      	cmp	r2, #0
 800214e:	dd75      	ble.n	800223c <_vfprintf_r+0x14b4>
 8002150:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002154:	9304      	str	r3, [sp, #16]
 8002156:	2567      	movs	r5, #103	; 0x67
 8002158:	e726      	b.n	8001fa8 <_vfprintf_r+0x1220>
 800215a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 800215e:	f7ff b91a 	b.w	8001396 <_vfprintf_r+0x60e>
 8002162:	2200      	movs	r2, #0
 8002164:	9205      	str	r2, [sp, #20]
 8002166:	f7fe be77 	b.w	8000e58 <_vfprintf_r+0xd0>
 800216a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 800216e:	f7ff b806 	b.w	800117e <_vfprintf_r+0x3f6>
 8002172:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8002176:	f7ff b94f 	b.w	8001418 <_vfprintf_r+0x690>
 800217a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 800217e:	f7ff b8cc 	b.w	800131a <_vfprintf_r+0x592>
 8002182:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8002186:	f7ff b96a 	b.w	800145e <_vfprintf_r+0x6d6>
 800218a:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 800218e:	f7ff b85d 	b.w	800124c <_vfprintf_r+0x4c4>
 8002192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002196:	9307      	str	r3, [sp, #28]
 8002198:	f7fe bf4f 	b.w	800103a <_vfprintf_r+0x2b2>
 800219c:	3301      	adds	r3, #1
 800219e:	442a      	add	r2, r5
 80021a0:	2b07      	cmp	r3, #7
 80021a2:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
 80021a6:	f8ca 7000 	str.w	r7, [sl]
 80021aa:	f8ca 5004 	str.w	r5, [sl, #4]
 80021ae:	f77f ae21 	ble.w	8001df4 <_vfprintf_r+0x106c>
 80021b2:	ee19 0a10 	vmov	r0, s18
 80021b6:	aa1d      	add	r2, sp, #116	; 0x74
 80021b8:	4641      	mov	r1, r8
 80021ba:	f003 fb67 	bl	800588c <__sprint_r>
 80021be:	2800      	cmp	r0, #0
 80021c0:	f47e af36 	bne.w	8001030 <_vfprintf_r+0x2a8>
 80021c4:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 80021c8:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80021cc:	e614      	b.n	8001df8 <_vfprintf_r+0x1070>
 80021ce:	3330      	adds	r3, #48	; 0x30
 80021d0:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80021d4:	2330      	movs	r3, #48	; 0x30
 80021d6:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 80021da:	2304      	movs	r3, #4
 80021dc:	9311      	str	r3, [sp, #68]	; 0x44
 80021de:	e533      	b.n	8001c48 <_vfprintf_r+0xec0>
 80021e0:	46b8      	mov	r8, r7
 80021e2:	f7fe bf25 	b.w	8001030 <_vfprintf_r+0x2a8>
 80021e6:	f01b 0201 	ands.w	r2, fp, #1
 80021ea:	920a      	str	r2, [sp, #40]	; 0x28
 80021ec:	f47f ad33 	bne.w	8001c56 <_vfprintf_r+0xece>
 80021f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021f4:	9304      	str	r3, [sp, #16]
 80021f6:	e6d7      	b.n	8001fa8 <_vfprintf_r+0x1220>
 80021f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80021fa:	4e26      	ldr	r6, [pc, #152]	; (8002294 <_vfprintf_r+0x150c>)
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bfb8      	it	lt
 8002200:	242d      	movlt	r4, #45	; 0x2d
 8002202:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8002206:	9303      	str	r3, [sp, #12]
 8002208:	bfa8      	it	ge
 800220a:	f89d 4057 	ldrbge.w	r4, [sp, #87]	; 0x57
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <_vfprintf_r+0x1510>)
 8002210:	bfb8      	it	lt
 8002212:	f88d 4057 	strblt.w	r4, [sp, #87]	; 0x57
 8002216:	f7fe bfe7 	b.w	80011e8 <_vfprintf_r+0x460>
 800221a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800221c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800221e:	4413      	add	r3, r2
 8002220:	9308      	str	r3, [sp, #32]
 8002222:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002226:	9304      	str	r3, [sp, #16]
 8002228:	2567      	movs	r5, #103	; 0x67
 800222a:	e6bd      	b.n	8001fa8 <_vfprintf_r+0x1220>
 800222c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800222e:	440b      	add	r3, r1
 8002230:	441a      	add	r2, r3
 8002232:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8002236:	9208      	str	r2, [sp, #32]
 8002238:	9304      	str	r3, [sp, #16]
 800223a:	e6b5      	b.n	8001fa8 <_vfprintf_r+0x1220>
 800223c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800223e:	9a08      	ldr	r2, [sp, #32]
 8002240:	f1c3 0301 	rsb	r3, r3, #1
 8002244:	441a      	add	r2, r3
 8002246:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800224a:	9208      	str	r2, [sp, #32]
 800224c:	9304      	str	r3, [sp, #16]
 800224e:	2567      	movs	r5, #103	; 0x67
 8002250:	e6aa      	b.n	8001fa8 <_vfprintf_r+0x1220>
 8002252:	ea5b 0302 	orrs.w	r3, fp, r2
 8002256:	d103      	bne.n	8002260 <_vfprintf_r+0x14d8>
 8002258:	2301      	movs	r3, #1
 800225a:	9304      	str	r3, [sp, #16]
 800225c:	9308      	str	r3, [sp, #32]
 800225e:	e6a3      	b.n	8001fa8 <_vfprintf_r+0x1220>
 8002260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002262:	3301      	adds	r3, #1
 8002264:	441a      	add	r2, r3
 8002266:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800226a:	9208      	str	r2, [sp, #32]
 800226c:	9304      	str	r3, [sp, #16]
 800226e:	e69b      	b.n	8001fa8 <_vfprintf_r+0x1220>
 8002270:	2302      	movs	r3, #2
 8002272:	9311      	str	r3, [sp, #68]	; 0x44
 8002274:	e4e8      	b.n	8001c48 <_vfprintf_r+0xec0>
 8002276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002278:	f899 5001 	ldrb.w	r5, [r9, #1]
 800227c:	4689      	mov	r9, r1
 800227e:	f852 1b04 	ldr.w	r1, [r2], #4
 8002282:	9209      	str	r2, [sp, #36]	; 0x24
 8002284:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 8002288:	9105      	str	r1, [sp, #20]
 800228a:	f7fe bde3 	b.w	8000e54 <_vfprintf_r+0xcc>
 800228e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002290:	930a      	str	r3, [sp, #40]	; 0x28
 8002292:	e497      	b.n	8001bc4 <_vfprintf_r+0xe3c>
 8002294:	0801cad8 	.word	0x0801cad8
 8002298:	0801cadc 	.word	0x0801cadc

0800229c <vfprintf>:
 800229c:	b410      	push	{r4}
 800229e:	4c05      	ldr	r4, [pc, #20]	; (80022b4 <vfprintf+0x18>)
 80022a0:	4684      	mov	ip, r0
 80022a2:	4613      	mov	r3, r2
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022aa:	460a      	mov	r2, r1
 80022ac:	4661      	mov	r1, ip
 80022ae:	f7fe bd6b 	b.w	8000d88 <_vfprintf_r>
 80022b2:	bf00      	nop
 80022b4:	20000010 	.word	0x20000010

080022b8 <__sbprintf>:
 80022b8:	b570      	push	{r4, r5, r6, lr}
 80022ba:	460c      	mov	r4, r1
 80022bc:	8989      	ldrh	r1, [r1, #12]
 80022be:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80022c2:	f021 0102 	bic.w	r1, r1, #2
 80022c6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80022ca:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80022cc:	9119      	str	r1, [sp, #100]	; 0x64
 80022ce:	89e1      	ldrh	r1, [r4, #14]
 80022d0:	f8ad 100e 	strh.w	r1, [sp, #14]
 80022d4:	69e1      	ldr	r1, [r4, #28]
 80022d6:	9107      	str	r1, [sp, #28]
 80022d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80022da:	9109      	str	r1, [sp, #36]	; 0x24
 80022dc:	a91a      	add	r1, sp, #104	; 0x68
 80022de:	9100      	str	r1, [sp, #0]
 80022e0:	9104      	str	r1, [sp, #16]
 80022e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e6:	9102      	str	r1, [sp, #8]
 80022e8:	9105      	str	r1, [sp, #20]
 80022ea:	2100      	movs	r1, #0
 80022ec:	9106      	str	r1, [sp, #24]
 80022ee:	4669      	mov	r1, sp
 80022f0:	4606      	mov	r6, r0
 80022f2:	f7fe fd49 	bl	8000d88 <_vfprintf_r>
 80022f6:	1e05      	subs	r5, r0, #0
 80022f8:	db07      	blt.n	800230a <__sbprintf+0x52>
 80022fa:	4669      	mov	r1, sp
 80022fc:	4630      	mov	r0, r6
 80022fe:	f001 f979 	bl	80035f4 <_fflush_r>
 8002302:	2800      	cmp	r0, #0
 8002304:	bf18      	it	ne
 8002306:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800230a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800230e:	065b      	lsls	r3, r3, #25
 8002310:	d503      	bpl.n	800231a <__sbprintf+0x62>
 8002312:	89a3      	ldrh	r3, [r4, #12]
 8002314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002318:	81a3      	strh	r3, [r4, #12]
 800231a:	4628      	mov	r0, r5
 800231c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	bf00      	nop

08002324 <__swsetup_r>:
 8002324:	b538      	push	{r3, r4, r5, lr}
 8002326:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <__swsetup_r+0xd0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4605      	mov	r5, r0
 800232c:	460c      	mov	r4, r1
 800232e:	b10b      	cbz	r3, 8002334 <__swsetup_r+0x10>
 8002330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002332:	b312      	cbz	r2, 800237a <__swsetup_r+0x56>
 8002334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002338:	0718      	lsls	r0, r3, #28
 800233a:	b29a      	uxth	r2, r3
 800233c:	d525      	bpl.n	800238a <__swsetup_r+0x66>
 800233e:	6921      	ldr	r1, [r4, #16]
 8002340:	2900      	cmp	r1, #0
 8002342:	d02d      	beq.n	80023a0 <__swsetup_r+0x7c>
 8002344:	f012 0001 	ands.w	r0, r2, #1
 8002348:	d007      	beq.n	800235a <__swsetup_r+0x36>
 800234a:	2000      	movs	r0, #0
 800234c:	60a0      	str	r0, [r4, #8]
 800234e:	6960      	ldr	r0, [r4, #20]
 8002350:	4240      	negs	r0, r0
 8002352:	61a0      	str	r0, [r4, #24]
 8002354:	b139      	cbz	r1, 8002366 <__swsetup_r+0x42>
 8002356:	2000      	movs	r0, #0
 8002358:	bd38      	pop	{r3, r4, r5, pc}
 800235a:	0795      	lsls	r5, r2, #30
 800235c:	bf58      	it	pl
 800235e:	6960      	ldrpl	r0, [r4, #20]
 8002360:	60a0      	str	r0, [r4, #8]
 8002362:	2900      	cmp	r1, #0
 8002364:	d1f7      	bne.n	8002356 <__swsetup_r+0x32>
 8002366:	0612      	lsls	r2, r2, #24
 8002368:	bf58      	it	pl
 800236a:	4608      	movpl	r0, r1
 800236c:	d5f4      	bpl.n	8002358 <__swsetup_r+0x34>
 800236e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002372:	81a3      	strh	r3, [r4, #12]
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002378:	bd38      	pop	{r3, r4, r5, pc}
 800237a:	4618      	mov	r0, r3
 800237c:	f001 fa64 	bl	8003848 <__sinit>
 8002380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002384:	0718      	lsls	r0, r3, #28
 8002386:	b29a      	uxth	r2, r3
 8002388:	d4d9      	bmi.n	800233e <__swsetup_r+0x1a>
 800238a:	06d1      	lsls	r1, r2, #27
 800238c:	d52a      	bpl.n	80023e4 <__swsetup_r+0xc0>
 800238e:	0752      	lsls	r2, r2, #29
 8002390:	d414      	bmi.n	80023bc <__swsetup_r+0x98>
 8002392:	6921      	ldr	r1, [r4, #16]
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	81a3      	strh	r3, [r4, #12]
 800239a:	b29a      	uxth	r2, r3
 800239c:	2900      	cmp	r1, #0
 800239e:	d1d1      	bne.n	8002344 <__swsetup_r+0x20>
 80023a0:	f402 7020 	and.w	r0, r2, #640	; 0x280
 80023a4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80023a8:	d0cc      	beq.n	8002344 <__swsetup_r+0x20>
 80023aa:	4621      	mov	r1, r4
 80023ac:	4628      	mov	r0, r5
 80023ae:	f001 fd87 	bl	8003ec0 <__smakebuf_r>
 80023b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023b6:	6921      	ldr	r1, [r4, #16]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	e7c3      	b.n	8002344 <__swsetup_r+0x20>
 80023bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80023be:	b151      	cbz	r1, 80023d6 <__swsetup_r+0xb2>
 80023c0:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80023c4:	4291      	cmp	r1, r2
 80023c6:	d004      	beq.n	80023d2 <__swsetup_r+0xae>
 80023c8:	4628      	mov	r0, r5
 80023ca:	f001 faad 	bl	8003928 <_free_r>
 80023ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	6322      	str	r2, [r4, #48]	; 0x30
 80023d6:	6921      	ldr	r1, [r4, #16]
 80023d8:	2200      	movs	r2, #0
 80023da:	e9c4 1200 	strd	r1, r2, [r4]
 80023de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023e2:	e7d7      	b.n	8002394 <__swsetup_r+0x70>
 80023e4:	2209      	movs	r2, #9
 80023e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ea:	602a      	str	r2, [r5, #0]
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f0:	81a3      	strh	r3, [r4, #12]
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
 80023f4:	20000010 	.word	0x20000010

080023f8 <__register_exitproc>:
 80023f8:	b470      	push	{r4, r5, r6}
 80023fa:	4c18      	ldr	r4, [pc, #96]	; (800245c <__register_exitproc+0x64>)
 80023fc:	6825      	ldr	r5, [r4, #0]
 80023fe:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8002402:	b31c      	cbz	r4, 800244c <__register_exitproc+0x54>
 8002404:	6865      	ldr	r5, [r4, #4]
 8002406:	2d1f      	cmp	r5, #31
 8002408:	dc25      	bgt.n	8002456 <__register_exitproc+0x5e>
 800240a:	b938      	cbnz	r0, 800241c <__register_exitproc+0x24>
 800240c:	1cab      	adds	r3, r5, #2
 800240e:	3501      	adds	r5, #1
 8002410:	6065      	str	r5, [r4, #4]
 8002412:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8002416:	2000      	movs	r0, #0
 8002418:	bc70      	pop	{r4, r5, r6}
 800241a:	4770      	bx	lr
 800241c:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 8002420:	2802      	cmp	r0, #2
 8002422:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
 8002426:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 800242a:	f04f 0201 	mov.w	r2, #1
 800242e:	fa02 f205 	lsl.w	r2, r2, r5
 8002432:	ea46 0602 	orr.w	r6, r6, r2
 8002436:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 800243a:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
 800243e:	d1e5      	bne.n	800240c <__register_exitproc+0x14>
 8002440:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800244a:	e7df      	b.n	800240c <__register_exitproc+0x14>
 800244c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8002450:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8002454:	e7d6      	b.n	8002404 <__register_exitproc+0xc>
 8002456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800245a:	e7dd      	b.n	8002418 <__register_exitproc+0x20>
 800245c:	0800d3b0 	.word	0x0800d3b0

08002460 <quorem>:
 8002460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002464:	6903      	ldr	r3, [r0, #16]
 8002466:	690c      	ldr	r4, [r1, #16]
 8002468:	42a3      	cmp	r3, r4
 800246a:	b083      	sub	sp, #12
 800246c:	f2c0 8087 	blt.w	800257e <quorem+0x11e>
 8002470:	3c01      	subs	r4, #1
 8002472:	f101 0514 	add.w	r5, r1, #20
 8002476:	00a3      	lsls	r3, r4, #2
 8002478:	f100 0814 	add.w	r8, r0, #20
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002482:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8002486:	3301      	adds	r3, #1
 8002488:	4681      	mov	r9, r0
 800248a:	429a      	cmp	r2, r3
 800248c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 8002490:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8002494:	9001      	str	r0, [sp, #4]
 8002496:	fbb2 f6f3 	udiv	r6, r2, r3
 800249a:	d33b      	bcc.n	8002514 <quorem+0xb4>
 800249c:	2300      	movs	r3, #0
 800249e:	46ae      	mov	lr, r5
 80024a0:	4640      	mov	r0, r8
 80024a2:	469b      	mov	fp, r3
 80024a4:	f85e ab04 	ldr.w	sl, [lr], #4
 80024a8:	6802      	ldr	r2, [r0, #0]
 80024aa:	fa1f fc8a 	uxth.w	ip, sl
 80024ae:	fb06 330c 	mla	r3, r6, ip, r3
 80024b2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80024b6:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 80024ba:	fb06 ca0a 	mla	sl, r6, sl, ip
 80024be:	fa1f fc83 	uxth.w	ip, r3
 80024c2:	ebab 0c0c 	sub.w	ip, fp, ip
 80024c6:	fa1f f38a 	uxth.w	r3, sl
 80024ca:	fa1c fc82 	uxtah	ip, ip, r2
 80024ce:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
 80024d2:	eb02 422c 	add.w	r2, r2, ip, asr #16
 80024d6:	fa1f fc8c 	uxth.w	ip, ip
 80024da:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
 80024de:	4577      	cmp	r7, lr
 80024e0:	f840 3b04 	str.w	r3, [r0], #4
 80024e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80024e8:	ea4f 431a 	mov.w	r3, sl, lsr #16
 80024ec:	d2da      	bcs.n	80024a4 <quorem+0x44>
 80024ee:	9b00      	ldr	r3, [sp, #0]
 80024f0:	f858 3003 	ldr.w	r3, [r8, r3]
 80024f4:	b973      	cbnz	r3, 8002514 <quorem+0xb4>
 80024f6:	9b01      	ldr	r3, [sp, #4]
 80024f8:	3b04      	subs	r3, #4
 80024fa:	4598      	cmp	r8, r3
 80024fc:	d304      	bcc.n	8002508 <quorem+0xa8>
 80024fe:	e007      	b.n	8002510 <quorem+0xb0>
 8002500:	4598      	cmp	r8, r3
 8002502:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002506:	d203      	bcs.n	8002510 <quorem+0xb0>
 8002508:	f853 2904 	ldr.w	r2, [r3], #-4
 800250c:	2a00      	cmp	r2, #0
 800250e:	d0f7      	beq.n	8002500 <quorem+0xa0>
 8002510:	f8c9 4010 	str.w	r4, [r9, #16]
 8002514:	4648      	mov	r0, r9
 8002516:	f002 fc7f 	bl	8004e18 <__mcmp>
 800251a:	2800      	cmp	r0, #0
 800251c:	db2b      	blt.n	8002576 <quorem+0x116>
 800251e:	3601      	adds	r6, #1
 8002520:	4640      	mov	r0, r8
 8002522:	2300      	movs	r3, #0
 8002524:	f855 1b04 	ldr.w	r1, [r5], #4
 8002528:	f8d0 c000 	ldr.w	ip, [r0]
 800252c:	b28a      	uxth	r2, r1
 800252e:	1a9a      	subs	r2, r3, r2
 8002530:	0c0b      	lsrs	r3, r1, #16
 8002532:	fa12 f28c 	uxtah	r2, r2, ip
 8002536:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
 800253a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800253e:	b292      	uxth	r2, r2
 8002540:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002544:	42af      	cmp	r7, r5
 8002546:	f840 2b04 	str.w	r2, [r0], #4
 800254a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800254e:	d2e9      	bcs.n	8002524 <quorem+0xc4>
 8002550:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8002554:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8002558:	b96a      	cbnz	r2, 8002576 <quorem+0x116>
 800255a:	3b04      	subs	r3, #4
 800255c:	4598      	cmp	r8, r3
 800255e:	d304      	bcc.n	800256a <quorem+0x10a>
 8002560:	e007      	b.n	8002572 <quorem+0x112>
 8002562:	4598      	cmp	r8, r3
 8002564:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002568:	d203      	bcs.n	8002572 <quorem+0x112>
 800256a:	f853 2904 	ldr.w	r2, [r3], #-4
 800256e:	2a00      	cmp	r2, #0
 8002570:	d0f7      	beq.n	8002562 <quorem+0x102>
 8002572:	f8c9 4010 	str.w	r4, [r9, #16]
 8002576:	4630      	mov	r0, r6
 8002578:	b003      	add	sp, #12
 800257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800257e:	2000      	movs	r0, #0
 8002580:	b003      	add	sp, #12
 8002582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002586:	bf00      	nop

08002588 <_dtoa_r>:
 8002588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800258c:	ed2d 8b06 	vpush	{d8-d10}
 8002590:	b095      	sub	sp, #84	; 0x54
 8002592:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002596:	9101      	str	r1, [sp, #4]
 8002598:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800259a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800259c:	9209      	str	r2, [sp, #36]	; 0x24
 800259e:	ec59 8b10 	vmov	r8, r9, d0
 80025a2:	4604      	mov	r4, r0
 80025a4:	9306      	str	r3, [sp, #24]
 80025a6:	b141      	cbz	r1, 80025ba <_dtoa_r+0x32>
 80025a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80025aa:	604a      	str	r2, [r1, #4]
 80025ac:	2301      	movs	r3, #1
 80025ae:	4093      	lsls	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
 80025b2:	f002 f975 	bl	80048a0 <_Bfree>
 80025b6:	2300      	movs	r3, #0
 80025b8:	6423      	str	r3, [r4, #64]	; 0x40
 80025ba:	f1b9 0a00 	subs.w	sl, r9, #0
 80025be:	bfb4      	ite	lt
 80025c0:	2301      	movlt	r3, #1
 80025c2:	2300      	movge	r3, #0
 80025c4:	602b      	str	r3, [r5, #0]
 80025c6:	4b7c      	ldr	r3, [pc, #496]	; (80027b8 <_dtoa_r+0x230>)
 80025c8:	bfbc      	itt	lt
 80025ca:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
 80025ce:	f8cd a00c 	strlt.w	sl, [sp, #12]
 80025d2:	ea33 030a 	bics.w	r3, r3, sl
 80025d6:	f000 80b2 	beq.w	800273e <_dtoa_r+0x1b6>
 80025da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80025de:	2200      	movs	r2, #0
 80025e0:	ec51 0b17 	vmov	r0, r1, d7
 80025e4:	eeb0 9a47 	vmov.f32	s18, s14
 80025e8:	eef0 9a67 	vmov.f32	s19, s15
 80025ec:	2300      	movs	r3, #0
 80025ee:	f005 f949 	bl	8007884 <__aeabi_dcmpeq>
 80025f2:	4607      	mov	r7, r0
 80025f4:	b180      	cbz	r0, 8002618 <_dtoa_r+0x90>
 80025f6:	9a06      	ldr	r2, [sp, #24]
 80025f8:	2301      	movs	r3, #1
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 82db 	beq.w	8002bba <_dtoa_r+0x632>
 8002604:	486d      	ldr	r0, [pc, #436]	; (80027bc <_dtoa_r+0x234>)
 8002606:	6018      	str	r0, [r3, #0]
 8002608:	1e43      	subs	r3, r0, #1
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	9800      	ldr	r0, [sp, #0]
 800260e:	b015      	add	sp, #84	; 0x54
 8002610:	ecbd 8b06 	vpop	{d8-d10}
 8002614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002618:	aa12      	add	r2, sp, #72	; 0x48
 800261a:	a913      	add	r1, sp, #76	; 0x4c
 800261c:	4620      	mov	r0, r4
 800261e:	eeb0 0a49 	vmov.f32	s0, s18
 8002622:	eef0 0a69 	vmov.f32	s1, s19
 8002626:	f002 fd4f 	bl	80050c8 <__d2b>
 800262a:	eeb0 8a49 	vmov.f32	s16, s18
 800262e:	eef0 8a69 	vmov.f32	s17, s19
 8002632:	ea5f 561a 	movs.w	r6, sl, lsr #20
 8002636:	4605      	mov	r5, r0
 8002638:	f040 8099 	bne.w	800276e <_dtoa_r+0x1e6>
 800263c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
 8002640:	443e      	add	r6, r7
 8002642:	f206 4032 	addw	r0, r6, #1074	; 0x432
 8002646:	2820      	cmp	r0, #32
 8002648:	f340 83ab 	ble.w	8002da2 <_dtoa_r+0x81a>
 800264c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002650:	fa0a fa00 	lsl.w	sl, sl, r0
 8002654:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8002658:	fa28 f000 	lsr.w	r0, r8, r0
 800265c:	ea4a 0000 	orr.w	r0, sl, r0
 8002660:	f004 fe2e 	bl	80072c0 <__aeabi_ui2d>
 8002664:	2301      	movs	r3, #1
 8002666:	3e01      	subs	r6, #1
 8002668:	930d      	str	r3, [sp, #52]	; 0x34
 800266a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800266e:	4b54      	ldr	r3, [pc, #336]	; (80027c0 <_dtoa_r+0x238>)
 8002670:	2200      	movs	r2, #0
 8002672:	f004 fce7 	bl	8007044 <__aeabi_dsub>
 8002676:	a34a      	add	r3, pc, #296	; (adr r3, 80027a0 <_dtoa_r+0x218>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f004 fe9a 	bl	80073b4 <__aeabi_dmul>
 8002680:	a349      	add	r3, pc, #292	; (adr r3, 80027a8 <_dtoa_r+0x220>)
 8002682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002686:	f004 fcdf 	bl	8007048 <__adddf3>
 800268a:	4680      	mov	r8, r0
 800268c:	4630      	mov	r0, r6
 800268e:	4689      	mov	r9, r1
 8002690:	f004 fe26 	bl	80072e0 <__aeabi_i2d>
 8002694:	a346      	add	r3, pc, #280	; (adr r3, 80027b0 <_dtoa_r+0x228>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	f004 fe8b 	bl	80073b4 <__aeabi_dmul>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4640      	mov	r0, r8
 80026a4:	4649      	mov	r1, r9
 80026a6:	f004 fccf 	bl	8007048 <__adddf3>
 80026aa:	4680      	mov	r8, r0
 80026ac:	4689      	mov	r9, r1
 80026ae:	f005 f931 	bl	8007914 <__aeabi_d2iz>
 80026b2:	2200      	movs	r2, #0
 80026b4:	4683      	mov	fp, r0
 80026b6:	2300      	movs	r3, #0
 80026b8:	4640      	mov	r0, r8
 80026ba:	4649      	mov	r1, r9
 80026bc:	f005 f8ec 	bl	8007898 <__aeabi_dcmplt>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	f040 826d 	bne.w	8002ba0 <_dtoa_r+0x618>
 80026c6:	f1bb 0f16 	cmp.w	fp, #22
 80026ca:	f200 825c 	bhi.w	8002b86 <_dtoa_r+0x5fe>
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <_dtoa_r+0x23c>)
 80026d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	ec51 0b19 	vmov	r0, r1, d9
 80026dc:	f005 f8dc 	bl	8007898 <__aeabi_dcmplt>
 80026e0:	2800      	cmp	r0, #0
 80026e2:	d075      	beq.n	80027d0 <_dtoa_r+0x248>
 80026e4:	2300      	movs	r3, #0
 80026e6:	1bbe      	subs	r6, r7, r6
 80026e8:	930c      	str	r3, [sp, #48]	; 0x30
 80026ea:	1e73      	subs	r3, r6, #1
 80026ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80026f0:	9304      	str	r3, [sp, #16]
 80026f2:	f100 824f 	bmi.w	8002b94 <_dtoa_r+0x60c>
 80026f6:	2300      	movs	r3, #0
 80026f8:	9308      	str	r3, [sp, #32]
 80026fa:	f1bb 0f00 	cmp.w	fp, #0
 80026fe:	da6e      	bge.n	80027de <_dtoa_r+0x256>
 8002700:	9b08      	ldr	r3, [sp, #32]
 8002702:	f8cd b014 	str.w	fp, [sp, #20]
 8002706:	eba3 030b 	sub.w	r3, r3, fp
 800270a:	9308      	str	r3, [sp, #32]
 800270c:	f1cb 0300 	rsb	r3, fp, #0
 8002710:	930b      	str	r3, [sp, #44]	; 0x2c
 8002712:	9b01      	ldr	r3, [sp, #4]
 8002714:	2b09      	cmp	r3, #9
 8002716:	f04f 0b00 	mov.w	fp, #0
 800271a:	d869      	bhi.n	80027f0 <_dtoa_r+0x268>
 800271c:	2b05      	cmp	r3, #5
 800271e:	f340 833e 	ble.w	8002d9e <_dtoa_r+0x816>
 8002722:	3b04      	subs	r3, #4
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	2600      	movs	r6, #0
 8002728:	9b01      	ldr	r3, [sp, #4]
 800272a:	3b02      	subs	r3, #2
 800272c:	2b03      	cmp	r3, #3
 800272e:	f200 8699 	bhi.w	8003464 <_dtoa_r+0xedc>
 8002732:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002736:	044e      	.short	0x044e
 8002738:	0443044b 	.word	0x0443044b
 800273c:	0426      	.short	0x0426
 800273e:	9a06      	ldr	r2, [sp, #24]
 8002740:	f242 730f 	movw	r3, #9999	; 0x270f
 8002744:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	ea5a 0308 	orrs.w	r3, sl, r8
 800274e:	d11d      	bne.n	800278c <_dtoa_r+0x204>
 8002750:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 867d 	beq.w	8003452 <_dtoa_r+0xeca>
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <_dtoa_r+0x240>)
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	3308      	adds	r3, #8
 800275e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002760:	9800      	ldr	r0, [sp, #0]
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	b015      	add	sp, #84	; 0x54
 8002766:	ecbd 8b06 	vpop	{d8-d10}
 800276a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800276e:	ee18 3a90 	vmov	r3, s17
 8002772:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002776:	ec51 0b19 	vmov	r0, r1, d9
 800277a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800277e:	970d      	str	r7, [sp, #52]	; 0x34
 8002780:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8002784:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8002786:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800278a:	e770      	b.n	800266e <_dtoa_r+0xe6>
 800278c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 83db 	bne.w	8002f4a <_dtoa_r+0x9c2>
 8002794:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <_dtoa_r+0x244>)
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	e738      	b.n	800260c <_dtoa_r+0x84>
 800279a:	bf00      	nop
 800279c:	f3af 8000 	nop.w
 80027a0:	636f4361 	.word	0x636f4361
 80027a4:	3fd287a7 	.word	0x3fd287a7
 80027a8:	8b60c8b3 	.word	0x8b60c8b3
 80027ac:	3fc68a28 	.word	0x3fc68a28
 80027b0:	509f79fb 	.word	0x509f79fb
 80027b4:	3fd34413 	.word	0x3fd34413
 80027b8:	7ff00000 	.word	0x7ff00000
 80027bc:	0801cb11 	.word	0x0801cb11
 80027c0:	3ff80000 	.word	0x3ff80000
 80027c4:	0800d3e8 	.word	0x0800d3e8
 80027c8:	0801cb18 	.word	0x0801cb18
 80027cc:	0801cb14 	.word	0x0801cb14
 80027d0:	1bbe      	subs	r6, r7, r6
 80027d2:	1e73      	subs	r3, r6, #1
 80027d4:	9304      	str	r3, [sp, #16]
 80027d6:	f100 849a 	bmi.w	800310e <_dtoa_r+0xb86>
 80027da:	900c      	str	r0, [sp, #48]	; 0x30
 80027dc:	9008      	str	r0, [sp, #32]
 80027de:	9b04      	ldr	r3, [sp, #16]
 80027e0:	445b      	add	r3, fp
 80027e2:	e9cd 3b04 	strd	r3, fp, [sp, #16]
 80027e6:	2300      	movs	r3, #0
 80027e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80027ea:	9b01      	ldr	r3, [sp, #4]
 80027ec:	2b09      	cmp	r3, #9
 80027ee:	d995      	bls.n	800271c <_dtoa_r+0x194>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2601      	movs	r6, #1
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	960a      	str	r6, [sp, #40]	; 0x28
 80027fc:	9207      	str	r2, [sp, #28]
 80027fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002800:	9b07      	ldr	r3, [sp, #28]
 8002802:	930f      	str	r3, [sp, #60]	; 0x3c
 8002804:	2100      	movs	r1, #0
 8002806:	6461      	str	r1, [r4, #68]	; 0x44
 8002808:	4620      	mov	r0, r4
 800280a:	f002 f823 	bl	8004854 <_Balloc>
 800280e:	9000      	str	r0, [sp, #0]
 8002810:	2800      	cmp	r0, #0
 8002812:	f000 862f 	beq.w	8003474 <_dtoa_r+0xeec>
 8002816:	9b00      	ldr	r3, [sp, #0]
 8002818:	6423      	str	r3, [r4, #64]	; 0x40
 800281a:	9b07      	ldr	r3, [sp, #28]
 800281c:	2b0e      	cmp	r3, #14
 800281e:	f200 80f9 	bhi.w	8002a14 <_dtoa_r+0x48c>
 8002822:	2e00      	cmp	r6, #0
 8002824:	f000 80f6 	beq.w	8002a14 <_dtoa_r+0x48c>
 8002828:	9905      	ldr	r1, [sp, #20]
 800282a:	2900      	cmp	r1, #0
 800282c:	f340 8471 	ble.w	8003112 <_dtoa_r+0xb8a>
 8002830:	4bbd      	ldr	r3, [pc, #756]	; (8002b28 <_dtoa_r+0x5a0>)
 8002832:	f001 020f 	and.w	r2, r1, #15
 8002836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800283a:	ea4f 1821 	mov.w	r8, r1, asr #4
 800283e:	05c9      	lsls	r1, r1, #23
 8002840:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002844:	f140 8403 	bpl.w	800304e <_dtoa_r+0xac6>
 8002848:	4bb8      	ldr	r3, [pc, #736]	; (8002b2c <_dtoa_r+0x5a4>)
 800284a:	ec51 0b19 	vmov	r0, r1, d9
 800284e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002852:	f004 fed9 	bl	8007608 <__aeabi_ddiv>
 8002856:	ec41 0b18 	vmov	d8, r0, r1
 800285a:	f008 080f 	and.w	r8, r8, #15
 800285e:	f04f 0a03 	mov.w	sl, #3
 8002862:	f1b8 0f00 	cmp.w	r8, #0
 8002866:	d013      	beq.n	8002890 <_dtoa_r+0x308>
 8002868:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8002b2c <_dtoa_r+0x5a4>
 800286c:	f018 0f01 	tst.w	r8, #1
 8002870:	d009      	beq.n	8002886 <_dtoa_r+0x2fe>
 8002872:	4630      	mov	r0, r6
 8002874:	4639      	mov	r1, r7
 8002876:	e9d9 2300 	ldrd	r2, r3, [r9]
 800287a:	f004 fd9b 	bl	80073b4 <__aeabi_dmul>
 800287e:	f10a 0a01 	add.w	sl, sl, #1
 8002882:	4606      	mov	r6, r0
 8002884:	460f      	mov	r7, r1
 8002886:	ea5f 0868 	movs.w	r8, r8, asr #1
 800288a:	f109 0908 	add.w	r9, r9, #8
 800288e:	d1ed      	bne.n	800286c <_dtoa_r+0x2e4>
 8002890:	ec51 0b18 	vmov	r0, r1, d8
 8002894:	4632      	mov	r2, r6
 8002896:	463b      	mov	r3, r7
 8002898:	f004 feb6 	bl	8007608 <__aeabi_ddiv>
 800289c:	ec41 0b1a 	vmov	d10, r0, r1
 80028a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028a2:	b15b      	cbz	r3, 80028bc <_dtoa_r+0x334>
 80028a4:	ec57 6b1a 	vmov	r6, r7, d10
 80028a8:	4ba1      	ldr	r3, [pc, #644]	; (8002b30 <_dtoa_r+0x5a8>)
 80028aa:	ee1a 0a10 	vmov	r0, s20
 80028ae:	2200      	movs	r2, #0
 80028b0:	4639      	mov	r1, r7
 80028b2:	f004 fff1 	bl	8007898 <__aeabi_dcmplt>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	f040 8552 	bne.w	8003360 <_dtoa_r+0xdd8>
 80028bc:	4650      	mov	r0, sl
 80028be:	f004 fd0f 	bl	80072e0 <__aeabi_i2d>
 80028c2:	ec53 2b1a 	vmov	r2, r3, d10
 80028c6:	f004 fd75 	bl	80073b4 <__aeabi_dmul>
 80028ca:	4b9a      	ldr	r3, [pc, #616]	; (8002b34 <_dtoa_r+0x5ac>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	f004 fbbb 	bl	8007048 <__adddf3>
 80028d2:	9b07      	ldr	r3, [sp, #28]
 80028d4:	4680      	mov	r8, r0
 80028d6:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 83f3 	beq.w	80030c6 <_dtoa_r+0xb3e>
 80028e0:	9b05      	ldr	r3, [sp, #20]
 80028e2:	9310      	str	r3, [sp, #64]	; 0x40
 80028e4:	9b07      	ldr	r3, [sp, #28]
 80028e6:	930e      	str	r3, [sp, #56]	; 0x38
 80028e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 84c0 	beq.w	8003270 <_dtoa_r+0xce8>
 80028f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028f2:	4b8d      	ldr	r3, [pc, #564]	; (8002b28 <_dtoa_r+0x5a0>)
 80028f4:	4990      	ldr	r1, [pc, #576]	; (8002b38 <_dtoa_r+0x5b0>)
 80028f6:	f8dd a000 	ldr.w	sl, [sp]
 80028fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80028fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002902:	2000      	movs	r0, #0
 8002904:	f004 fe80 	bl	8007608 <__aeabi_ddiv>
 8002908:	4642      	mov	r2, r8
 800290a:	464b      	mov	r3, r9
 800290c:	f004 fb9a 	bl	8007044 <__aeabi_dsub>
 8002910:	ec59 8b1a 	vmov	r8, r9, d10
 8002914:	ec41 0b18 	vmov	d8, r0, r1
 8002918:	4649      	mov	r1, r9
 800291a:	ee1a 0a10 	vmov	r0, s20
 800291e:	f004 fff9 	bl	8007914 <__aeabi_d2iz>
 8002922:	4607      	mov	r7, r0
 8002924:	f004 fcdc 	bl	80072e0 <__aeabi_i2d>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	ee1a 0a10 	vmov	r0, s20
 8002930:	4649      	mov	r1, r9
 8002932:	f004 fb87 	bl	8007044 <__aeabi_dsub>
 8002936:	3730      	adds	r7, #48	; 0x30
 8002938:	f80a 7b01 	strb.w	r7, [sl], #1
 800293c:	ec53 2b18 	vmov	r2, r3, d8
 8002940:	4606      	mov	r6, r0
 8002942:	460f      	mov	r7, r1
 8002944:	f004 ffa8 	bl	8007898 <__aeabi_dcmplt>
 8002948:	2800      	cmp	r0, #0
 800294a:	f040 8555 	bne.w	80033f8 <_dtoa_r+0xe70>
 800294e:	f04f 0800 	mov.w	r8, #0
 8002952:	ee0a 5a10 	vmov	s20, r5
 8002956:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800295a:	4655      	mov	r5, sl
 800295c:	ec5b ab18 	vmov	sl, fp, d8
 8002960:	ee08 4a10 	vmov	s16, r4
 8002964:	4644      	mov	r4, r8
 8002966:	e02a      	b.n	80029be <_dtoa_r+0x436>
 8002968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800296a:	3401      	adds	r4, #1
 800296c:	429c      	cmp	r4, r3
 800296e:	da4b      	bge.n	8002a08 <_dtoa_r+0x480>
 8002970:	4b72      	ldr	r3, [pc, #456]	; (8002b3c <_dtoa_r+0x5b4>)
 8002972:	4650      	mov	r0, sl
 8002974:	4659      	mov	r1, fp
 8002976:	2200      	movs	r2, #0
 8002978:	f004 fd1c 	bl	80073b4 <__aeabi_dmul>
 800297c:	4b6f      	ldr	r3, [pc, #444]	; (8002b3c <_dtoa_r+0x5b4>)
 800297e:	2200      	movs	r2, #0
 8002980:	4682      	mov	sl, r0
 8002982:	468b      	mov	fp, r1
 8002984:	4630      	mov	r0, r6
 8002986:	4639      	mov	r1, r7
 8002988:	f004 fd14 	bl	80073b4 <__aeabi_dmul>
 800298c:	4689      	mov	r9, r1
 800298e:	4680      	mov	r8, r0
 8002990:	f004 ffc0 	bl	8007914 <__aeabi_d2iz>
 8002994:	4607      	mov	r7, r0
 8002996:	f004 fca3 	bl	80072e0 <__aeabi_i2d>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4640      	mov	r0, r8
 80029a0:	4649      	mov	r1, r9
 80029a2:	f004 fb4f 	bl	8007044 <__aeabi_dsub>
 80029a6:	3730      	adds	r7, #48	; 0x30
 80029a8:	f805 7b01 	strb.w	r7, [r5], #1
 80029ac:	4652      	mov	r2, sl
 80029ae:	465b      	mov	r3, fp
 80029b0:	4606      	mov	r6, r0
 80029b2:	460f      	mov	r7, r1
 80029b4:	f004 ff70 	bl	8007898 <__aeabi_dcmplt>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	f040 8518 	bne.w	80033ee <_dtoa_r+0xe66>
 80029be:	4632      	mov	r2, r6
 80029c0:	463b      	mov	r3, r7
 80029c2:	495b      	ldr	r1, [pc, #364]	; (8002b30 <_dtoa_r+0x5a8>)
 80029c4:	2000      	movs	r0, #0
 80029c6:	f004 fb3d 	bl	8007044 <__aeabi_dsub>
 80029ca:	4652      	mov	r2, sl
 80029cc:	465b      	mov	r3, fp
 80029ce:	f004 ff63 	bl	8007898 <__aeabi_dcmplt>
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d0c8      	beq.n	8002968 <_dtoa_r+0x3e0>
 80029d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80029d8:	9a00      	ldr	r2, [sp, #0]
 80029da:	9305      	str	r3, [sp, #20]
 80029dc:	46aa      	mov	sl, r5
 80029de:	ee18 4a10 	vmov	r4, s16
 80029e2:	ee1a 5a10 	vmov	r5, s20
 80029e6:	e002      	b.n	80029ee <_dtoa_r+0x466>
 80029e8:	4592      	cmp	sl, r2
 80029ea:	f000 84ea 	beq.w	80033c2 <_dtoa_r+0xe3a>
 80029ee:	46d1      	mov	r9, sl
 80029f0:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 80029f4:	2b39      	cmp	r3, #57	; 0x39
 80029f6:	d0f7      	beq.n	80029e8 <_dtoa_r+0x460>
 80029f8:	3301      	adds	r3, #1
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f88a 3000 	strb.w	r3, [sl]
 8002a00:	9b05      	ldr	r3, [sp, #20]
 8002a02:	3301      	adds	r3, #1
 8002a04:	9305      	str	r3, [sp, #20]
 8002a06:	e1ab      	b.n	8002d60 <_dtoa_r+0x7d8>
 8002a08:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8002a0c:	ee1a 5a10 	vmov	r5, s20
 8002a10:	ee18 4a10 	vmov	r4, s16
 8002a14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f2c0 8094 	blt.w	8002b44 <_dtoa_r+0x5bc>
 8002a1c:	9a05      	ldr	r2, [sp, #20]
 8002a1e:	2a0e      	cmp	r2, #14
 8002a20:	f300 8090 	bgt.w	8002b44 <_dtoa_r+0x5bc>
 8002a24:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <_dtoa_r+0x5a0>)
 8002a26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	da1b      	bge.n	8002a6c <_dtoa_r+0x4e4>
 8002a34:	9b07      	ldr	r3, [sp, #28]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	dc18      	bgt.n	8002a6c <_dtoa_r+0x4e4>
 8002a3a:	f040 835d 	bne.w	80030f8 <_dtoa_r+0xb70>
 8002a3e:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <_dtoa_r+0x5b8>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	4640      	mov	r0, r8
 8002a44:	4649      	mov	r1, r9
 8002a46:	f004 fcb5 	bl	80073b4 <__aeabi_dmul>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	ec51 0b19 	vmov	r0, r1, d9
 8002a52:	f004 ff2b 	bl	80078ac <__aeabi_dcmple>
 8002a56:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8002a5a:	4656      	mov	r6, sl
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	f000 82d0 	beq.w	8003002 <_dtoa_r+0xa7a>
 8002a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a64:	f8dd 8000 	ldr.w	r8, [sp]
 8002a68:	43df      	mvns	r7, r3
 8002a6a:	e2d2      	b.n	8003012 <_dtoa_r+0xa8a>
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	464b      	mov	r3, r9
 8002a70:	ec51 0b19 	vmov	r0, r1, d9
 8002a74:	f004 fdc8 	bl	8007608 <__aeabi_ddiv>
 8002a78:	f004 ff4c 	bl	8007914 <__aeabi_d2iz>
 8002a7c:	4606      	mov	r6, r0
 8002a7e:	4683      	mov	fp, r0
 8002a80:	f004 fc2e 	bl	80072e0 <__aeabi_i2d>
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	f004 fc94 	bl	80073b4 <__aeabi_dmul>
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4602      	mov	r2, r0
 8002a90:	ec51 0b19 	vmov	r0, r1, d9
 8002a94:	f004 fad6 	bl	8007044 <__aeabi_dsub>
 8002a98:	f8dd a000 	ldr.w	sl, [sp]
 8002a9c:	4633      	mov	r3, r6
 8002a9e:	3330      	adds	r3, #48	; 0x30
 8002aa0:	f80a 3b01 	strb.w	r3, [sl], #1
 8002aa4:	9b07      	ldr	r3, [sp, #28]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f000 838e 	beq.w	80031c8 <_dtoa_r+0xc40>
 8002aac:	f04f 0b01 	mov.w	fp, #1
 8002ab0:	ee08 5a10 	vmov	s16, r5
 8002ab4:	ee08 4a90 	vmov	s17, r4
 8002ab8:	461d      	mov	r5, r3
 8002aba:	4654      	mov	r4, sl
 8002abc:	46da      	mov	sl, fp
 8002abe:	e01d      	b.n	8002afc <_dtoa_r+0x574>
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	4639      	mov	r1, r7
 8002ac8:	f004 fd9e 	bl	8007608 <__aeabi_ddiv>
 8002acc:	f004 ff22 	bl	8007914 <__aeabi_d2iz>
 8002ad0:	4683      	mov	fp, r0
 8002ad2:	f004 fc05 	bl	80072e0 <__aeabi_i2d>
 8002ad6:	4642      	mov	r2, r8
 8002ad8:	464b      	mov	r3, r9
 8002ada:	f004 fc6b 	bl	80073b4 <__aeabi_dmul>
 8002ade:	f10a 0a01 	add.w	sl, sl, #1
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4639      	mov	r1, r7
 8002ae8:	4630      	mov	r0, r6
 8002aea:	f004 faab 	bl	8007044 <__aeabi_dsub>
 8002aee:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8002af2:	45aa      	cmp	sl, r5
 8002af4:	f804 3b01 	strb.w	r3, [r4], #1
 8002af8:	f000 8361 	beq.w	80031be <_dtoa_r+0xc36>
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <_dtoa_r+0x5b4>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	f004 fc58 	bl	80073b4 <__aeabi_dmul>
 8002b04:	2200      	movs	r2, #0
 8002b06:	2300      	movs	r3, #0
 8002b08:	4606      	mov	r6, r0
 8002b0a:	460f      	mov	r7, r1
 8002b0c:	f004 feba 	bl	8007884 <__aeabi_dcmpeq>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d0d5      	beq.n	8002ac0 <_dtoa_r+0x538>
 8002b14:	46a2      	mov	sl, r4
 8002b16:	ee18 5a10 	vmov	r5, s16
 8002b1a:	ee18 4a90 	vmov	r4, s17
 8002b1e:	9b05      	ldr	r3, [sp, #20]
 8002b20:	3301      	adds	r3, #1
 8002b22:	9305      	str	r3, [sp, #20]
 8002b24:	46d1      	mov	r9, sl
 8002b26:	e11b      	b.n	8002d60 <_dtoa_r+0x7d8>
 8002b28:	0800d3e8 	.word	0x0800d3e8
 8002b2c:	0800d4d8 	.word	0x0800d4d8
 8002b30:	3ff00000 	.word	0x3ff00000
 8002b34:	401c0000 	.word	0x401c0000
 8002b38:	3fe00000 	.word	0x3fe00000
 8002b3c:	40240000 	.word	0x40240000
 8002b40:	40140000 	.word	0x40140000
 8002b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b46:	2a00      	cmp	r2, #0
 8002b48:	d03f      	beq.n	8002bca <_dtoa_r+0x642>
 8002b4a:	9a01      	ldr	r2, [sp, #4]
 8002b4c:	2a01      	cmp	r2, #1
 8002b4e:	f340 829c 	ble.w	800308a <_dtoa_r+0xb02>
 8002b52:	9b07      	ldr	r3, [sp, #28]
 8002b54:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b5a:	4543      	cmp	r3, r8
 8002b5c:	f2c0 826e 	blt.w	800303c <_dtoa_r+0xab4>
 8002b60:	eba3 0808 	sub.w	r8, r3, r8
 8002b64:	9b07      	ldr	r3, [sp, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f2c0 8366 	blt.w	8003238 <_dtoa_r+0xcb0>
 8002b6c:	9a04      	ldr	r2, [sp, #16]
 8002b6e:	441a      	add	r2, r3
 8002b70:	9204      	str	r2, [sp, #16]
 8002b72:	9a08      	ldr	r2, [sp, #32]
 8002b74:	4617      	mov	r7, r2
 8002b76:	441a      	add	r2, r3
 8002b78:	9208      	str	r2, [sp, #32]
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f001 ff97 	bl	8004ab0 <__i2b>
 8002b82:	4606      	mov	r6, r0
 8002b84:	e025      	b.n	8002bd2 <_dtoa_r+0x64a>
 8002b86:	2301      	movs	r3, #1
 8002b88:	1bbe      	subs	r6, r7, r6
 8002b8a:	930c      	str	r3, [sp, #48]	; 0x30
 8002b8c:	1e73      	subs	r3, r6, #1
 8002b8e:	9304      	str	r3, [sp, #16]
 8002b90:	f57f adb1 	bpl.w	80026f6 <_dtoa_r+0x16e>
 8002b94:	f1c6 0301 	rsb	r3, r6, #1
 8002b98:	9308      	str	r3, [sp, #32]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9304      	str	r3, [sp, #16]
 8002b9e:	e5ac      	b.n	80026fa <_dtoa_r+0x172>
 8002ba0:	4658      	mov	r0, fp
 8002ba2:	f004 fb9d 	bl	80072e0 <__aeabi_i2d>
 8002ba6:	4642      	mov	r2, r8
 8002ba8:	464b      	mov	r3, r9
 8002baa:	f004 fe6b 	bl	8007884 <__aeabi_dcmpeq>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	f47f ad89 	bne.w	80026c6 <_dtoa_r+0x13e>
 8002bb4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002bb8:	e585      	b.n	80026c6 <_dtoa_r+0x13e>
 8002bba:	4b87      	ldr	r3, [pc, #540]	; (8002dd8 <_dtoa_r+0x850>)
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	9800      	ldr	r0, [sp, #0]
 8002bc0:	b015      	add	sp, #84	; 0x54
 8002bc2:	ecbd 8b06 	vpop	{d8-d10}
 8002bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bca:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8002bce:	9f08      	ldr	r7, [sp, #32]
 8002bd0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002bd2:	2f00      	cmp	r7, #0
 8002bd4:	dd0c      	ble.n	8002bf0 <_dtoa_r+0x668>
 8002bd6:	9a04      	ldr	r2, [sp, #16]
 8002bd8:	2a00      	cmp	r2, #0
 8002bda:	dd09      	ble.n	8002bf0 <_dtoa_r+0x668>
 8002bdc:	9908      	ldr	r1, [sp, #32]
 8002bde:	42ba      	cmp	r2, r7
 8002be0:	4613      	mov	r3, r2
 8002be2:	bfa8      	it	ge
 8002be4:	463b      	movge	r3, r7
 8002be6:	1ac9      	subs	r1, r1, r3
 8002be8:	1aff      	subs	r7, r7, r3
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	9108      	str	r1, [sp, #32]
 8002bee:	9304      	str	r3, [sp, #16]
 8002bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bf2:	b1db      	cbz	r3, 8002c2c <_dtoa_r+0x6a4>
 8002bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8282 	beq.w	8003100 <_dtoa_r+0xb78>
 8002bfc:	f1b8 0f00 	cmp.w	r8, #0
 8002c00:	dd0f      	ble.n	8002c22 <_dtoa_r+0x69a>
 8002c02:	4631      	mov	r1, r6
 8002c04:	4642      	mov	r2, r8
 8002c06:	4620      	mov	r0, r4
 8002c08:	f002 f82e 	bl	8004c68 <__pow5mult>
 8002c0c:	462a      	mov	r2, r5
 8002c0e:	4601      	mov	r1, r0
 8002c10:	4606      	mov	r6, r0
 8002c12:	4620      	mov	r0, r4
 8002c14:	f001 ff7a 	bl	8004b0c <__multiply>
 8002c18:	4629      	mov	r1, r5
 8002c1a:	4605      	mov	r5, r0
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f001 fe3f 	bl	80048a0 <_Bfree>
 8002c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c24:	ebb3 0208 	subs.w	r2, r3, r8
 8002c28:	f040 8300 	bne.w	800322c <_dtoa_r+0xca4>
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f001 ff3e 	bl	8004ab0 <__i2b>
 8002c34:	f1bb 0f00 	cmp.w	fp, #0
 8002c38:	4682      	mov	sl, r0
 8002c3a:	f300 80b7 	bgt.w	8002dac <_dtoa_r+0x824>
 8002c3e:	9b01      	ldr	r3, [sp, #4]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	f340 8186 	ble.w	8002f52 <_dtoa_r+0x9ca>
 8002c46:	f04f 0800 	mov.w	r8, #0
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f1bb 0f00 	cmp.w	fp, #0
 8002c50:	f040 80b8 	bne.w	8002dc4 <_dtoa_r+0x83c>
 8002c54:	9a04      	ldr	r2, [sp, #16]
 8002c56:	4410      	add	r0, r2
 8002c58:	f010 001f 	ands.w	r0, r0, #31
 8002c5c:	f000 8096 	beq.w	8002d8c <_dtoa_r+0x804>
 8002c60:	f1c0 0320 	rsb	r3, r0, #32
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	f340 83f8 	ble.w	800345a <_dtoa_r+0xed2>
 8002c6a:	9b08      	ldr	r3, [sp, #32]
 8002c6c:	f1c0 001c 	rsb	r0, r0, #28
 8002c70:	4403      	add	r3, r0
 8002c72:	4402      	add	r2, r0
 8002c74:	9308      	str	r3, [sp, #32]
 8002c76:	4407      	add	r7, r0
 8002c78:	9204      	str	r2, [sp, #16]
 8002c7a:	9b08      	ldr	r3, [sp, #32]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	dd05      	ble.n	8002c8c <_dtoa_r+0x704>
 8002c80:	4629      	mov	r1, r5
 8002c82:	461a      	mov	r2, r3
 8002c84:	4620      	mov	r0, r4
 8002c86:	f002 f84f 	bl	8004d28 <__lshift>
 8002c8a:	4605      	mov	r5, r0
 8002c8c:	9b04      	ldr	r3, [sp, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	dd05      	ble.n	8002c9e <_dtoa_r+0x716>
 8002c92:	4651      	mov	r1, sl
 8002c94:	461a      	mov	r2, r3
 8002c96:	4620      	mov	r0, r4
 8002c98:	f002 f846 	bl	8004d28 <__lshift>
 8002c9c:	4682      	mov	sl, r0
 8002c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 8137 	bne.w	8002f14 <_dtoa_r+0x98c>
 8002ca6:	9b07      	ldr	r3, [sp, #28]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f340 811e 	ble.w	8002eea <_dtoa_r+0x962>
 8002cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 80a1 	bne.w	8002df8 <_dtoa_r+0x870>
 8002cb6:	9b05      	ldr	r3, [sp, #20]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	9305      	str	r3, [sp, #20]
 8002cbc:	f8dd 8000 	ldr.w	r8, [sp]
 8002cc0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8002cc4:	2701      	movs	r7, #1
 8002cc6:	e007      	b.n	8002cd8 <_dtoa_r+0x750>
 8002cc8:	4629      	mov	r1, r5
 8002cca:	2300      	movs	r3, #0
 8002ccc:	220a      	movs	r2, #10
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f001 fdf0 	bl	80048b4 <__multadd>
 8002cd4:	3701      	adds	r7, #1
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	4651      	mov	r1, sl
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f7ff fbc0 	bl	8002460 <quorem>
 8002ce0:	454f      	cmp	r7, r9
 8002ce2:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002ce6:	f808 0b01 	strb.w	r0, [r8], #1
 8002cea:	dbed      	blt.n	8002cc8 <_dtoa_r+0x740>
 8002cec:	9a07      	ldr	r2, [sp, #28]
 8002cee:	2a00      	cmp	r2, #0
 8002cf0:	bfc8      	it	gt
 8002cf2:	4693      	movgt	fp, r2
 8002cf4:	9a00      	ldr	r2, [sp, #0]
 8002cf6:	bfd8      	it	le
 8002cf8:	f04f 0b01 	movle.w	fp, #1
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4493      	add	fp, r2
 8002d00:	2700      	movs	r7, #0
 8002d02:	4629      	mov	r1, r5
 8002d04:	2201      	movs	r2, #1
 8002d06:	4620      	mov	r0, r4
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	f002 f80d 	bl	8004d28 <__lshift>
 8002d0e:	4651      	mov	r1, sl
 8002d10:	4605      	mov	r5, r0
 8002d12:	f002 f881 	bl	8004e18 <__mcmp>
 8002d16:	2800      	cmp	r0, #0
 8002d18:	f340 81a5 	ble.w	8003066 <_dtoa_r+0xade>
 8002d1c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 8002d20:	9a00      	ldr	r2, [sp, #0]
 8002d22:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002d26:	e004      	b.n	8002d32 <_dtoa_r+0x7aa>
 8002d28:	455a      	cmp	r2, fp
 8002d2a:	f000 81a7 	beq.w	800307c <_dtoa_r+0xaf4>
 8002d2e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8002d32:	2b39      	cmp	r3, #57	; 0x39
 8002d34:	f10b 0901 	add.w	r9, fp, #1
 8002d38:	d0f6      	beq.n	8002d28 <_dtoa_r+0x7a0>
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f88b 3000 	strb.w	r3, [fp]
 8002d40:	4651      	mov	r1, sl
 8002d42:	4620      	mov	r0, r4
 8002d44:	f001 fdac 	bl	80048a0 <_Bfree>
 8002d48:	b156      	cbz	r6, 8002d60 <_dtoa_r+0x7d8>
 8002d4a:	b12f      	cbz	r7, 8002d58 <_dtoa_r+0x7d0>
 8002d4c:	42b7      	cmp	r7, r6
 8002d4e:	d003      	beq.n	8002d58 <_dtoa_r+0x7d0>
 8002d50:	4639      	mov	r1, r7
 8002d52:	4620      	mov	r0, r4
 8002d54:	f001 fda4 	bl	80048a0 <_Bfree>
 8002d58:	4631      	mov	r1, r6
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f001 fda0 	bl	80048a0 <_Bfree>
 8002d60:	4629      	mov	r1, r5
 8002d62:	4620      	mov	r0, r4
 8002d64:	f001 fd9c 	bl	80048a0 <_Bfree>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f889 3000 	strb.w	r3, [r9]
 8002d6e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f43f ac48 	beq.w	800260c <_dtoa_r+0x84>
 8002d7c:	9800      	ldr	r0, [sp, #0]
 8002d7e:	f8c3 9000 	str.w	r9, [r3]
 8002d82:	b015      	add	sp, #84	; 0x54
 8002d84:	ecbd 8b06 	vpop	{d8-d10}
 8002d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d8c:	201c      	movs	r0, #28
 8002d8e:	9b08      	ldr	r3, [sp, #32]
 8002d90:	4403      	add	r3, r0
 8002d92:	9308      	str	r3, [sp, #32]
 8002d94:	9b04      	ldr	r3, [sp, #16]
 8002d96:	4403      	add	r3, r0
 8002d98:	4407      	add	r7, r0
 8002d9a:	9304      	str	r3, [sp, #16]
 8002d9c:	e76d      	b.n	8002c7a <_dtoa_r+0x6f2>
 8002d9e:	2601      	movs	r6, #1
 8002da0:	e4c2      	b.n	8002728 <_dtoa_r+0x1a0>
 8002da2:	f1c0 0020 	rsb	r0, r0, #32
 8002da6:	fa08 f000 	lsl.w	r0, r8, r0
 8002daa:	e459      	b.n	8002660 <_dtoa_r+0xd8>
 8002dac:	4601      	mov	r1, r0
 8002dae:	465a      	mov	r2, fp
 8002db0:	4620      	mov	r0, r4
 8002db2:	f001 ff59 	bl	8004c68 <__pow5mult>
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	4682      	mov	sl, r0
 8002dbc:	f340 81d5 	ble.w	800316a <_dtoa_r+0xbe2>
 8002dc0:	f04f 0800 	mov.w	r8, #0
 8002dc4:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002dc8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8002dcc:	6918      	ldr	r0, [r3, #16]
 8002dce:	f001 fe1f 	bl	8004a10 <__hi0bits>
 8002dd2:	f1c0 0020 	rsb	r0, r0, #32
 8002dd6:	e73d      	b.n	8002c54 <_dtoa_r+0x6cc>
 8002dd8:	0801cb10 	.word	0x0801cb10
 8002ddc:	4631      	mov	r1, r6
 8002dde:	2300      	movs	r3, #0
 8002de0:	220a      	movs	r2, #10
 8002de2:	4620      	mov	r0, r4
 8002de4:	f001 fd66 	bl	80048b4 <__multadd>
 8002de8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	4606      	mov	r6, r0
 8002dee:	f340 8323 	ble.w	8003438 <_dtoa_r+0xeb0>
 8002df2:	f8cd 9014 	str.w	r9, [sp, #20]
 8002df6:	9307      	str	r3, [sp, #28]
 8002df8:	2f00      	cmp	r7, #0
 8002dfa:	f300 8118 	bgt.w	800302e <_dtoa_r+0xaa6>
 8002dfe:	f1b8 0f00 	cmp.w	r8, #0
 8002e02:	f040 81fc 	bne.w	80031fe <_dtoa_r+0xc76>
 8002e06:	46b0      	mov	r8, r6
 8002e08:	9b02      	ldr	r3, [sp, #8]
 8002e0a:	9f00      	ldr	r7, [sp, #0]
 8002e0c:	9907      	ldr	r1, [sp, #28]
 8002e0e:	f003 0201 	and.w	r2, r3, #1
 8002e12:	1e7b      	subs	r3, r7, #1
 8002e14:	4419      	add	r1, r3
 8002e16:	9b01      	ldr	r3, [sp, #4]
 8002e18:	920a      	str	r2, [sp, #40]	; 0x28
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	9108      	str	r1, [sp, #32]
 8002e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e20:	4651      	mov	r1, sl
 8002e22:	4628      	mov	r0, r5
 8002e24:	f7ff fb1c 	bl	8002460 <quorem>
 8002e28:	4631      	mov	r1, r6
 8002e2a:	4683      	mov	fp, r0
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	f001 fff3 	bl	8004e18 <__mcmp>
 8002e32:	4642      	mov	r2, r8
 8002e34:	4651      	mov	r1, sl
 8002e36:	4681      	mov	r9, r0
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f002 f80f 	bl	8004e5c <__mdiff>
 8002e3e:	68c2      	ldr	r2, [r0, #12]
 8002e40:	4601      	mov	r1, r0
 8002e42:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8002e46:	2a00      	cmp	r2, #0
 8002e48:	d142      	bne.n	8002ed0 <_dtoa_r+0x948>
 8002e4a:	9004      	str	r0, [sp, #16]
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	9307      	str	r3, [sp, #28]
 8002e50:	f001 ffe2 	bl	8004e18 <__mcmp>
 8002e54:	9904      	ldr	r1, [sp, #16]
 8002e56:	9002      	str	r0, [sp, #8]
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f001 fd21 	bl	80048a0 <_Bfree>
 8002e5e:	9a02      	ldr	r2, [sp, #8]
 8002e60:	9b07      	ldr	r3, [sp, #28]
 8002e62:	b91a      	cbnz	r2, 8002e6c <_dtoa_r+0x8e4>
 8002e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e66:	2900      	cmp	r1, #0
 8002e68:	f000 82d6 	beq.w	8003418 <_dtoa_r+0xe90>
 8002e6c:	f1b9 0f00 	cmp.w	r9, #0
 8002e70:	f2c0 8187 	blt.w	8003182 <_dtoa_r+0xbfa>
 8002e74:	9901      	ldr	r1, [sp, #4]
 8002e76:	ea49 0901 	orr.w	r9, r9, r1
 8002e7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002e7c:	ea51 0109 	orrs.w	r1, r1, r9
 8002e80:	f000 817f 	beq.w	8003182 <_dtoa_r+0xbfa>
 8002e84:	2a00      	cmp	r2, #0
 8002e86:	f300 81e7 	bgt.w	8003258 <_dtoa_r+0xcd0>
 8002e8a:	9a08      	ldr	r2, [sp, #32]
 8002e8c:	703b      	strb	r3, [r7, #0]
 8002e8e:	f107 0901 	add.w	r9, r7, #1
 8002e92:	4297      	cmp	r7, r2
 8002e94:	46cb      	mov	fp, r9
 8002e96:	f000 81e5 	beq.w	8003264 <_dtoa_r+0xcdc>
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	220a      	movs	r2, #10
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f001 fd07 	bl	80048b4 <__multadd>
 8002ea6:	4546      	cmp	r6, r8
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	4631      	mov	r1, r6
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	f04f 020a 	mov.w	r2, #10
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	d012      	beq.n	8002ede <_dtoa_r+0x956>
 8002eb8:	f001 fcfc 	bl	80048b4 <__multadd>
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	220a      	movs	r2, #10
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f001 fcf5 	bl	80048b4 <__multadd>
 8002eca:	464f      	mov	r7, r9
 8002ecc:	4680      	mov	r8, r0
 8002ece:	e7a7      	b.n	8002e20 <_dtoa_r+0x898>
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	9302      	str	r3, [sp, #8]
 8002ed4:	f001 fce4 	bl	80048a0 <_Bfree>
 8002ed8:	9b02      	ldr	r3, [sp, #8]
 8002eda:	2201      	movs	r2, #1
 8002edc:	e7c6      	b.n	8002e6c <_dtoa_r+0x8e4>
 8002ede:	f001 fce9 	bl	80048b4 <__multadd>
 8002ee2:	464f      	mov	r7, r9
 8002ee4:	4606      	mov	r6, r0
 8002ee6:	4680      	mov	r8, r0
 8002ee8:	e79a      	b.n	8002e20 <_dtoa_r+0x898>
 8002eea:	9b01      	ldr	r3, [sp, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	dc77      	bgt.n	8002fe0 <_dtoa_r+0xa58>
 8002ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d180      	bne.n	8002df8 <_dtoa_r+0x870>
 8002ef6:	9b05      	ldr	r3, [sp, #20]
 8002ef8:	4651      	mov	r1, sl
 8002efa:	3301      	adds	r3, #1
 8002efc:	4628      	mov	r0, r5
 8002efe:	9305      	str	r3, [sp, #20]
 8002f00:	f7ff faae 	bl	8002460 <quorem>
 8002f04:	f8dd b000 	ldr.w	fp, [sp]
 8002f08:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8002f0c:	f80b 3b01 	strb.w	r3, [fp], #1
 8002f10:	2700      	movs	r7, #0
 8002f12:	e6f6      	b.n	8002d02 <_dtoa_r+0x77a>
 8002f14:	4651      	mov	r1, sl
 8002f16:	4628      	mov	r0, r5
 8002f18:	f001 ff7e 	bl	8004e18 <__mcmp>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f6bf aec2 	bge.w	8002ca6 <_dtoa_r+0x71e>
 8002f22:	4629      	mov	r1, r5
 8002f24:	2300      	movs	r3, #0
 8002f26:	220a      	movs	r2, #10
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f001 fcc3 	bl	80048b4 <__multadd>
 8002f2e:	9b05      	ldr	r3, [sp, #20]
 8002f30:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8002f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f36:	4605      	mov	r5, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f47f af4f 	bne.w	8002ddc <_dtoa_r+0x854>
 8002f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f340 8270 	ble.w	8003426 <_dtoa_r+0xe9e>
 8002f46:	9307      	str	r3, [sp, #28]
 8002f48:	e6b8      	b.n	8002cbc <_dtoa_r+0x734>
 8002f4a:	4bbd      	ldr	r3, [pc, #756]	; (8003240 <_dtoa_r+0xcb8>)
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	3303      	adds	r3, #3
 8002f50:	e405      	b.n	800275e <_dtoa_r+0x1d6>
 8002f52:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8002f56:	2900      	cmp	r1, #0
 8002f58:	f47f ae75 	bne.w	8002c46 <_dtoa_r+0x6be>
 8002f5c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f47f ae70 	bne.w	8002c46 <_dtoa_r+0x6be>
 8002f66:	4bb7      	ldr	r3, [pc, #732]	; (8003244 <_dtoa_r+0xcbc>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 823d 	beq.w	80033ea <_dtoa_r+0xe62>
 8002f70:	9b08      	ldr	r3, [sp, #32]
 8002f72:	3301      	adds	r3, #1
 8002f74:	9308      	str	r3, [sp, #32]
 8002f76:	9b04      	ldr	r3, [sp, #16]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	9304      	str	r3, [sp, #16]
 8002f7c:	f04f 0801 	mov.w	r8, #1
 8002f80:	e663      	b.n	8002c4a <_dtoa_r+0x6c2>
 8002f82:	2301      	movs	r3, #1
 8002f84:	930a      	str	r3, [sp, #40]	; 0x28
 8002f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f88:	9a05      	ldr	r2, [sp, #20]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f8e:	3301      	adds	r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	461f      	mov	r7, r3
 8002f94:	9307      	str	r3, [sp, #28]
 8002f96:	bfb8      	it	lt
 8002f98:	2701      	movlt	r7, #1
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	2f17      	cmp	r7, #23
 8002f9e:	6461      	str	r1, [r4, #68]	; 0x44
 8002fa0:	f77f ac32 	ble.w	8002808 <_dtoa_r+0x280>
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	f103 0014 	add.w	r0, r3, #20
 8002fae:	42b8      	cmp	r0, r7
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	f102 0201 	add.w	r2, r2, #1
 8002fb6:	d9f7      	bls.n	8002fa8 <_dtoa_r+0xa20>
 8002fb8:	6461      	str	r1, [r4, #68]	; 0x44
 8002fba:	e425      	b.n	8002808 <_dtoa_r+0x280>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8002fc0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002fc2:	2f00      	cmp	r7, #0
 8002fc4:	dd4a      	ble.n	800305c <_dtoa_r+0xad4>
 8002fc6:	970f      	str	r7, [sp, #60]	; 0x3c
 8002fc8:	9707      	str	r7, [sp, #28]
 8002fca:	e7e6      	b.n	8002f9a <_dtoa_r+0xa12>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	930a      	str	r3, [sp, #40]	; 0x28
 8002fd0:	e7d9      	b.n	8002f86 <_dtoa_r+0x9fe>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	930a      	str	r3, [sp, #40]	; 0x28
 8002fd6:	e7f3      	b.n	8002fc0 <_dtoa_r+0xa38>
 8002fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fda:	f8cd 9014 	str.w	r9, [sp, #20]
 8002fde:	9307      	str	r3, [sp, #28]
 8002fe0:	9b07      	ldr	r3, [sp, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f47f ad3d 	bne.w	8002a62 <_dtoa_r+0x4da>
 8002fe8:	4651      	mov	r1, sl
 8002fea:	2205      	movs	r2, #5
 8002fec:	4620      	mov	r0, r4
 8002fee:	f001 fc61 	bl	80048b4 <__multadd>
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	4682      	mov	sl, r0
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	f001 ff0e 	bl	8004e18 <__mcmp>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	f77f ad30 	ble.w	8002a62 <_dtoa_r+0x4da>
 8003002:	9800      	ldr	r0, [sp, #0]
 8003004:	9f05      	ldr	r7, [sp, #20]
 8003006:	2331      	movs	r3, #49	; 0x31
 8003008:	4680      	mov	r8, r0
 800300a:	f800 3b01 	strb.w	r3, [r0], #1
 800300e:	3701      	adds	r7, #1
 8003010:	9000      	str	r0, [sp, #0]
 8003012:	4651      	mov	r1, sl
 8003014:	4620      	mov	r0, r4
 8003016:	f001 fc43 	bl	80048a0 <_Bfree>
 800301a:	1c7b      	adds	r3, r7, #1
 800301c:	f8dd 9000 	ldr.w	r9, [sp]
 8003020:	9305      	str	r3, [sp, #20]
 8003022:	f8cd 8000 	str.w	r8, [sp]
 8003026:	2e00      	cmp	r6, #0
 8003028:	f47f ae96 	bne.w	8002d58 <_dtoa_r+0x7d0>
 800302c:	e698      	b.n	8002d60 <_dtoa_r+0x7d8>
 800302e:	4631      	mov	r1, r6
 8003030:	463a      	mov	r2, r7
 8003032:	4620      	mov	r0, r4
 8003034:	f001 fe78 	bl	8004d28 <__lshift>
 8003038:	4606      	mov	r6, r0
 800303a:	e6e0      	b.n	8002dfe <_dtoa_r+0x876>
 800303c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800303e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8003042:	eba8 0303 	sub.w	r3, r8, r3
 8003046:	449b      	add	fp, r3
 8003048:	f04f 0800 	mov.w	r8, #0
 800304c:	e58a      	b.n	8002b64 <_dtoa_r+0x5dc>
 800304e:	f04f 0a02 	mov.w	sl, #2
 8003052:	eeb0 8a49 	vmov.f32	s16, s18
 8003056:	eef0 8a69 	vmov.f32	s17, s19
 800305a:	e402      	b.n	8002862 <_dtoa_r+0x2da>
 800305c:	2301      	movs	r3, #1
 800305e:	9309      	str	r3, [sp, #36]	; 0x24
 8003060:	9307      	str	r3, [sp, #28]
 8003062:	f7ff bbcd 	b.w	8002800 <_dtoa_r+0x278>
 8003066:	d103      	bne.n	8003070 <_dtoa_r+0xae8>
 8003068:	9b01      	ldr	r3, [sp, #4]
 800306a:	07db      	lsls	r3, r3, #31
 800306c:	f53f ae56 	bmi.w	8002d1c <_dtoa_r+0x794>
 8003070:	46d9      	mov	r9, fp
 8003072:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8003076:	2b30      	cmp	r3, #48	; 0x30
 8003078:	d0fa      	beq.n	8003070 <_dtoa_r+0xae8>
 800307a:	e661      	b.n	8002d40 <_dtoa_r+0x7b8>
 800307c:	9b05      	ldr	r3, [sp, #20]
 800307e:	9a00      	ldr	r2, [sp, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	9305      	str	r3, [sp, #20]
 8003084:	2331      	movs	r3, #49	; 0x31
 8003086:	7013      	strb	r3, [r2, #0]
 8003088:	e65a      	b.n	8002d40 <_dtoa_r+0x7b8>
 800308a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800308c:	2a00      	cmp	r2, #0
 800308e:	f000 8163 	beq.w	8003358 <_dtoa_r+0xdd0>
 8003092:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003096:	9a04      	ldr	r2, [sp, #16]
 8003098:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800309c:	441a      	add	r2, r3
 800309e:	9204      	str	r2, [sp, #16]
 80030a0:	9a08      	ldr	r2, [sp, #32]
 80030a2:	4617      	mov	r7, r2
 80030a4:	441a      	add	r2, r3
 80030a6:	9208      	str	r2, [sp, #32]
 80030a8:	e567      	b.n	8002b7a <_dtoa_r+0x5f2>
 80030aa:	4650      	mov	r0, sl
 80030ac:	f004 f918 	bl	80072e0 <__aeabi_i2d>
 80030b0:	ec53 2b1a 	vmov	r2, r3, d10
 80030b4:	f004 f97e 	bl	80073b4 <__aeabi_dmul>
 80030b8:	4b63      	ldr	r3, [pc, #396]	; (8003248 <_dtoa_r+0xcc0>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	f003 ffc4 	bl	8007048 <__adddf3>
 80030c0:	4680      	mov	r8, r0
 80030c2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80030c6:	4b61      	ldr	r3, [pc, #388]	; (800324c <_dtoa_r+0xcc4>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	ec51 0b1a 	vmov	r0, r1, d10
 80030ce:	f003 ffb9 	bl	8007044 <__aeabi_dsub>
 80030d2:	4642      	mov	r2, r8
 80030d4:	464b      	mov	r3, r9
 80030d6:	4606      	mov	r6, r0
 80030d8:	460f      	mov	r7, r1
 80030da:	f004 fbfb 	bl	80078d4 <__aeabi_dcmpgt>
 80030de:	2800      	cmp	r0, #0
 80030e0:	f040 817f 	bne.w	80033e2 <_dtoa_r+0xe5a>
 80030e4:	4630      	mov	r0, r6
 80030e6:	4639      	mov	r1, r7
 80030e8:	4642      	mov	r2, r8
 80030ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80030ee:	f004 fbd3 	bl	8007898 <__aeabi_dcmplt>
 80030f2:	2800      	cmp	r0, #0
 80030f4:	f43f ac8e 	beq.w	8002a14 <_dtoa_r+0x48c>
 80030f8:	f04f 0a00 	mov.w	sl, #0
 80030fc:	4656      	mov	r6, sl
 80030fe:	e4b0      	b.n	8002a62 <_dtoa_r+0x4da>
 8003100:	4629      	mov	r1, r5
 8003102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003104:	4620      	mov	r0, r4
 8003106:	f001 fdaf 	bl	8004c68 <__pow5mult>
 800310a:	4605      	mov	r5, r0
 800310c:	e58e      	b.n	8002c2c <_dtoa_r+0x6a4>
 800310e:	900c      	str	r0, [sp, #48]	; 0x30
 8003110:	e540      	b.n	8002b94 <_dtoa_r+0x60c>
 8003112:	f000 814e 	beq.w	80033b2 <_dtoa_r+0xe2a>
 8003116:	9a05      	ldr	r2, [sp, #20]
 8003118:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <_dtoa_r+0xcc8>)
 800311a:	4256      	negs	r6, r2
 800311c:	f006 020f 	and.w	r2, r6, #15
 8003120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	ec51 0b19 	vmov	r0, r1, d9
 800312c:	f004 f942 	bl	80073b4 <__aeabi_dmul>
 8003130:	1136      	asrs	r6, r6, #4
 8003132:	ec41 0b1a 	vmov	d10, r0, r1
 8003136:	f000 8188 	beq.w	800344a <_dtoa_r+0xec2>
 800313a:	4f46      	ldr	r7, [pc, #280]	; (8003254 <_dtoa_r+0xccc>)
 800313c:	2300      	movs	r3, #0
 800313e:	f04f 0a02 	mov.w	sl, #2
 8003142:	07f2      	lsls	r2, r6, #31
 8003144:	d506      	bpl.n	8003154 <_dtoa_r+0xbcc>
 8003146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800314a:	f004 f933 	bl	80073b4 <__aeabi_dmul>
 800314e:	f10a 0a01 	add.w	sl, sl, #1
 8003152:	2301      	movs	r3, #1
 8003154:	1076      	asrs	r6, r6, #1
 8003156:	f107 0708 	add.w	r7, r7, #8
 800315a:	d1f2      	bne.n	8003142 <_dtoa_r+0xbba>
 800315c:	2b00      	cmp	r3, #0
 800315e:	f43f ab9f 	beq.w	80028a0 <_dtoa_r+0x318>
 8003162:	ec41 0b1a 	vmov	d10, r0, r1
 8003166:	f7ff bb9b 	b.w	80028a0 <_dtoa_r+0x318>
 800316a:	9b02      	ldr	r3, [sp, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f47f ae27 	bne.w	8002dc0 <_dtoa_r+0x838>
 8003172:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003176:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800317a:	2b00      	cmp	r3, #0
 800317c:	f43f aef3 	beq.w	8002f66 <_dtoa_r+0x9de>
 8003180:	e61e      	b.n	8002dc0 <_dtoa_r+0x838>
 8003182:	2a00      	cmp	r2, #0
 8003184:	dd12      	ble.n	80031ac <_dtoa_r+0xc24>
 8003186:	4629      	mov	r1, r5
 8003188:	2201      	movs	r2, #1
 800318a:	4620      	mov	r0, r4
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	f001 fdcb 	bl	8004d28 <__lshift>
 8003192:	4651      	mov	r1, sl
 8003194:	4605      	mov	r5, r0
 8003196:	f001 fe3f 	bl	8004e18 <__mcmp>
 800319a:	2800      	cmp	r0, #0
 800319c:	9b01      	ldr	r3, [sp, #4]
 800319e:	f340 8135 	ble.w	800340c <_dtoa_r+0xe84>
 80031a2:	2b39      	cmp	r3, #57	; 0x39
 80031a4:	f000 8113 	beq.w	80033ce <_dtoa_r+0xe46>
 80031a8:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 80031ac:	46b9      	mov	r9, r7
 80031ae:	f809 3b01 	strb.w	r3, [r9], #1
 80031b2:	9b05      	ldr	r3, [sp, #20]
 80031b4:	3301      	adds	r3, #1
 80031b6:	4637      	mov	r7, r6
 80031b8:	9305      	str	r3, [sp, #20]
 80031ba:	4646      	mov	r6, r8
 80031bc:	e5c0      	b.n	8002d40 <_dtoa_r+0x7b8>
 80031be:	46a2      	mov	sl, r4
 80031c0:	ee18 5a10 	vmov	r5, s16
 80031c4:	ee18 4a90 	vmov	r4, s17
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	f003 ff3c 	bl	8007048 <__adddf3>
 80031d0:	4642      	mov	r2, r8
 80031d2:	464b      	mov	r3, r9
 80031d4:	4606      	mov	r6, r0
 80031d6:	460f      	mov	r7, r1
 80031d8:	f004 fb7c 	bl	80078d4 <__aeabi_dcmpgt>
 80031dc:	b960      	cbnz	r0, 80031f8 <_dtoa_r+0xc70>
 80031de:	4642      	mov	r2, r8
 80031e0:	464b      	mov	r3, r9
 80031e2:	4630      	mov	r0, r6
 80031e4:	4639      	mov	r1, r7
 80031e6:	f004 fb4d 	bl	8007884 <__aeabi_dcmpeq>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	f43f ac97 	beq.w	8002b1e <_dtoa_r+0x596>
 80031f0:	ea5f 71cb 	movs.w	r1, fp, lsl #31
 80031f4:	f57f ac93 	bpl.w	8002b1e <_dtoa_r+0x596>
 80031f8:	9a00      	ldr	r2, [sp, #0]
 80031fa:	f7ff bbf8 	b.w	80029ee <_dtoa_r+0x466>
 80031fe:	6871      	ldr	r1, [r6, #4]
 8003200:	4620      	mov	r0, r4
 8003202:	f001 fb27 	bl	8004854 <_Balloc>
 8003206:	4607      	mov	r7, r0
 8003208:	2800      	cmp	r0, #0
 800320a:	f000 813a 	beq.w	8003482 <_dtoa_r+0xefa>
 800320e:	6933      	ldr	r3, [r6, #16]
 8003210:	3302      	adds	r3, #2
 8003212:	009a      	lsls	r2, r3, #2
 8003214:	f106 010c 	add.w	r1, r6, #12
 8003218:	300c      	adds	r0, #12
 800321a:	f001 fa01 	bl	8004620 <memcpy>
 800321e:	4639      	mov	r1, r7
 8003220:	2201      	movs	r2, #1
 8003222:	4620      	mov	r0, r4
 8003224:	f001 fd80 	bl	8004d28 <__lshift>
 8003228:	4680      	mov	r8, r0
 800322a:	e5ed      	b.n	8002e08 <_dtoa_r+0x880>
 800322c:	4629      	mov	r1, r5
 800322e:	4620      	mov	r0, r4
 8003230:	f001 fd1a 	bl	8004c68 <__pow5mult>
 8003234:	4605      	mov	r5, r0
 8003236:	e4f9      	b.n	8002c2c <_dtoa_r+0x6a4>
 8003238:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800323c:	1a9f      	subs	r7, r3, r2
 800323e:	e49c      	b.n	8002b7a <_dtoa_r+0x5f2>
 8003240:	0801cb14 	.word	0x0801cb14
 8003244:	7ff00000 	.word	0x7ff00000
 8003248:	401c0000 	.word	0x401c0000
 800324c:	40140000 	.word	0x40140000
 8003250:	0800d3e8 	.word	0x0800d3e8
 8003254:	0800d4d8 	.word	0x0800d4d8
 8003258:	2b39      	cmp	r3, #57	; 0x39
 800325a:	f000 80b8 	beq.w	80033ce <_dtoa_r+0xe46>
 800325e:	46b9      	mov	r9, r7
 8003260:	3301      	adds	r3, #1
 8003262:	e7a4      	b.n	80031ae <_dtoa_r+0xc26>
 8003264:	9a05      	ldr	r2, [sp, #20]
 8003266:	3201      	adds	r2, #1
 8003268:	4637      	mov	r7, r6
 800326a:	9205      	str	r2, [sp, #20]
 800326c:	4646      	mov	r6, r8
 800326e:	e548      	b.n	8002d02 <_dtoa_r+0x77a>
 8003270:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003272:	498d      	ldr	r1, [pc, #564]	; (80034a8 <_dtoa_r+0xf20>)
 8003274:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8003278:	4642      	mov	r2, r8
 800327a:	464b      	mov	r3, r9
 800327c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8003280:	f004 f898 	bl	80073b4 <__aeabi_dmul>
 8003284:	ec5a 9b1a 	vmov	r9, sl, d10
 8003288:	ec41 0b18 	vmov	d8, r0, r1
 800328c:	4651      	mov	r1, sl
 800328e:	ee1a 0a10 	vmov	r0, s20
 8003292:	f004 fb3f 	bl	8007914 <__aeabi_d2iz>
 8003296:	4607      	mov	r7, r0
 8003298:	f004 f822 	bl	80072e0 <__aeabi_i2d>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	ee1a 0a10 	vmov	r0, s20
 80032a4:	4651      	mov	r1, sl
 80032a6:	f003 fecd 	bl	8007044 <__aeabi_dsub>
 80032aa:	4606      	mov	r6, r0
 80032ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80032ae:	f8dd 8000 	ldr.w	r8, [sp]
 80032b2:	3730      	adds	r7, #48	; 0x30
 80032b4:	2801      	cmp	r0, #1
 80032b6:	f808 7b01 	strb.w	r7, [r8], #1
 80032ba:	460f      	mov	r7, r1
 80032bc:	f000 80ba 	beq.w	8003434 <_dtoa_r+0xeac>
 80032c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032c2:	9a00      	ldr	r2, [sp, #0]
 80032c4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80032c8:	4413      	add	r3, r2
 80032ca:	469b      	mov	fp, r3
 80032cc:	46c2      	mov	sl, r8
 80032ce:	4b77      	ldr	r3, [pc, #476]	; (80034ac <_dtoa_r+0xf24>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	4630      	mov	r0, r6
 80032d4:	4639      	mov	r1, r7
 80032d6:	f004 f86d 	bl	80073b4 <__aeabi_dmul>
 80032da:	4689      	mov	r9, r1
 80032dc:	4680      	mov	r8, r0
 80032de:	f004 fb19 	bl	8007914 <__aeabi_d2iz>
 80032e2:	4607      	mov	r7, r0
 80032e4:	f003 fffc 	bl	80072e0 <__aeabi_i2d>
 80032e8:	3730      	adds	r7, #48	; 0x30
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4640      	mov	r0, r8
 80032f0:	4649      	mov	r1, r9
 80032f2:	f003 fea7 	bl	8007044 <__aeabi_dsub>
 80032f6:	f80a 7b01 	strb.w	r7, [sl], #1
 80032fa:	45da      	cmp	sl, fp
 80032fc:	4606      	mov	r6, r0
 80032fe:	460f      	mov	r7, r1
 8003300:	d1e5      	bne.n	80032ce <_dtoa_r+0xd46>
 8003302:	46da      	mov	sl, fp
 8003304:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8003308:	4b69      	ldr	r3, [pc, #420]	; (80034b0 <_dtoa_r+0xf28>)
 800330a:	ec59 8b18 	vmov	r8, r9, d8
 800330e:	2200      	movs	r2, #0
 8003310:	ee18 0a10 	vmov	r0, s16
 8003314:	4649      	mov	r1, r9
 8003316:	f003 fe97 	bl	8007048 <__adddf3>
 800331a:	4632      	mov	r2, r6
 800331c:	463b      	mov	r3, r7
 800331e:	f004 fabb 	bl	8007898 <__aeabi_dcmplt>
 8003322:	2800      	cmp	r0, #0
 8003324:	d16d      	bne.n	8003402 <_dtoa_r+0xe7a>
 8003326:	ee18 2a10 	vmov	r2, s16
 800332a:	464b      	mov	r3, r9
 800332c:	4960      	ldr	r1, [pc, #384]	; (80034b0 <_dtoa_r+0xf28>)
 800332e:	2000      	movs	r0, #0
 8003330:	f003 fe88 	bl	8007044 <__aeabi_dsub>
 8003334:	4632      	mov	r2, r6
 8003336:	463b      	mov	r3, r7
 8003338:	f004 facc 	bl	80078d4 <__aeabi_dcmpgt>
 800333c:	2800      	cmp	r0, #0
 800333e:	f43f ab69 	beq.w	8002a14 <_dtoa_r+0x48c>
 8003342:	46d1      	mov	r9, sl
 8003344:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003348:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 800334c:	2b30      	cmp	r3, #48	; 0x30
 800334e:	d0f8      	beq.n	8003342 <_dtoa_r+0xdba>
 8003350:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003352:	3301      	adds	r3, #1
 8003354:	9305      	str	r3, [sp, #20]
 8003356:	e503      	b.n	8002d60 <_dtoa_r+0x7d8>
 8003358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800335a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800335e:	e69a      	b.n	8003096 <_dtoa_r+0xb0e>
 8003360:	9b07      	ldr	r3, [sp, #28]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f43f aea1 	beq.w	80030aa <_dtoa_r+0xb22>
 8003368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800336a:	2b00      	cmp	r3, #0
 800336c:	f77f ab52 	ble.w	8002a14 <_dtoa_r+0x48c>
 8003370:	9a05      	ldr	r2, [sp, #20]
 8003372:	930e      	str	r3, [sp, #56]	; 0x38
 8003374:	3a01      	subs	r2, #1
 8003376:	4b4d      	ldr	r3, [pc, #308]	; (80034ac <_dtoa_r+0xf24>)
 8003378:	9210      	str	r2, [sp, #64]	; 0x40
 800337a:	ee1a 0a10 	vmov	r0, s20
 800337e:	4639      	mov	r1, r7
 8003380:	2200      	movs	r2, #0
 8003382:	f004 f817 	bl	80073b4 <__aeabi_dmul>
 8003386:	4602      	mov	r2, r0
 8003388:	4616      	mov	r6, r2
 800338a:	460f      	mov	r7, r1
 800338c:	f10a 0001 	add.w	r0, sl, #1
 8003390:	f003 ffa6 	bl	80072e0 <__aeabi_i2d>
 8003394:	4632      	mov	r2, r6
 8003396:	463b      	mov	r3, r7
 8003398:	f004 f80c 	bl	80073b4 <__aeabi_dmul>
 800339c:	4b45      	ldr	r3, [pc, #276]	; (80034b4 <_dtoa_r+0xf2c>)
 800339e:	2200      	movs	r2, #0
 80033a0:	f003 fe52 	bl	8007048 <__adddf3>
 80033a4:	ec47 6b1a 	vmov	d10, r6, r7
 80033a8:	4680      	mov	r8, r0
 80033aa:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80033ae:	f7ff ba9b 	b.w	80028e8 <_dtoa_r+0x360>
 80033b2:	f04f 0a02 	mov.w	sl, #2
 80033b6:	eeb0 aa49 	vmov.f32	s20, s18
 80033ba:	eef0 aa69 	vmov.f32	s21, s19
 80033be:	f7ff ba6f 	b.w	80028a0 <_dtoa_r+0x318>
 80033c2:	9b05      	ldr	r3, [sp, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	9305      	str	r3, [sp, #20]
 80033c8:	2331      	movs	r3, #49	; 0x31
 80033ca:	f7ff bb17 	b.w	80029fc <_dtoa_r+0x474>
 80033ce:	9b05      	ldr	r3, [sp, #20]
 80033d0:	46bb      	mov	fp, r7
 80033d2:	3301      	adds	r3, #1
 80033d4:	9305      	str	r3, [sp, #20]
 80033d6:	2339      	movs	r3, #57	; 0x39
 80033d8:	4637      	mov	r7, r6
 80033da:	f80b 3b01 	strb.w	r3, [fp], #1
 80033de:	4646      	mov	r6, r8
 80033e0:	e49e      	b.n	8002d20 <_dtoa_r+0x798>
 80033e2:	f04f 0a00 	mov.w	sl, #0
 80033e6:	4656      	mov	r6, sl
 80033e8:	e60b      	b.n	8003002 <_dtoa_r+0xa7a>
 80033ea:	4698      	mov	r8, r3
 80033ec:	e42d      	b.n	8002c4a <_dtoa_r+0x6c2>
 80033ee:	46aa      	mov	sl, r5
 80033f0:	ee18 4a10 	vmov	r4, s16
 80033f4:	ee1a 5a10 	vmov	r5, s20
 80033f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80033fa:	3301      	adds	r3, #1
 80033fc:	9305      	str	r3, [sp, #20]
 80033fe:	46d1      	mov	r9, sl
 8003400:	e4ae      	b.n	8002d60 <_dtoa_r+0x7d8>
 8003402:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003404:	9a00      	ldr	r2, [sp, #0]
 8003406:	9305      	str	r3, [sp, #20]
 8003408:	f7ff baf1 	b.w	80029ee <_dtoa_r+0x466>
 800340c:	f47f aece 	bne.w	80031ac <_dtoa_r+0xc24>
 8003410:	07da      	lsls	r2, r3, #31
 8003412:	f57f aecb 	bpl.w	80031ac <_dtoa_r+0xc24>
 8003416:	e6c4      	b.n	80031a2 <_dtoa_r+0xc1a>
 8003418:	2b39      	cmp	r3, #57	; 0x39
 800341a:	d0d8      	beq.n	80033ce <_dtoa_r+0xe46>
 800341c:	f1b9 0f00 	cmp.w	r9, #0
 8003420:	f73f aec2 	bgt.w	80031a8 <_dtoa_r+0xc20>
 8003424:	e6c2      	b.n	80031ac <_dtoa_r+0xc24>
 8003426:	9b01      	ldr	r3, [sp, #4]
 8003428:	2b02      	cmp	r3, #2
 800342a:	f73f add5 	bgt.w	8002fd8 <_dtoa_r+0xa50>
 800342e:	f8cd 9014 	str.w	r9, [sp, #20]
 8003432:	e560      	b.n	8002ef6 <_dtoa_r+0x96e>
 8003434:	46c2      	mov	sl, r8
 8003436:	e767      	b.n	8003308 <_dtoa_r+0xd80>
 8003438:	9b01      	ldr	r3, [sp, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	f73f adcc 	bgt.w	8002fd8 <_dtoa_r+0xa50>
 8003440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003442:	f8cd 9014 	str.w	r9, [sp, #20]
 8003446:	9307      	str	r3, [sp, #28]
 8003448:	e4d6      	b.n	8002df8 <_dtoa_r+0x870>
 800344a:	f04f 0a02 	mov.w	sl, #2
 800344e:	f7ff ba27 	b.w	80028a0 <_dtoa_r+0x318>
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <_dtoa_r+0xf30>)
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	f7ff b8d9 	b.w	800260c <_dtoa_r+0x84>
 800345a:	f43f ac0e 	beq.w	8002c7a <_dtoa_r+0x6f2>
 800345e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8003462:	e494      	b.n	8002d8e <_dtoa_r+0x806>
 8003464:	2600      	movs	r6, #0
 8003466:	6466      	str	r6, [r4, #68]	; 0x44
 8003468:	4631      	mov	r1, r6
 800346a:	4620      	mov	r0, r4
 800346c:	f001 f9f2 	bl	8004854 <_Balloc>
 8003470:	9000      	str	r0, [sp, #0]
 8003472:	b968      	cbnz	r0, 8003490 <_dtoa_r+0xf08>
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <_dtoa_r+0xf34>)
 8003476:	4812      	ldr	r0, [pc, #72]	; (80034c0 <_dtoa_r+0xf38>)
 8003478:	2200      	movs	r2, #0
 800347a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800347e:	f003 f8cf 	bl	8006620 <__assert_func>
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <_dtoa_r+0xf34>)
 8003484:	480e      	ldr	r0, [pc, #56]	; (80034c0 <_dtoa_r+0xf38>)
 8003486:	463a      	mov	r2, r7
 8003488:	f240 21ea 	movw	r1, #746	; 0x2ea
 800348c:	f003 f8c8 	bl	8006620 <__assert_func>
 8003490:	9b00      	ldr	r3, [sp, #0]
 8003492:	6423      	str	r3, [r4, #64]	; 0x40
 8003494:	2201      	movs	r2, #1
 8003496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800349a:	9609      	str	r6, [sp, #36]	; 0x24
 800349c:	930f      	str	r3, [sp, #60]	; 0x3c
 800349e:	920a      	str	r2, [sp, #40]	; 0x28
 80034a0:	9307      	str	r3, [sp, #28]
 80034a2:	f7ff bab7 	b.w	8002a14 <_dtoa_r+0x48c>
 80034a6:	bf00      	nop
 80034a8:	0800d3e8 	.word	0x0800d3e8
 80034ac:	40240000 	.word	0x40240000
 80034b0:	3fe00000 	.word	0x3fe00000
 80034b4:	401c0000 	.word	0x401c0000
 80034b8:	0801cb18 	.word	0x0801cb18
 80034bc:	0801cb24 	.word	0x0801cb24
 80034c0:	0801cb38 	.word	0x0801cb38

080034c4 <__sflush_r>:
 80034c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034cc:	460c      	mov	r4, r1
 80034ce:	0711      	lsls	r1, r2, #28
 80034d0:	4680      	mov	r8, r0
 80034d2:	d447      	bmi.n	8003564 <__sflush_r+0xa0>
 80034d4:	6863      	ldr	r3, [r4, #4]
 80034d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034da:	2b00      	cmp	r3, #0
 80034dc:	81a2      	strh	r2, [r4, #12]
 80034de:	dd5e      	ble.n	800359e <__sflush_r+0xda>
 80034e0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80034e2:	2d00      	cmp	r5, #0
 80034e4:	d058      	beq.n	8003598 <__sflush_r+0xd4>
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8d8 6000 	ldr.w	r6, [r8]
 80034ec:	f8c8 3000 	str.w	r3, [r8]
 80034f0:	b293      	uxth	r3, r2
 80034f2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034f6:	d156      	bne.n	80035a6 <__sflush_r+0xe2>
 80034f8:	2301      	movs	r3, #1
 80034fa:	69e1      	ldr	r1, [r4, #28]
 80034fc:	4640      	mov	r0, r8
 80034fe:	47a8      	blx	r5
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d067      	beq.n	80035d4 <__sflush_r+0x110>
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003508:	075f      	lsls	r7, r3, #29
 800350a:	d505      	bpl.n	8003518 <__sflush_r+0x54>
 800350c:	6863      	ldr	r3, [r4, #4]
 800350e:	1ac0      	subs	r0, r0, r3
 8003510:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003512:	b10b      	cbz	r3, 8003518 <__sflush_r+0x54>
 8003514:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003516:	1ac0      	subs	r0, r0, r3
 8003518:	69e1      	ldr	r1, [r4, #28]
 800351a:	4602      	mov	r2, r0
 800351c:	2300      	movs	r3, #0
 800351e:	4640      	mov	r0, r8
 8003520:	47a8      	blx	r5
 8003522:	1c41      	adds	r1, r0, #1
 8003524:	d141      	bne.n	80035aa <__sflush_r+0xe6>
 8003526:	f8d8 3000 	ldr.w	r3, [r8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d03d      	beq.n	80035aa <__sflush_r+0xe6>
 800352e:	2b1d      	cmp	r3, #29
 8003530:	d001      	beq.n	8003536 <__sflush_r+0x72>
 8003532:	2b16      	cmp	r3, #22
 8003534:	d156      	bne.n	80035e4 <__sflush_r+0x120>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	6922      	ldr	r2, [r4, #16]
 800353a:	6022      	str	r2, [r4, #0]
 800353c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003540:	2100      	movs	r1, #0
 8003542:	6061      	str	r1, [r4, #4]
 8003544:	81a3      	strh	r3, [r4, #12]
 8003546:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003548:	f8c8 6000 	str.w	r6, [r8]
 800354c:	b321      	cbz	r1, 8003598 <__sflush_r+0xd4>
 800354e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003552:	4299      	cmp	r1, r3
 8003554:	d002      	beq.n	800355c <__sflush_r+0x98>
 8003556:	4640      	mov	r0, r8
 8003558:	f000 f9e6 	bl	8003928 <_free_r>
 800355c:	2000      	movs	r0, #0
 800355e:	6320      	str	r0, [r4, #48]	; 0x30
 8003560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003564:	6926      	ldr	r6, [r4, #16]
 8003566:	b1be      	cbz	r6, 8003598 <__sflush_r+0xd4>
 8003568:	b293      	uxth	r3, r2
 800356a:	6825      	ldr	r5, [r4, #0]
 800356c:	6026      	str	r6, [r4, #0]
 800356e:	079a      	lsls	r2, r3, #30
 8003570:	bf0c      	ite	eq
 8003572:	6963      	ldreq	r3, [r4, #20]
 8003574:	2300      	movne	r3, #0
 8003576:	1bad      	subs	r5, r5, r6
 8003578:	60a3      	str	r3, [r4, #8]
 800357a:	e00b      	b.n	8003594 <__sflush_r+0xd0>
 800357c:	462b      	mov	r3, r5
 800357e:	4632      	mov	r2, r6
 8003580:	69e1      	ldr	r1, [r4, #28]
 8003582:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003584:	4640      	mov	r0, r8
 8003586:	47b8      	blx	r7
 8003588:	f1b0 0c00 	subs.w	ip, r0, #0
 800358c:	eba5 050c 	sub.w	r5, r5, ip
 8003590:	4466      	add	r6, ip
 8003592:	dd17      	ble.n	80035c4 <__sflush_r+0x100>
 8003594:	2d00      	cmp	r5, #0
 8003596:	dcf1      	bgt.n	800357c <__sflush_r+0xb8>
 8003598:	2000      	movs	r0, #0
 800359a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800359e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	dc9d      	bgt.n	80034e0 <__sflush_r+0x1c>
 80035a4:	e7f8      	b.n	8003598 <__sflush_r+0xd4>
 80035a6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80035a8:	e7ae      	b.n	8003508 <__sflush_r+0x44>
 80035aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ae:	6922      	ldr	r2, [r4, #16]
 80035b0:	6022      	str	r2, [r4, #0]
 80035b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	04db      	lsls	r3, r3, #19
 80035bc:	6062      	str	r2, [r4, #4]
 80035be:	d5c2      	bpl.n	8003546 <__sflush_r+0x82>
 80035c0:	6520      	str	r0, [r4, #80]	; 0x50
 80035c2:	e7c0      	b.n	8003546 <__sflush_r+0x82>
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d4:	f8d8 3000 	ldr.w	r3, [r8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d093      	beq.n	8003504 <__sflush_r+0x40>
 80035dc:	2b1d      	cmp	r3, #29
 80035de:	d006      	beq.n	80035ee <__sflush_r+0x12a>
 80035e0:	2b16      	cmp	r3, #22
 80035e2:	d004      	beq.n	80035ee <__sflush_r+0x12a>
 80035e4:	89a3      	ldrh	r3, [r4, #12]
 80035e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ea:	81a3      	strh	r3, [r4, #12]
 80035ec:	e7d5      	b.n	800359a <__sflush_r+0xd6>
 80035ee:	f8c8 6000 	str.w	r6, [r8]
 80035f2:	e7d1      	b.n	8003598 <__sflush_r+0xd4>

080035f4 <_fflush_r>:
 80035f4:	b538      	push	{r3, r4, r5, lr}
 80035f6:	460d      	mov	r5, r1
 80035f8:	4604      	mov	r4, r0
 80035fa:	b108      	cbz	r0, 8003600 <_fflush_r+0xc>
 80035fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80035fe:	b11b      	cbz	r3, 8003608 <_fflush_r+0x14>
 8003600:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8003604:	b930      	cbnz	r0, 8003614 <_fflush_r+0x20>
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	f000 f91e 	bl	8003848 <__sinit>
 800360c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8003610:	2800      	cmp	r0, #0
 8003612:	d0f8      	beq.n	8003606 <_fflush_r+0x12>
 8003614:	4629      	mov	r1, r5
 8003616:	4620      	mov	r0, r4
 8003618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800361c:	f7ff bf52 	b.w	80034c4 <__sflush_r>

08003620 <fflush>:
 8003620:	b538      	push	{r3, r4, r5, lr}
 8003622:	b1b8      	cbz	r0, 8003654 <fflush+0x34>
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <fflush+0x44>)
 8003626:	681d      	ldr	r5, [r3, #0]
 8003628:	4604      	mov	r4, r0
 800362a:	b10d      	cbz	r5, 8003630 <fflush+0x10>
 800362c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800362e:	b14b      	cbz	r3, 8003644 <fflush+0x24>
 8003630:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8003634:	b900      	cbnz	r0, 8003638 <fflush+0x18>
 8003636:	bd38      	pop	{r3, r4, r5, pc}
 8003638:	4621      	mov	r1, r4
 800363a:	4628      	mov	r0, r5
 800363c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003640:	f7ff bf40 	b.w	80034c4 <__sflush_r>
 8003644:	4628      	mov	r0, r5
 8003646:	f000 f8ff 	bl	8003848 <__sinit>
 800364a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800364e:	2800      	cmp	r0, #0
 8003650:	d0f1      	beq.n	8003636 <fflush+0x16>
 8003652:	e7f1      	b.n	8003638 <fflush+0x18>
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <fflush+0x48>)
 8003656:	4905      	ldr	r1, [pc, #20]	; (800366c <fflush+0x4c>)
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800365e:	f000 bc01 	b.w	8003e64 <_fwalk_reent>
 8003662:	bf00      	nop
 8003664:	20000010 	.word	0x20000010
 8003668:	0800d3b0 	.word	0x0800d3b0
 800366c:	080035f5 	.word	0x080035f5

08003670 <__fp_lock>:
 8003670:	2000      	movs	r0, #0
 8003672:	4770      	bx	lr

08003674 <_cleanup_r>:
 8003674:	4901      	ldr	r1, [pc, #4]	; (800367c <_cleanup_r+0x8>)
 8003676:	f000 bbf5 	b.w	8003e64 <_fwalk_reent>
 800367a:	bf00      	nop
 800367c:	08006731 	.word	0x08006731

08003680 <__fp_unlock>:
 8003680:	2000      	movs	r0, #0
 8003682:	4770      	bx	lr

08003684 <__sinit.part.0>:
 8003684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003688:	4a2d      	ldr	r2, [pc, #180]	; (8003740 <__sinit.part.0+0xbc>)
 800368a:	6846      	ldr	r6, [r0, #4]
 800368c:	63c2      	str	r2, [r0, #60]	; 0x3c
 800368e:	2400      	movs	r4, #0
 8003690:	2303      	movs	r3, #3
 8003692:	e9c0 43b8 	strd	r4, r3, [r0, #736]	; 0x2e0
 8003696:	4607      	mov	r7, r0
 8003698:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800369c:	2304      	movs	r3, #4
 800369e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 80036a2:	4621      	mov	r1, r4
 80036a4:	e9c6 4302 	strd	r4, r3, [r6, #8]
 80036a8:	2208      	movs	r2, #8
 80036aa:	e9c6 4400 	strd	r4, r4, [r6]
 80036ae:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80036b2:	6674      	str	r4, [r6, #100]	; 0x64
 80036b4:	61b4      	str	r4, [r6, #24]
 80036b6:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80036ba:	f7fc ffed 	bl	8000698 <memset>
 80036be:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800374c <__sinit.part.0+0xc8>
 80036c2:	68bd      	ldr	r5, [r7, #8]
 80036c4:	f8df a088 	ldr.w	sl, [pc, #136]	; 8003750 <__sinit.part.0+0xcc>
 80036c8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003754 <__sinit.part.0+0xd0>
 80036cc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8003758 <__sinit.part.0+0xd4>
 80036d0:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <__sinit.part.0+0xc0>)
 80036d2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80036d6:	e9c6 6b07 	strd	r6, fp, [r6, #28]
 80036da:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80036de:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80036e2:	2208      	movs	r2, #8
 80036e4:	60eb      	str	r3, [r5, #12]
 80036e6:	e9c5 4400 	strd	r4, r4, [r5]
 80036ea:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80036ee:	666c      	str	r4, [r5, #100]	; 0x64
 80036f0:	60ac      	str	r4, [r5, #8]
 80036f2:	61ac      	str	r4, [r5, #24]
 80036f4:	4621      	mov	r1, r4
 80036f6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80036fa:	f7fc ffcd 	bl	8000698 <memset>
 80036fe:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 8003702:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 8003706:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800370a:	68fd      	ldr	r5, [r7, #12]
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <__sinit.part.0+0xc4>)
 800370e:	60eb      	str	r3, [r5, #12]
 8003710:	e9c5 4400 	strd	r4, r4, [r5]
 8003714:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8003718:	666c      	str	r4, [r5, #100]	; 0x64
 800371a:	60ac      	str	r4, [r5, #8]
 800371c:	61ac      	str	r4, [r5, #24]
 800371e:	4621      	mov	r1, r4
 8003720:	2208      	movs	r2, #8
 8003722:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003726:	f7fc ffb7 	bl	8000698 <memset>
 800372a:	2301      	movs	r3, #1
 800372c:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 8003730:	e9c5 980a 	strd	r9, r8, [r5, #40]	; 0x28
 8003734:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
 800373a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800373e:	bf00      	nop
 8003740:	08003675 	.word	0x08003675
 8003744:	00010009 	.word	0x00010009
 8003748:	00020012 	.word	0x00020012
 800374c:	08005785 	.word	0x08005785
 8003750:	080057ad 	.word	0x080057ad
 8003754:	080057ed 	.word	0x080057ed
 8003758:	0800580d 	.word	0x0800580d

0800375c <__sfmoreglue>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	2268      	movs	r2, #104	; 0x68
 8003760:	1e4d      	subs	r5, r1, #1
 8003762:	fb02 f505 	mul.w	r5, r2, r5
 8003766:	460e      	mov	r6, r1
 8003768:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800376c:	f000 fc58 	bl	8004020 <_malloc_r>
 8003770:	4604      	mov	r4, r0
 8003772:	b140      	cbz	r0, 8003786 <__sfmoreglue+0x2a>
 8003774:	2100      	movs	r1, #0
 8003776:	300c      	adds	r0, #12
 8003778:	e9c4 1600 	strd	r1, r6, [r4]
 800377c:	60a0      	str	r0, [r4, #8]
 800377e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003782:	f7fc ff89 	bl	8000698 <memset>
 8003786:	4620      	mov	r0, r4
 8003788:	bd70      	pop	{r4, r5, r6, pc}
 800378a:	bf00      	nop

0800378c <__sfp>:
 800378c:	4b27      	ldr	r3, [pc, #156]	; (800382c <__sfp+0xa0>)
 800378e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003792:	681e      	ldr	r6, [r3, #0]
 8003794:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003796:	4607      	mov	r7, r0
 8003798:	b35b      	cbz	r3, 80037f2 <__sfp+0x66>
 800379a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
 800379e:	f04f 0804 	mov.w	r8, #4
 80037a2:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	d504      	bpl.n	80037b4 <__sfp+0x28>
 80037aa:	e01e      	b.n	80037ea <__sfp+0x5e>
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80037b2:	d01a      	beq.n	80037ea <__sfp+0x5e>
 80037b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	2d00      	cmp	r5, #0
 80037bc:	d1f6      	bne.n	80037ac <__sfp+0x20>
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <__sfp+0xa4>)
 80037c0:	6665      	str	r5, [r4, #100]	; 0x64
 80037c2:	e9c4 5500 	strd	r5, r5, [r4]
 80037c6:	e9c4 5302 	strd	r5, r3, [r4, #8]
 80037ca:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80037ce:	61a5      	str	r5, [r4, #24]
 80037d0:	2208      	movs	r2, #8
 80037d2:	4629      	mov	r1, r5
 80037d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037d8:	f7fc ff5e 	bl	8000698 <memset>
 80037dc:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 80037e0:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 80037e4:	4620      	mov	r0, r4
 80037e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ea:	6835      	ldr	r5, [r6, #0]
 80037ec:	b12d      	cbz	r5, 80037fa <__sfp+0x6e>
 80037ee:	462e      	mov	r6, r5
 80037f0:	e7d7      	b.n	80037a2 <__sfp+0x16>
 80037f2:	4630      	mov	r0, r6
 80037f4:	f7ff ff46 	bl	8003684 <__sinit.part.0>
 80037f8:	e7cf      	b.n	800379a <__sfp+0xe>
 80037fa:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80037fe:	4638      	mov	r0, r7
 8003800:	f000 fc0e 	bl	8004020 <_malloc_r>
 8003804:	4604      	mov	r4, r0
 8003806:	b168      	cbz	r0, 8003824 <__sfp+0x98>
 8003808:	6005      	str	r5, [r0, #0]
 800380a:	f8c0 8004 	str.w	r8, [r0, #4]
 800380e:	300c      	adds	r0, #12
 8003810:	4629      	mov	r1, r5
 8003812:	60a0      	str	r0, [r4, #8]
 8003814:	4625      	mov	r5, r4
 8003816:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800381a:	f7fc ff3d 	bl	8000698 <memset>
 800381e:	6034      	str	r4, [r6, #0]
 8003820:	462e      	mov	r6, r5
 8003822:	e7be      	b.n	80037a2 <__sfp+0x16>
 8003824:	230c      	movs	r3, #12
 8003826:	6030      	str	r0, [r6, #0]
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	e7db      	b.n	80037e4 <__sfp+0x58>
 800382c:	0800d3b0 	.word	0x0800d3b0
 8003830:	ffff0001 	.word	0xffff0001

08003834 <_cleanup>:
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <_cleanup+0xc>)
 8003836:	4903      	ldr	r1, [pc, #12]	; (8003844 <_cleanup+0x10>)
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	f000 bb13 	b.w	8003e64 <_fwalk_reent>
 800383e:	bf00      	nop
 8003840:	0800d3b0 	.word	0x0800d3b0
 8003844:	08006731 	.word	0x08006731

08003848 <__sinit>:
 8003848:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800384a:	b103      	cbz	r3, 800384e <__sinit+0x6>
 800384c:	4770      	bx	lr
 800384e:	e719      	b.n	8003684 <__sinit.part.0>

08003850 <__sfp_lock_acquire>:
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop

08003854 <__sfp_lock_release>:
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop

08003858 <__sinit_lock_acquire>:
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop

0800385c <__sinit_lock_release>:
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop

08003860 <__fp_lock_all>:
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <__fp_lock_all+0xc>)
 8003862:	4903      	ldr	r1, [pc, #12]	; (8003870 <__fp_lock_all+0x10>)
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	f000 badd 	b.w	8003e24 <_fwalk>
 800386a:	bf00      	nop
 800386c:	20000010 	.word	0x20000010
 8003870:	08003671 	.word	0x08003671

08003874 <__fp_unlock_all>:
 8003874:	4b02      	ldr	r3, [pc, #8]	; (8003880 <__fp_unlock_all+0xc>)
 8003876:	4903      	ldr	r1, [pc, #12]	; (8003884 <__fp_unlock_all+0x10>)
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	f000 bad3 	b.w	8003e24 <_fwalk>
 800387e:	bf00      	nop
 8003880:	20000010 	.word	0x20000010
 8003884:	08003681 	.word	0x08003681

08003888 <_malloc_trim_r>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	4f24      	ldr	r7, [pc, #144]	; (800391c <_malloc_trim_r+0x94>)
 800388c:	460c      	mov	r4, r1
 800388e:	4606      	mov	r6, r0
 8003890:	f000 ffdc 	bl	800484c <__malloc_lock>
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	6855      	ldr	r5, [r2, #4]
 8003898:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 800389c:	330f      	adds	r3, #15
 800389e:	f025 0503 	bic.w	r5, r5, #3
 80038a2:	442b      	add	r3, r5
 80038a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80038a8:	f023 030f 	bic.w	r3, r3, #15
 80038ac:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 80038b0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80038b4:	db07      	blt.n	80038c6 <_malloc_trim_r+0x3e>
 80038b6:	2100      	movs	r1, #0
 80038b8:	4630      	mov	r0, r6
 80038ba:	f004 fe0b 	bl	80084d4 <_sbrk_r>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	442b      	add	r3, r5
 80038c2:	4298      	cmp	r0, r3
 80038c4:	d004      	beq.n	80038d0 <_malloc_trim_r+0x48>
 80038c6:	4630      	mov	r0, r6
 80038c8:	f000 ffc2 	bl	8004850 <__malloc_unlock>
 80038cc:	2000      	movs	r0, #0
 80038ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d0:	4261      	negs	r1, r4
 80038d2:	4630      	mov	r0, r6
 80038d4:	f004 fdfe 	bl	80084d4 <_sbrk_r>
 80038d8:	3001      	adds	r0, #1
 80038da:	d00d      	beq.n	80038f8 <_malloc_trim_r+0x70>
 80038dc:	4a10      	ldr	r2, [pc, #64]	; (8003920 <_malloc_trim_r+0x98>)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	1b2d      	subs	r5, r5, r4
 80038e2:	f045 0501 	orr.w	r5, r5, #1
 80038e6:	605d      	str	r5, [r3, #4]
 80038e8:	6813      	ldr	r3, [r2, #0]
 80038ea:	4630      	mov	r0, r6
 80038ec:	1b1b      	subs	r3, r3, r4
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	f000 ffae 	bl	8004850 <__malloc_unlock>
 80038f4:	2001      	movs	r0, #1
 80038f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f8:	2100      	movs	r1, #0
 80038fa:	4630      	mov	r0, r6
 80038fc:	f004 fdea 	bl	80084d4 <_sbrk_r>
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	1a83      	subs	r3, r0, r2
 8003904:	2b0f      	cmp	r3, #15
 8003906:	ddde      	ble.n	80038c6 <_malloc_trim_r+0x3e>
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6053      	str	r3, [r2, #4]
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <_malloc_trim_r+0x9c>)
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <_malloc_trim_r+0x98>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	1ac0      	subs	r0, r0, r3
 8003916:	6008      	str	r0, [r1, #0]
 8003918:	e7d5      	b.n	80038c6 <_malloc_trim_r+0x3e>
 800391a:	bf00      	nop
 800391c:	20000440 	.word	0x20000440
 8003920:	20000c4c 	.word	0x20000c4c
 8003924:	20000848 	.word	0x20000848

08003928 <_free_r>:
 8003928:	2900      	cmp	r1, #0
 800392a:	d061      	beq.n	80039f0 <_free_r+0xc8>
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	460c      	mov	r4, r1
 8003930:	4606      	mov	r6, r0
 8003932:	f000 ff8b 	bl	800484c <__malloc_lock>
 8003936:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800393a:	4f7b      	ldr	r7, [pc, #492]	; (8003b28 <_free_r+0x200>)
 800393c:	f1a4 0508 	sub.w	r5, r4, #8
 8003940:	f022 0101 	bic.w	r1, r2, #1
 8003944:	eb05 0c01 	add.w	ip, r5, r1
 8003948:	68b8      	ldr	r0, [r7, #8]
 800394a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800394e:	4560      	cmp	r0, ip
 8003950:	f023 0303 	bic.w	r3, r3, #3
 8003954:	f000 808b 	beq.w	8003a6e <_free_r+0x146>
 8003958:	07d2      	lsls	r2, r2, #31
 800395a:	f8cc 3004 	str.w	r3, [ip, #4]
 800395e:	d432      	bmi.n	80039c6 <_free_r+0x9e>
 8003960:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8003964:	1aad      	subs	r5, r5, r2
 8003966:	4411      	add	r1, r2
 8003968:	68aa      	ldr	r2, [r5, #8]
 800396a:	f107 0008 	add.w	r0, r7, #8
 800396e:	4282      	cmp	r2, r0
 8003970:	d06a      	beq.n	8003a48 <_free_r+0x120>
 8003972:	eb0c 0403 	add.w	r4, ip, r3
 8003976:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800397a:	68ec      	ldr	r4, [r5, #12]
 800397c:	60d4      	str	r4, [r2, #12]
 800397e:	f01e 0f01 	tst.w	lr, #1
 8003982:	60a2      	str	r2, [r4, #8]
 8003984:	f000 8097 	beq.w	8003ab6 <_free_r+0x18e>
 8003988:	f041 0301 	orr.w	r3, r1, #1
 800398c:	606b      	str	r3, [r5, #4]
 800398e:	f8cc 1000 	str.w	r1, [ip]
 8003992:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003996:	d235      	bcs.n	8003a04 <_free_r+0xdc>
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	08cb      	lsrs	r3, r1, #3
 800399c:	0948      	lsrs	r0, r1, #5
 800399e:	2101      	movs	r1, #1
 80039a0:	3301      	adds	r3, #1
 80039a2:	4081      	lsls	r1, r0
 80039a4:	4311      	orrs	r1, r2
 80039a6:	6079      	str	r1, [r7, #4]
 80039a8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 80039ac:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 80039b0:	3a08      	subs	r2, #8
 80039b2:	e9c5 1202 	strd	r1, r2, [r5, #8]
 80039b6:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 80039ba:	60cd      	str	r5, [r1, #12]
 80039bc:	4630      	mov	r0, r6
 80039be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039c2:	f000 bf45 	b.w	8004850 <__malloc_unlock>
 80039c6:	eb0c 0203 	add.w	r2, ip, r3
 80039ca:	6852      	ldr	r2, [r2, #4]
 80039cc:	07d0      	lsls	r0, r2, #31
 80039ce:	d410      	bmi.n	80039f2 <_free_r+0xca>
 80039d0:	4419      	add	r1, r3
 80039d2:	f107 0008 	add.w	r0, r7, #8
 80039d6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80039da:	4283      	cmp	r3, r0
 80039dc:	d073      	beq.n	8003ac6 <_free_r+0x19e>
 80039de:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	6093      	str	r3, [r2, #8]
 80039e6:	f041 0301 	orr.w	r3, r1, #1
 80039ea:	606b      	str	r3, [r5, #4]
 80039ec:	5069      	str	r1, [r5, r1]
 80039ee:	e7d0      	b.n	8003992 <_free_r+0x6a>
 80039f0:	4770      	bx	lr
 80039f2:	f041 0301 	orr.w	r3, r1, #1
 80039f6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80039fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80039fe:	f8cc 1000 	str.w	r1, [ip]
 8003a02:	d3c9      	bcc.n	8003998 <_free_r+0x70>
 8003a04:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8003a08:	ea4f 2351 	mov.w	r3, r1, lsr #9
 8003a0c:	d248      	bcs.n	8003aa0 <_free_r+0x178>
 8003a0e:	098b      	lsrs	r3, r1, #6
 8003a10:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8003a14:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003a18:	00c3      	lsls	r3, r0, #3
 8003a1a:	18f8      	adds	r0, r7, r3
 8003a1c:	58fb      	ldr	r3, [r7, r3]
 8003a1e:	3808      	subs	r0, #8
 8003a20:	4298      	cmp	r0, r3
 8003a22:	d059      	beq.n	8003ad8 <_free_r+0x1b0>
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	f022 0203 	bic.w	r2, r2, #3
 8003a2a:	428a      	cmp	r2, r1
 8003a2c:	d902      	bls.n	8003a34 <_free_r+0x10c>
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4298      	cmp	r0, r3
 8003a32:	d1f7      	bne.n	8003a24 <_free_r+0xfc>
 8003a34:	68d8      	ldr	r0, [r3, #12]
 8003a36:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8003a3a:	6085      	str	r5, [r0, #8]
 8003a3c:	60dd      	str	r5, [r3, #12]
 8003a3e:	4630      	mov	r0, r6
 8003a40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a44:	f000 bf04 	b.w	8004850 <__malloc_unlock>
 8003a48:	eb0c 0203 	add.w	r2, ip, r3
 8003a4c:	6852      	ldr	r2, [r2, #4]
 8003a4e:	07d2      	lsls	r2, r2, #31
 8003a50:	d463      	bmi.n	8003b1a <_free_r+0x1f2>
 8003a52:	440b      	add	r3, r1
 8003a54:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8003a58:	60ca      	str	r2, [r1, #12]
 8003a5a:	6091      	str	r1, [r2, #8]
 8003a5c:	f043 0201 	orr.w	r2, r3, #1
 8003a60:	606a      	str	r2, [r5, #4]
 8003a62:	4630      	mov	r0, r6
 8003a64:	50eb      	str	r3, [r5, r3]
 8003a66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a6a:	f000 bef1 	b.w	8004850 <__malloc_unlock>
 8003a6e:	440b      	add	r3, r1
 8003a70:	07d1      	lsls	r1, r2, #31
 8003a72:	d407      	bmi.n	8003a84 <_free_r+0x15c>
 8003a74:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8003a78:	1aad      	subs	r5, r5, r2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8003a80:	60ca      	str	r2, [r1, #12]
 8003a82:	6091      	str	r1, [r2, #8]
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	606a      	str	r2, [r5, #4]
 8003a8a:	4a28      	ldr	r2, [pc, #160]	; (8003b2c <_free_r+0x204>)
 8003a8c:	60bd      	str	r5, [r7, #8]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d893      	bhi.n	80039bc <_free_r+0x94>
 8003a94:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <_free_r+0x208>)
 8003a96:	4630      	mov	r0, r6
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	f7ff fef5 	bl	8003888 <_malloc_trim_r>
 8003a9e:	e78d      	b.n	80039bc <_free_r+0x94>
 8003aa0:	2b14      	cmp	r3, #20
 8003aa2:	d90a      	bls.n	8003aba <_free_r+0x192>
 8003aa4:	2b54      	cmp	r3, #84	; 0x54
 8003aa6:	d81f      	bhi.n	8003ae8 <_free_r+0x1c0>
 8003aa8:	0b0b      	lsrs	r3, r1, #12
 8003aaa:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8003aae:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8003ab2:	00c3      	lsls	r3, r0, #3
 8003ab4:	e7b1      	b.n	8003a1a <_free_r+0xf2>
 8003ab6:	4419      	add	r1, r3
 8003ab8:	e78d      	b.n	80039d6 <_free_r+0xae>
 8003aba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8003abe:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8003ac2:	00c3      	lsls	r3, r0, #3
 8003ac4:	e7a9      	b.n	8003a1a <_free_r+0xf2>
 8003ac6:	f041 0301 	orr.w	r3, r1, #1
 8003aca:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8003ace:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8003ad2:	606b      	str	r3, [r5, #4]
 8003ad4:	5069      	str	r1, [r5, r1]
 8003ad6:	e771      	b.n	80039bc <_free_r+0x94>
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	1092      	asrs	r2, r2, #2
 8003adc:	2401      	movs	r4, #1
 8003ade:	fa04 f202 	lsl.w	r2, r4, r2
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	e7a6      	b.n	8003a36 <_free_r+0x10e>
 8003ae8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003aec:	d806      	bhi.n	8003afc <_free_r+0x1d4>
 8003aee:	0bcb      	lsrs	r3, r1, #15
 8003af0:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8003af4:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8003af8:	00c3      	lsls	r3, r0, #3
 8003afa:	e78e      	b.n	8003a1a <_free_r+0xf2>
 8003afc:	f240 5254 	movw	r2, #1364	; 0x554
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d806      	bhi.n	8003b12 <_free_r+0x1ea>
 8003b04:	0c8b      	lsrs	r3, r1, #18
 8003b06:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8003b0a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003b0e:	00c3      	lsls	r3, r0, #3
 8003b10:	e783      	b.n	8003a1a <_free_r+0xf2>
 8003b12:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8003b16:	227e      	movs	r2, #126	; 0x7e
 8003b18:	e77f      	b.n	8003a1a <_free_r+0xf2>
 8003b1a:	f041 0301 	orr.w	r3, r1, #1
 8003b1e:	606b      	str	r3, [r5, #4]
 8003b20:	f8cc 1000 	str.w	r1, [ip]
 8003b24:	e74a      	b.n	80039bc <_free_r+0x94>
 8003b26:	bf00      	nop
 8003b28:	20000440 	.word	0x20000440
 8003b2c:	2000084c 	.word	0x2000084c
 8003b30:	20000c48 	.word	0x20000c48

08003b34 <__sfvwrite_r>:
 8003b34:	6893      	ldr	r3, [r2, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8085 	beq.w	8003c46 <__sfvwrite_r+0x112>
 8003b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b40:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8003b44:	460c      	mov	r4, r1
 8003b46:	0719      	lsls	r1, r3, #28
 8003b48:	4680      	mov	r8, r0
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	4617      	mov	r7, r2
 8003b4e:	b298      	uxth	r0, r3
 8003b50:	d525      	bpl.n	8003b9e <__sfvwrite_r+0x6a>
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	b31b      	cbz	r3, 8003b9e <__sfvwrite_r+0x6a>
 8003b56:	f010 0302 	ands.w	r3, r0, #2
 8003b5a:	683d      	ldr	r5, [r7, #0]
 8003b5c:	d02d      	beq.n	8003bba <__sfvwrite_r+0x86>
 8003b5e:	f04f 0a00 	mov.w	sl, #0
 8003b62:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8003e20 <__sfvwrite_r+0x2ec>
 8003b66:	4656      	mov	r6, sl
 8003b68:	46b9      	mov	r9, r7
 8003b6a:	455e      	cmp	r6, fp
 8003b6c:	4633      	mov	r3, r6
 8003b6e:	4652      	mov	r2, sl
 8003b70:	bf28      	it	cs
 8003b72:	465b      	movcs	r3, fp
 8003b74:	4640      	mov	r0, r8
 8003b76:	2e00      	cmp	r6, #0
 8003b78:	d052      	beq.n	8003c20 <__sfvwrite_r+0xec>
 8003b7a:	69e1      	ldr	r1, [r4, #28]
 8003b7c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003b7e:	47b8      	blx	r7
 8003b80:	2800      	cmp	r0, #0
 8003b82:	dd56      	ble.n	8003c32 <__sfvwrite_r+0xfe>
 8003b84:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003b88:	1a1b      	subs	r3, r3, r0
 8003b8a:	4482      	add	sl, r0
 8003b8c:	1a36      	subs	r6, r6, r0
 8003b8e:	f8c9 3008 	str.w	r3, [r9, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e9      	bne.n	8003b6a <__sfvwrite_r+0x36>
 8003b96:	2000      	movs	r0, #0
 8003b98:	b003      	add	sp, #12
 8003b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	4640      	mov	r0, r8
 8003ba2:	f7fe fbbf 	bl	8002324 <__swsetup_r>
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	f040 8136 	bne.w	8003e18 <__sfvwrite_r+0x2e4>
 8003bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bb0:	683d      	ldr	r5, [r7, #0]
 8003bb2:	b298      	uxth	r0, r3
 8003bb4:	f010 0302 	ands.w	r3, r0, #2
 8003bb8:	d1d1      	bne.n	8003b5e <__sfvwrite_r+0x2a>
 8003bba:	f010 0901 	ands.w	r9, r0, #1
 8003bbe:	d144      	bne.n	8003c4a <__sfvwrite_r+0x116>
 8003bc0:	464e      	mov	r6, r9
 8003bc2:	9700      	str	r7, [sp, #0]
 8003bc4:	b346      	cbz	r6, 8003c18 <__sfvwrite_r+0xe4>
 8003bc6:	0582      	lsls	r2, r0, #22
 8003bc8:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8003bcc:	f140 8083 	bpl.w	8003cd6 <__sfvwrite_r+0x1a2>
 8003bd0:	45b3      	cmp	fp, r6
 8003bd2:	465a      	mov	r2, fp
 8003bd4:	f200 80b2 	bhi.w	8003d3c <__sfvwrite_r+0x208>
 8003bd8:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8003bdc:	f040 80bf 	bne.w	8003d5e <__sfvwrite_r+0x22a>
 8003be0:	6820      	ldr	r0, [r4, #0]
 8003be2:	9201      	str	r2, [sp, #4]
 8003be4:	4649      	mov	r1, r9
 8003be6:	f000 fdb5 	bl	8004754 <memmove>
 8003bea:	68a3      	ldr	r3, [r4, #8]
 8003bec:	9a01      	ldr	r2, [sp, #4]
 8003bee:	eba3 010b 	sub.w	r1, r3, fp
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	60a1      	str	r1, [r4, #8]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	46b2      	mov	sl, r6
 8003bfa:	6023      	str	r3, [r4, #0]
 8003bfc:	2600      	movs	r6, #0
 8003bfe:	9b00      	ldr	r3, [sp, #0]
 8003c00:	6898      	ldr	r0, [r3, #8]
 8003c02:	eba0 000a 	sub.w	r0, r0, sl
 8003c06:	44d1      	add	r9, sl
 8003c08:	6098      	str	r0, [r3, #8]
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d0c3      	beq.n	8003b96 <__sfvwrite_r+0x62>
 8003c0e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8003c12:	b280      	uxth	r0, r0
 8003c14:	2e00      	cmp	r6, #0
 8003c16:	d1d6      	bne.n	8003bc6 <__sfvwrite_r+0x92>
 8003c18:	e9d5 9600 	ldrd	r9, r6, [r5]
 8003c1c:	3508      	adds	r5, #8
 8003c1e:	e7d1      	b.n	8003bc4 <__sfvwrite_r+0x90>
 8003c20:	e9d5 a600 	ldrd	sl, r6, [r5]
 8003c24:	3508      	adds	r5, #8
 8003c26:	e7a0      	b.n	8003b6a <__sfvwrite_r+0x36>
 8003c28:	4621      	mov	r1, r4
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	f7ff fce2 	bl	80035f4 <_fflush_r>
 8003c30:	b380      	cbz	r0, 8003c94 <__sfvwrite_r+0x160>
 8003c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c3e:	81a3      	strh	r3, [r4, #12]
 8003c40:	b003      	add	sp, #12
 8003c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c46:	2000      	movs	r0, #0
 8003c48:	4770      	bx	lr
 8003c4a:	461e      	mov	r6, r3
 8003c4c:	46aa      	mov	sl, r5
 8003c4e:	4699      	mov	r9, r3
 8003c50:	4618      	mov	r0, r3
 8003c52:	461d      	mov	r5, r3
 8003c54:	9700      	str	r7, [sp, #0]
 8003c56:	b356      	cbz	r6, 8003cae <__sfvwrite_r+0x17a>
 8003c58:	b388      	cbz	r0, 8003cbe <__sfvwrite_r+0x18a>
 8003c5a:	464a      	mov	r2, r9
 8003c5c:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8003c60:	6820      	ldr	r0, [r4, #0]
 8003c62:	42b2      	cmp	r2, r6
 8003c64:	bf28      	it	cs
 8003c66:	4632      	movcs	r2, r6
 8003c68:	4288      	cmp	r0, r1
 8003c6a:	d905      	bls.n	8003c78 <__sfvwrite_r+0x144>
 8003c6c:	68a1      	ldr	r1, [r4, #8]
 8003c6e:	eb03 0b01 	add.w	fp, r3, r1
 8003c72:	455a      	cmp	r2, fp
 8003c74:	f300 80a6 	bgt.w	8003dc4 <__sfvwrite_r+0x290>
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	dc63      	bgt.n	8003d44 <__sfvwrite_r+0x210>
 8003c7c:	69e1      	ldr	r1, [r4, #28]
 8003c7e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003c80:	462a      	mov	r2, r5
 8003c82:	4640      	mov	r0, r8
 8003c84:	47b8      	blx	r7
 8003c86:	f1b0 0b00 	subs.w	fp, r0, #0
 8003c8a:	ddd2      	ble.n	8003c32 <__sfvwrite_r+0xfe>
 8003c8c:	ebb9 090b 	subs.w	r9, r9, fp
 8003c90:	d0ca      	beq.n	8003c28 <__sfvwrite_r+0xf4>
 8003c92:	2001      	movs	r0, #1
 8003c94:	9a00      	ldr	r2, [sp, #0]
 8003c96:	6893      	ldr	r3, [r2, #8]
 8003c98:	eba3 030b 	sub.w	r3, r3, fp
 8003c9c:	445d      	add	r5, fp
 8003c9e:	eba6 060b 	sub.w	r6, r6, fp
 8003ca2:	6093      	str	r3, [r2, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f43f af76 	beq.w	8003b96 <__sfvwrite_r+0x62>
 8003caa:	2e00      	cmp	r6, #0
 8003cac:	d1d4      	bne.n	8003c58 <__sfvwrite_r+0x124>
 8003cae:	f10a 0308 	add.w	r3, sl, #8
 8003cb2:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 8003cb6:	469a      	mov	sl, r3
 8003cb8:	3308      	adds	r3, #8
 8003cba:	2e00      	cmp	r6, #0
 8003cbc:	d0f9      	beq.n	8003cb2 <__sfvwrite_r+0x17e>
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	210a      	movs	r1, #10
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f000 fc5c 	bl	8004580 <memchr>
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	f000 809c 	beq.w	8003e06 <__sfvwrite_r+0x2d2>
 8003cce:	3001      	adds	r0, #1
 8003cd0:	eba0 0905 	sub.w	r9, r0, r5
 8003cd4:	e7c1      	b.n	8003c5a <__sfvwrite_r+0x126>
 8003cd6:	6820      	ldr	r0, [r4, #0]
 8003cd8:	6923      	ldr	r3, [r4, #16]
 8003cda:	4298      	cmp	r0, r3
 8003cdc:	d816      	bhi.n	8003d0c <__sfvwrite_r+0x1d8>
 8003cde:	6963      	ldr	r3, [r4, #20]
 8003ce0:	42b3      	cmp	r3, r6
 8003ce2:	d813      	bhi.n	8003d0c <__sfvwrite_r+0x1d8>
 8003ce4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003ce8:	42b2      	cmp	r2, r6
 8003cea:	bf28      	it	cs
 8003cec:	4632      	movcs	r2, r6
 8003cee:	69e1      	ldr	r1, [r4, #28]
 8003cf0:	fb92 f2f3 	sdiv	r2, r2, r3
 8003cf4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	464a      	mov	r2, r9
 8003cfe:	47b8      	blx	r7
 8003d00:	f1b0 0a00 	subs.w	sl, r0, #0
 8003d04:	dd95      	ble.n	8003c32 <__sfvwrite_r+0xfe>
 8003d06:	eba6 060a 	sub.w	r6, r6, sl
 8003d0a:	e778      	b.n	8003bfe <__sfvwrite_r+0xca>
 8003d0c:	45b3      	cmp	fp, r6
 8003d0e:	46da      	mov	sl, fp
 8003d10:	bf28      	it	cs
 8003d12:	46b2      	movcs	sl, r6
 8003d14:	4652      	mov	r2, sl
 8003d16:	4649      	mov	r1, r9
 8003d18:	f000 fd1c 	bl	8004754 <memmove>
 8003d1c:	68a3      	ldr	r3, [r4, #8]
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	eba3 030a 	sub.w	r3, r3, sl
 8003d24:	4452      	add	r2, sl
 8003d26:	60a3      	str	r3, [r4, #8]
 8003d28:	6022      	str	r2, [r4, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1eb      	bne.n	8003d06 <__sfvwrite_r+0x1d2>
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4640      	mov	r0, r8
 8003d32:	f7ff fc5f 	bl	80035f4 <_fflush_r>
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d0e5      	beq.n	8003d06 <__sfvwrite_r+0x1d2>
 8003d3a:	e77a      	b.n	8003c32 <__sfvwrite_r+0xfe>
 8003d3c:	6820      	ldr	r0, [r4, #0]
 8003d3e:	46b3      	mov	fp, r6
 8003d40:	4632      	mov	r2, r6
 8003d42:	e74e      	b.n	8003be2 <__sfvwrite_r+0xae>
 8003d44:	4629      	mov	r1, r5
 8003d46:	9201      	str	r2, [sp, #4]
 8003d48:	f000 fd04 	bl	8004754 <memmove>
 8003d4c:	9a01      	ldr	r2, [sp, #4]
 8003d4e:	68a3      	ldr	r3, [r4, #8]
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	60a3      	str	r3, [r4, #8]
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	4693      	mov	fp, r2
 8003d5c:	e796      	b.n	8003c8c <__sfvwrite_r+0x158>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	6921      	ldr	r1, [r4, #16]
 8003d62:	eba3 0b01 	sub.w	fp, r3, r1
 8003d66:	6963      	ldr	r3, [r4, #20]
 8003d68:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8003d6c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8003d70:	f10b 0301 	add.w	r3, fp, #1
 8003d74:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8003d78:	4433      	add	r3, r6
 8003d7a:	4553      	cmp	r3, sl
 8003d7c:	4652      	mov	r2, sl
 8003d7e:	bf84      	itt	hi
 8003d80:	469a      	movhi	sl, r3
 8003d82:	4652      	movhi	r2, sl
 8003d84:	0543      	lsls	r3, r0, #21
 8003d86:	d52c      	bpl.n	8003de2 <__sfvwrite_r+0x2ae>
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f000 f948 	bl	8004020 <_malloc_r>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d03b      	beq.n	8003e0c <__sfvwrite_r+0x2d8>
 8003d94:	465a      	mov	r2, fp
 8003d96:	6921      	ldr	r1, [r4, #16]
 8003d98:	9001      	str	r0, [sp, #4]
 8003d9a:	f000 fc41 	bl	8004620 <memcpy>
 8003d9e:	89a2      	ldrh	r2, [r4, #12]
 8003da0:	9b01      	ldr	r3, [sp, #4]
 8003da2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8003da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003daa:	81a2      	strh	r2, [r4, #12]
 8003dac:	eb03 000b 	add.w	r0, r3, fp
 8003db0:	6123      	str	r3, [r4, #16]
 8003db2:	ebaa 030b 	sub.w	r3, sl, fp
 8003db6:	f8c4 a014 	str.w	sl, [r4, #20]
 8003dba:	60a3      	str	r3, [r4, #8]
 8003dbc:	6020      	str	r0, [r4, #0]
 8003dbe:	46b3      	mov	fp, r6
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	e70e      	b.n	8003be2 <__sfvwrite_r+0xae>
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	465a      	mov	r2, fp
 8003dc8:	f000 fcc4 	bl	8004754 <memmove>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	445b      	add	r3, fp
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	f7ff fc0d 	bl	80035f4 <_fflush_r>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	f43f af56 	beq.w	8003c8c <__sfvwrite_r+0x158>
 8003de0:	e727      	b.n	8003c32 <__sfvwrite_r+0xfe>
 8003de2:	4640      	mov	r0, r8
 8003de4:	f001 fae2 	bl	80053ac <_realloc_r>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d1de      	bne.n	8003dac <__sfvwrite_r+0x278>
 8003dee:	6921      	ldr	r1, [r4, #16]
 8003df0:	4640      	mov	r0, r8
 8003df2:	f7ff fd99 	bl	8003928 <_free_r>
 8003df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e00:	f8c8 2000 	str.w	r2, [r8]
 8003e04:	e717      	b.n	8003c36 <__sfvwrite_r+0x102>
 8003e06:	1c72      	adds	r2, r6, #1
 8003e08:	4691      	mov	r9, r2
 8003e0a:	e727      	b.n	8003c5c <__sfvwrite_r+0x128>
 8003e0c:	220c      	movs	r2, #12
 8003e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e12:	f8c8 2000 	str.w	r2, [r8]
 8003e16:	e70e      	b.n	8003c36 <__sfvwrite_r+0x102>
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e1c:	e6bc      	b.n	8003b98 <__sfvwrite_r+0x64>
 8003e1e:	bf00      	nop
 8003e20:	7ffffc00 	.word	0x7ffffc00

08003e24 <_fwalk>:
 8003e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e28:	4688      	mov	r8, r1
 8003e2a:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
 8003e2e:	2600      	movs	r6, #0
 8003e30:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8003e34:	3d01      	subs	r5, #1
 8003e36:	d40f      	bmi.n	8003e58 <_fwalk+0x34>
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003e40:	d906      	bls.n	8003e50 <_fwalk+0x2c>
 8003e42:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003e46:	3301      	adds	r3, #1
 8003e48:	4620      	mov	r0, r4
 8003e4a:	d001      	beq.n	8003e50 <_fwalk+0x2c>
 8003e4c:	47c0      	blx	r8
 8003e4e:	4306      	orrs	r6, r0
 8003e50:	1c6b      	adds	r3, r5, #1
 8003e52:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003e56:	d1ef      	bne.n	8003e38 <_fwalk+0x14>
 8003e58:	683f      	ldr	r7, [r7, #0]
 8003e5a:	2f00      	cmp	r7, #0
 8003e5c:	d1e8      	bne.n	8003e30 <_fwalk+0xc>
 8003e5e:	4630      	mov	r0, r6
 8003e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e64 <_fwalk_reent>:
 8003e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e68:	4607      	mov	r7, r0
 8003e6a:	4688      	mov	r8, r1
 8003e6c:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
 8003e70:	f04f 0900 	mov.w	r9, #0
 8003e74:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8003e78:	3d01      	subs	r5, #1
 8003e7a:	d411      	bmi.n	8003ea0 <_fwalk_reent+0x3c>
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003e84:	d908      	bls.n	8003e98 <_fwalk_reent+0x34>
 8003e86:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	d003      	beq.n	8003e98 <_fwalk_reent+0x34>
 8003e90:	4638      	mov	r0, r7
 8003e92:	47c0      	blx	r8
 8003e94:	ea49 0900 	orr.w	r9, r9, r0
 8003e98:	1c6b      	adds	r3, r5, #1
 8003e9a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003e9e:	d1ed      	bne.n	8003e7c <_fwalk_reent+0x18>
 8003ea0:	6836      	ldr	r6, [r6, #0]
 8003ea2:	2e00      	cmp	r6, #0
 8003ea4:	d1e6      	bne.n	8003e74 <_fwalk_reent+0x10>
 8003ea6:	4648      	mov	r0, r9
 8003ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003eac <__localeconv_l>:
 8003eac:	30f0      	adds	r0, #240	; 0xf0
 8003eae:	4770      	bx	lr

08003eb0 <_localeconv_r>:
 8003eb0:	4800      	ldr	r0, [pc, #0]	; (8003eb4 <_localeconv_r+0x4>)
 8003eb2:	4770      	bx	lr
 8003eb4:	20000940 	.word	0x20000940

08003eb8 <localeconv>:
 8003eb8:	4800      	ldr	r0, [pc, #0]	; (8003ebc <localeconv+0x4>)
 8003eba:	4770      	bx	lr
 8003ebc:	20000940 	.word	0x20000940

08003ec0 <__smakebuf_r>:
 8003ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec4:	898b      	ldrh	r3, [r1, #12]
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	0799      	lsls	r1, r3, #30
 8003eca:	b096      	sub	sp, #88	; 0x58
 8003ecc:	d508      	bpl.n	8003ee0 <__smakebuf_r+0x20>
 8003ece:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	b016      	add	sp, #88	; 0x58
 8003edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	db27      	blt.n	8003f3a <__smakebuf_r+0x7a>
 8003eea:	466a      	mov	r2, sp
 8003eec:	f004 fb0d 	bl	800850a <_fstat_r>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	db21      	blt.n	8003f38 <__smakebuf_r+0x78>
 8003ef4:	9d01      	ldr	r5, [sp, #4]
 8003ef6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8003efa:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 8003efe:	fab5 f585 	clz	r5, r5
 8003f02:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8003f06:	096d      	lsrs	r5, r5, #5
 8003f08:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f000 f886 	bl	8004020 <_malloc_r>
 8003f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f18:	b1f0      	cbz	r0, 8003f58 <__smakebuf_r+0x98>
 8003f1a:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <__smakebuf_r+0xdc>)
 8003f1c:	63f2      	str	r2, [r6, #60]	; 0x3c
 8003f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f22:	f8c4 8014 	str.w	r8, [r4, #20]
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	6020      	str	r0, [r4, #0]
 8003f2a:	6120      	str	r0, [r4, #16]
 8003f2c:	bb35      	cbnz	r5, 8003f7c <__smakebuf_r+0xbc>
 8003f2e:	433b      	orrs	r3, r7
 8003f30:	81a3      	strh	r3, [r4, #12]
 8003f32:	b016      	add	sp, #88	; 0x58
 8003f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 8003f3e:	d019      	beq.n	8003f74 <__smakebuf_r+0xb4>
 8003f40:	f04f 0840 	mov.w	r8, #64	; 0x40
 8003f44:	4641      	mov	r1, r8
 8003f46:	4630      	mov	r0, r6
 8003f48:	f000 f86a 	bl	8004020 <_malloc_r>
 8003f4c:	2500      	movs	r5, #0
 8003f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f52:	462f      	mov	r7, r5
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d1e0      	bne.n	8003f1a <__smakebuf_r+0x5a>
 8003f58:	059a      	lsls	r2, r3, #22
 8003f5a:	d4be      	bmi.n	8003eda <__smakebuf_r+0x1a>
 8003f5c:	f023 0303 	bic.w	r3, r3, #3
 8003f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	2101      	movs	r1, #1
 8003f6a:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8003f6e:	81a3      	strh	r3, [r4, #12]
 8003f70:	6022      	str	r2, [r4, #0]
 8003f72:	e7b2      	b.n	8003eda <__smakebuf_r+0x1a>
 8003f74:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8003f78:	462f      	mov	r7, r5
 8003f7a:	e7c7      	b.n	8003f0c <__smakebuf_r+0x4c>
 8003f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f80:	4630      	mov	r0, r6
 8003f82:	f004 fac7 	bl	8008514 <_isatty_r>
 8003f86:	b910      	cbnz	r0, 8003f8e <__smakebuf_r+0xce>
 8003f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f8c:	e7cf      	b.n	8003f2e <__smakebuf_r+0x6e>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	f023 0303 	bic.w	r3, r3, #3
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	b21b      	sxth	r3, r3
 8003f9a:	e7c8      	b.n	8003f2e <__smakebuf_r+0x6e>
 8003f9c:	08003675 	.word	0x08003675

08003fa0 <__swhatbuf_r>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa8:	2900      	cmp	r1, #0
 8003faa:	b096      	sub	sp, #88	; 0x58
 8003fac:	4615      	mov	r5, r2
 8003fae:	461e      	mov	r6, r3
 8003fb0:	db14      	blt.n	8003fdc <__swhatbuf_r+0x3c>
 8003fb2:	466a      	mov	r2, sp
 8003fb4:	f004 faa9 	bl	800850a <_fstat_r>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	db0f      	blt.n	8003fdc <__swhatbuf_r+0x3c>
 8003fbc:	9a01      	ldr	r2, [sp, #4]
 8003fbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fc2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8003fc6:	fab2 f282 	clz	r2, r2
 8003fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fce:	0952      	lsrs	r2, r2, #5
 8003fd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fd4:	6032      	str	r2, [r6, #0]
 8003fd6:	602b      	str	r3, [r5, #0]
 8003fd8:	b016      	add	sp, #88	; 0x58
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8003fe6:	6033      	str	r3, [r6, #0]
 8003fe8:	d004      	beq.n	8003ff4 <__swhatbuf_r+0x54>
 8003fea:	2240      	movs	r2, #64	; 0x40
 8003fec:	4618      	mov	r0, r3
 8003fee:	602a      	str	r2, [r5, #0]
 8003ff0:	b016      	add	sp, #88	; 0x58
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
 8003ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff8:	602b      	str	r3, [r5, #0]
 8003ffa:	b016      	add	sp, #88	; 0x58
 8003ffc:	bd70      	pop	{r4, r5, r6, pc}
 8003ffe:	bf00      	nop

08004000 <malloc>:
 8004000:	4b02      	ldr	r3, [pc, #8]	; (800400c <malloc+0xc>)
 8004002:	4601      	mov	r1, r0
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f000 b80b 	b.w	8004020 <_malloc_r>
 800400a:	bf00      	nop
 800400c:	20000010 	.word	0x20000010

08004010 <free>:
 8004010:	4b02      	ldr	r3, [pc, #8]	; (800401c <free+0xc>)
 8004012:	4601      	mov	r1, r0
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	f7ff bc87 	b.w	8003928 <_free_r>
 800401a:	bf00      	nop
 800401c:	20000010 	.word	0x20000010

08004020 <_malloc_r>:
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004024:	f101 060b 	add.w	r6, r1, #11
 8004028:	2e16      	cmp	r6, #22
 800402a:	b083      	sub	sp, #12
 800402c:	4604      	mov	r4, r0
 800402e:	d824      	bhi.n	800407a <_malloc_r+0x5a>
 8004030:	2910      	cmp	r1, #16
 8004032:	f200 80ba 	bhi.w	80041aa <_malloc_r+0x18a>
 8004036:	f000 fc09 	bl	800484c <__malloc_lock>
 800403a:	2610      	movs	r6, #16
 800403c:	2218      	movs	r2, #24
 800403e:	2002      	movs	r0, #2
 8004040:	4fb7      	ldr	r7, [pc, #732]	; (8004320 <_malloc_r+0x300>)
 8004042:	443a      	add	r2, r7
 8004044:	f1a2 0108 	sub.w	r1, r2, #8
 8004048:	6853      	ldr	r3, [r2, #4]
 800404a:	428b      	cmp	r3, r1
 800404c:	f000 80ba 	beq.w	80041c4 <_malloc_r+0x1a4>
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	68d9      	ldr	r1, [r3, #12]
 8004054:	f022 0203 	bic.w	r2, r2, #3
 8004058:	441a      	add	r2, r3
 800405a:	689d      	ldr	r5, [r3, #8]
 800405c:	60e9      	str	r1, [r5, #12]
 800405e:	608d      	str	r5, [r1, #8]
 8004060:	6851      	ldr	r1, [r2, #4]
 8004062:	f041 0101 	orr.w	r1, r1, #1
 8004066:	4620      	mov	r0, r4
 8004068:	6051      	str	r1, [r2, #4]
 800406a:	f103 0508 	add.w	r5, r3, #8
 800406e:	f000 fbef 	bl	8004850 <__malloc_unlock>
 8004072:	4628      	mov	r0, r5
 8004074:	b003      	add	sp, #12
 8004076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407a:	f036 0607 	bics.w	r6, r6, #7
 800407e:	f100 8094 	bmi.w	80041aa <_malloc_r+0x18a>
 8004082:	42b1      	cmp	r1, r6
 8004084:	f200 8091 	bhi.w	80041aa <_malloc_r+0x18a>
 8004088:	f000 fbe0 	bl	800484c <__malloc_lock>
 800408c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8004090:	f0c0 8196 	bcc.w	80043c0 <_malloc_r+0x3a0>
 8004094:	0a73      	lsrs	r3, r6, #9
 8004096:	f000 808f 	beq.w	80041b8 <_malloc_r+0x198>
 800409a:	2b04      	cmp	r3, #4
 800409c:	f200 816b 	bhi.w	8004376 <_malloc_r+0x356>
 80040a0:	09b3      	lsrs	r3, r6, #6
 80040a2:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80040a6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 80040aa:	00c3      	lsls	r3, r0, #3
 80040ac:	4f9c      	ldr	r7, [pc, #624]	; (8004320 <_malloc_r+0x300>)
 80040ae:	443b      	add	r3, r7
 80040b0:	f1a3 0508 	sub.w	r5, r3, #8
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	429d      	cmp	r5, r3
 80040b8:	d106      	bne.n	80040c8 <_malloc_r+0xa8>
 80040ba:	e00c      	b.n	80040d6 <_malloc_r+0xb6>
 80040bc:	2900      	cmp	r1, #0
 80040be:	f280 812b 	bge.w	8004318 <_malloc_r+0x2f8>
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	429d      	cmp	r5, r3
 80040c6:	d006      	beq.n	80040d6 <_malloc_r+0xb6>
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	f022 0203 	bic.w	r2, r2, #3
 80040ce:	1b91      	subs	r1, r2, r6
 80040d0:	290f      	cmp	r1, #15
 80040d2:	ddf3      	ble.n	80040bc <_malloc_r+0x9c>
 80040d4:	4660      	mov	r0, ip
 80040d6:	693d      	ldr	r5, [r7, #16]
 80040d8:	f8df c248 	ldr.w	ip, [pc, #584]	; 8004324 <_malloc_r+0x304>
 80040dc:	4565      	cmp	r5, ip
 80040de:	d07c      	beq.n	80041da <_malloc_r+0x1ba>
 80040e0:	686a      	ldr	r2, [r5, #4]
 80040e2:	f022 0203 	bic.w	r2, r2, #3
 80040e6:	1b93      	subs	r3, r2, r6
 80040e8:	2b0f      	cmp	r3, #15
 80040ea:	f300 8177 	bgt.w	80043dc <_malloc_r+0x3bc>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 80040f4:	f280 8168 	bge.w	80043c8 <_malloc_r+0x3a8>
 80040f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80040fc:	f080 8116 	bcs.w	800432c <_malloc_r+0x30c>
 8004100:	08d3      	lsrs	r3, r2, #3
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	3301      	adds	r3, #1
 8004106:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800410a:	2201      	movs	r2, #1
 800410c:	fa02 f20e 	lsl.w	r2, r2, lr
 8004110:	430a      	orrs	r2, r1
 8004112:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8004116:	f8c5 e008 	str.w	lr, [r5, #8]
 800411a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 800411e:	3908      	subs	r1, #8
 8004120:	60e9      	str	r1, [r5, #12]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8004128:	f8ce 500c 	str.w	r5, [lr, #12]
 800412c:	1083      	asrs	r3, r0, #2
 800412e:	2101      	movs	r1, #1
 8004130:	4099      	lsls	r1, r3
 8004132:	4291      	cmp	r1, r2
 8004134:	d857      	bhi.n	80041e6 <_malloc_r+0x1c6>
 8004136:	4211      	tst	r1, r2
 8004138:	d106      	bne.n	8004148 <_malloc_r+0x128>
 800413a:	f020 0003 	bic.w	r0, r0, #3
 800413e:	0049      	lsls	r1, r1, #1
 8004140:	4211      	tst	r1, r2
 8004142:	f100 0004 	add.w	r0, r0, #4
 8004146:	d0fa      	beq.n	800413e <_malloc_r+0x11e>
 8004148:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800414c:	464d      	mov	r5, r9
 800414e:	4686      	mov	lr, r0
 8004150:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8004154:	4545      	cmp	r5, r8
 8004156:	d108      	bne.n	800416a <_malloc_r+0x14a>
 8004158:	e119      	b.n	800438e <_malloc_r+0x36e>
 800415a:	2b00      	cmp	r3, #0
 800415c:	f280 8120 	bge.w	80043a0 <_malloc_r+0x380>
 8004160:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8004164:	4545      	cmp	r5, r8
 8004166:	f000 8112 	beq.w	800438e <_malloc_r+0x36e>
 800416a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800416e:	f022 0203 	bic.w	r2, r2, #3
 8004172:	1b93      	subs	r3, r2, r6
 8004174:	2b0f      	cmp	r3, #15
 8004176:	ddf0      	ble.n	800415a <_malloc_r+0x13a>
 8004178:	4620      	mov	r0, r4
 800417a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 800417e:	eb08 0106 	add.w	r1, r8, r6
 8004182:	f046 0601 	orr.w	r6, r6, #1
 8004186:	f8c8 6004 	str.w	r6, [r8, #4]
 800418a:	60ec      	str	r4, [r5, #12]
 800418c:	60a5      	str	r5, [r4, #8]
 800418e:	f043 0401 	orr.w	r4, r3, #1
 8004192:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8004196:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800419a:	604c      	str	r4, [r1, #4]
 800419c:	f848 3002 	str.w	r3, [r8, r2]
 80041a0:	f000 fb56 	bl	8004850 <__malloc_unlock>
 80041a4:	f108 0508 	add.w	r5, r8, #8
 80041a8:	e002      	b.n	80041b0 <_malloc_r+0x190>
 80041aa:	230c      	movs	r3, #12
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	2500      	movs	r5, #0
 80041b0:	4628      	mov	r0, r5
 80041b2:	b003      	add	sp, #12
 80041b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041bc:	2040      	movs	r0, #64	; 0x40
 80041be:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80041c2:	e773      	b.n	80040ac <_malloc_r+0x8c>
 80041c4:	68d3      	ldr	r3, [r2, #12]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	bf08      	it	eq
 80041ca:	3002      	addeq	r0, #2
 80041cc:	f47f af40 	bne.w	8004050 <_malloc_r+0x30>
 80041d0:	693d      	ldr	r5, [r7, #16]
 80041d2:	f8df c150 	ldr.w	ip, [pc, #336]	; 8004324 <_malloc_r+0x304>
 80041d6:	4565      	cmp	r5, ip
 80041d8:	d182      	bne.n	80040e0 <_malloc_r+0xc0>
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	1083      	asrs	r3, r0, #2
 80041de:	2101      	movs	r1, #1
 80041e0:	4099      	lsls	r1, r3
 80041e2:	4291      	cmp	r1, r2
 80041e4:	d9a7      	bls.n	8004136 <_malloc_r+0x116>
 80041e6:	68bd      	ldr	r5, [r7, #8]
 80041e8:	686b      	ldr	r3, [r5, #4]
 80041ea:	f023 0803 	bic.w	r8, r3, #3
 80041ee:	4546      	cmp	r6, r8
 80041f0:	d803      	bhi.n	80041fa <_malloc_r+0x1da>
 80041f2:	eba8 0306 	sub.w	r3, r8, r6
 80041f6:	2b0f      	cmp	r3, #15
 80041f8:	dc7e      	bgt.n	80042f8 <_malloc_r+0x2d8>
 80041fa:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8004328 <_malloc_r+0x308>
 80041fe:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8004202:	f8d9 3000 	ldr.w	r3, [r9]
 8004206:	3201      	adds	r2, #1
 8004208:	4433      	add	r3, r6
 800420a:	eb05 0a08 	add.w	sl, r5, r8
 800420e:	f000 812f 	beq.w	8004470 <_malloc_r+0x450>
 8004212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004216:	330f      	adds	r3, #15
 8004218:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 800421c:	f02b 0b0f 	bic.w	fp, fp, #15
 8004220:	4659      	mov	r1, fp
 8004222:	4620      	mov	r0, r4
 8004224:	f004 f956 	bl	80084d4 <_sbrk_r>
 8004228:	1c41      	adds	r1, r0, #1
 800422a:	4602      	mov	r2, r0
 800422c:	f000 80ef 	beq.w	800440e <_malloc_r+0x3ee>
 8004230:	4582      	cmp	sl, r0
 8004232:	f200 80ea 	bhi.w	800440a <_malloc_r+0x3ea>
 8004236:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800423a:	4459      	add	r1, fp
 800423c:	f8c9 1004 	str.w	r1, [r9, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	f000 814b 	beq.w	80044dc <_malloc_r+0x4bc>
 8004246:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 800424a:	3101      	adds	r1, #1
 800424c:	bf1b      	ittet	ne
 800424e:	eba2 0a0a 	subne.w	sl, r2, sl
 8004252:	4453      	addne	r3, sl
 8004254:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
 8004258:	f8c9 3004 	strne.w	r3, [r9, #4]
 800425c:	f012 0307 	ands.w	r3, r2, #7
 8004260:	f000 8112 	beq.w	8004488 <_malloc_r+0x468>
 8004264:	f1c3 0108 	rsb	r1, r3, #8
 8004268:	440a      	add	r2, r1
 800426a:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800426e:	4493      	add	fp, r2
 8004270:	3108      	adds	r1, #8
 8004272:	eba1 010b 	sub.w	r1, r1, fp
 8004276:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 800427a:	4651      	mov	r1, sl
 800427c:	4620      	mov	r0, r4
 800427e:	9201      	str	r2, [sp, #4]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	f004 f927 	bl	80084d4 <_sbrk_r>
 8004286:	1c42      	adds	r2, r0, #1
 8004288:	e9dd 3200 	ldrd	r3, r2, [sp]
 800428c:	f000 814b 	beq.w	8004526 <_malloc_r+0x506>
 8004290:	1a83      	subs	r3, r0, r2
 8004292:	eb03 0b0a 	add.w	fp, r3, sl
 8004296:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800429a:	60ba      	str	r2, [r7, #8]
 800429c:	f04b 0301 	orr.w	r3, fp, #1
 80042a0:	eb0a 0100 	add.w	r1, sl, r0
 80042a4:	42bd      	cmp	r5, r7
 80042a6:	6053      	str	r3, [r2, #4]
 80042a8:	f8c9 1004 	str.w	r1, [r9, #4]
 80042ac:	f000 8122 	beq.w	80044f4 <_malloc_r+0x4d4>
 80042b0:	f1b8 0f0f 	cmp.w	r8, #15
 80042b4:	f240 8120 	bls.w	80044f8 <_malloc_r+0x4d8>
 80042b8:	686b      	ldr	r3, [r5, #4]
 80042ba:	f1a8 000c 	sub.w	r0, r8, #12
 80042be:	f020 0007 	bic.w	r0, r0, #7
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	4303      	orrs	r3, r0
 80042c8:	606b      	str	r3, [r5, #4]
 80042ca:	f04f 0c05 	mov.w	ip, #5
 80042ce:	182b      	adds	r3, r5, r0
 80042d0:	280f      	cmp	r0, #15
 80042d2:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 80042d6:	f200 812d 	bhi.w	8004534 <_malloc_r+0x514>
 80042da:	6853      	ldr	r3, [r2, #4]
 80042dc:	4615      	mov	r5, r2
 80042de:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 80042e2:	428a      	cmp	r2, r1
 80042e4:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 80042e8:	bf38      	it	cc
 80042ea:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
 80042ee:	428a      	cmp	r2, r1
 80042f0:	bf38      	it	cc
 80042f2:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
 80042f6:	e08c      	b.n	8004412 <_malloc_r+0x3f2>
 80042f8:	19aa      	adds	r2, r5, r6
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	f046 0601 	orr.w	r6, r6, #1
 8004302:	606e      	str	r6, [r5, #4]
 8004304:	4620      	mov	r0, r4
 8004306:	60ba      	str	r2, [r7, #8]
 8004308:	6053      	str	r3, [r2, #4]
 800430a:	f000 faa1 	bl	8004850 <__malloc_unlock>
 800430e:	3508      	adds	r5, #8
 8004310:	4628      	mov	r0, r5
 8004312:	b003      	add	sp, #12
 8004314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004318:	68d9      	ldr	r1, [r3, #12]
 800431a:	441a      	add	r2, r3
 800431c:	e69d      	b.n	800405a <_malloc_r+0x3a>
 800431e:	bf00      	nop
 8004320:	20000440 	.word	0x20000440
 8004324:	20000448 	.word	0x20000448
 8004328:	20000c48 	.word	0x20000c48
 800432c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8004330:	ea4f 2352 	mov.w	r3, r2, lsr #9
 8004334:	d363      	bcc.n	80043fe <_malloc_r+0x3de>
 8004336:	2b14      	cmp	r3, #20
 8004338:	f200 80b8 	bhi.w	80044ac <_malloc_r+0x48c>
 800433c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8004340:	00c9      	lsls	r1, r1, #3
 8004342:	335b      	adds	r3, #91	; 0x5b
 8004344:	eb07 0e01 	add.w	lr, r7, r1
 8004348:	5879      	ldr	r1, [r7, r1]
 800434a:	f1ae 0e08 	sub.w	lr, lr, #8
 800434e:	458e      	cmp	lr, r1
 8004350:	f000 8091 	beq.w	8004476 <_malloc_r+0x456>
 8004354:	684b      	ldr	r3, [r1, #4]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	4293      	cmp	r3, r2
 800435c:	d902      	bls.n	8004364 <_malloc_r+0x344>
 800435e:	6889      	ldr	r1, [r1, #8]
 8004360:	458e      	cmp	lr, r1
 8004362:	d1f7      	bne.n	8004354 <_malloc_r+0x334>
 8004364:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 800436e:	f8ce 5008 	str.w	r5, [lr, #8]
 8004372:	60cd      	str	r5, [r1, #12]
 8004374:	e6da      	b.n	800412c <_malloc_r+0x10c>
 8004376:	2b14      	cmp	r3, #20
 8004378:	d959      	bls.n	800442e <_malloc_r+0x40e>
 800437a:	2b54      	cmp	r3, #84	; 0x54
 800437c:	f200 809e 	bhi.w	80044bc <_malloc_r+0x49c>
 8004380:	0b33      	lsrs	r3, r6, #12
 8004382:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8004386:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 800438a:	00c3      	lsls	r3, r0, #3
 800438c:	e68e      	b.n	80040ac <_malloc_r+0x8c>
 800438e:	f10e 0e01 	add.w	lr, lr, #1
 8004392:	f01e 0f03 	tst.w	lr, #3
 8004396:	f105 0508 	add.w	r5, r5, #8
 800439a:	f47f aed9 	bne.w	8004150 <_malloc_r+0x130>
 800439e:	e051      	b.n	8004444 <_malloc_r+0x424>
 80043a0:	4442      	add	r2, r8
 80043a2:	4645      	mov	r5, r8
 80043a4:	6853      	ldr	r3, [r2, #4]
 80043a6:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6053      	str	r3, [r2, #4]
 80043b0:	f855 3f08 	ldr.w	r3, [r5, #8]!
 80043b4:	4620      	mov	r0, r4
 80043b6:	60d9      	str	r1, [r3, #12]
 80043b8:	608b      	str	r3, [r1, #8]
 80043ba:	f000 fa49 	bl	8004850 <__malloc_unlock>
 80043be:	e6f7      	b.n	80041b0 <_malloc_r+0x190>
 80043c0:	08f0      	lsrs	r0, r6, #3
 80043c2:	f106 0208 	add.w	r2, r6, #8
 80043c6:	e63b      	b.n	8004040 <_malloc_r+0x20>
 80043c8:	442a      	add	r2, r5
 80043ca:	4620      	mov	r0, r4
 80043cc:	6853      	ldr	r3, [r2, #4]
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6053      	str	r3, [r2, #4]
 80043d4:	3508      	adds	r5, #8
 80043d6:	f000 fa3b 	bl	8004850 <__malloc_unlock>
 80043da:	e6e9      	b.n	80041b0 <_malloc_r+0x190>
 80043dc:	19a9      	adds	r1, r5, r6
 80043de:	4620      	mov	r0, r4
 80043e0:	f046 0601 	orr.w	r6, r6, #1
 80043e4:	f043 0401 	orr.w	r4, r3, #1
 80043e8:	606e      	str	r6, [r5, #4]
 80043ea:	e9c7 1104 	strd	r1, r1, [r7, #16]
 80043ee:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 80043f2:	604c      	str	r4, [r1, #4]
 80043f4:	50ab      	str	r3, [r5, r2]
 80043f6:	f000 fa2b 	bl	8004850 <__malloc_unlock>
 80043fa:	3508      	adds	r5, #8
 80043fc:	e6d8      	b.n	80041b0 <_malloc_r+0x190>
 80043fe:	0993      	lsrs	r3, r2, #6
 8004400:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8004404:	00c9      	lsls	r1, r1, #3
 8004406:	3338      	adds	r3, #56	; 0x38
 8004408:	e79c      	b.n	8004344 <_malloc_r+0x324>
 800440a:	42bd      	cmp	r5, r7
 800440c:	d060      	beq.n	80044d0 <_malloc_r+0x4b0>
 800440e:	68bd      	ldr	r5, [r7, #8]
 8004410:	686b      	ldr	r3, [r5, #4]
 8004412:	f023 0b03 	bic.w	fp, r3, #3
 8004416:	455e      	cmp	r6, fp
 8004418:	ebab 0306 	sub.w	r3, fp, r6
 800441c:	d802      	bhi.n	8004424 <_malloc_r+0x404>
 800441e:	2b0f      	cmp	r3, #15
 8004420:	f73f af6a 	bgt.w	80042f8 <_malloc_r+0x2d8>
 8004424:	4620      	mov	r0, r4
 8004426:	f000 fa13 	bl	8004850 <__malloc_unlock>
 800442a:	2500      	movs	r5, #0
 800442c:	e6c0      	b.n	80041b0 <_malloc_r+0x190>
 800442e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8004432:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8004436:	00c3      	lsls	r3, r0, #3
 8004438:	e638      	b.n	80040ac <_malloc_r+0x8c>
 800443a:	f859 3908 	ldr.w	r3, [r9], #-8
 800443e:	454b      	cmp	r3, r9
 8004440:	f040 8096 	bne.w	8004570 <_malloc_r+0x550>
 8004444:	f010 0f03 	tst.w	r0, #3
 8004448:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800444c:	d1f5      	bne.n	800443a <_malloc_r+0x41a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	ea23 0301 	bic.w	r3, r3, r1
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	0049      	lsls	r1, r1, #1
 8004458:	4299      	cmp	r1, r3
 800445a:	f63f aec4 	bhi.w	80041e6 <_malloc_r+0x1c6>
 800445e:	b919      	cbnz	r1, 8004468 <_malloc_r+0x448>
 8004460:	e6c1      	b.n	80041e6 <_malloc_r+0x1c6>
 8004462:	0049      	lsls	r1, r1, #1
 8004464:	f10e 0e04 	add.w	lr, lr, #4
 8004468:	4219      	tst	r1, r3
 800446a:	d0fa      	beq.n	8004462 <_malloc_r+0x442>
 800446c:	4670      	mov	r0, lr
 800446e:	e66b      	b.n	8004148 <_malloc_r+0x128>
 8004470:	f103 0b10 	add.w	fp, r3, #16
 8004474:	e6d4      	b.n	8004220 <_malloc_r+0x200>
 8004476:	109a      	asrs	r2, r3, #2
 8004478:	f04f 0801 	mov.w	r8, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	fa08 f202 	lsl.w	r2, r8, r2
 8004482:	431a      	orrs	r2, r3
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	e770      	b.n	800436a <_malloc_r+0x34a>
 8004488:	eb02 010b 	add.w	r1, r2, fp
 800448c:	4249      	negs	r1, r1
 800448e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8004492:	4651      	mov	r1, sl
 8004494:	4620      	mov	r0, r4
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	9200      	str	r2, [sp, #0]
 800449a:	f004 f81b 	bl	80084d4 <_sbrk_r>
 800449e:	1c43      	adds	r3, r0, #1
 80044a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044a4:	f47f aef4 	bne.w	8004290 <_malloc_r+0x270>
 80044a8:	469a      	mov	sl, r3
 80044aa:	e6f4      	b.n	8004296 <_malloc_r+0x276>
 80044ac:	2b54      	cmp	r3, #84	; 0x54
 80044ae:	d826      	bhi.n	80044fe <_malloc_r+0x4de>
 80044b0:	0b13      	lsrs	r3, r2, #12
 80044b2:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 80044b6:	00c9      	lsls	r1, r1, #3
 80044b8:	336e      	adds	r3, #110	; 0x6e
 80044ba:	e743      	b.n	8004344 <_malloc_r+0x324>
 80044bc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80044c0:	d826      	bhi.n	8004510 <_malloc_r+0x4f0>
 80044c2:	0bf3      	lsrs	r3, r6, #15
 80044c4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80044c8:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 80044cc:	00c3      	lsls	r3, r0, #3
 80044ce:	e5ed      	b.n	80040ac <_malloc_r+0x8c>
 80044d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80044d4:	445b      	add	r3, fp
 80044d6:	f8c9 3004 	str.w	r3, [r9, #4]
 80044da:	e6b4      	b.n	8004246 <_malloc_r+0x226>
 80044dc:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80044e0:	2800      	cmp	r0, #0
 80044e2:	f47f aeb0 	bne.w	8004246 <_malloc_r+0x226>
 80044e6:	68bd      	ldr	r5, [r7, #8]
 80044e8:	eb08 030b 	add.w	r3, r8, fp
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	606b      	str	r3, [r5, #4]
 80044f2:	e6f4      	b.n	80042de <_malloc_r+0x2be>
 80044f4:	4615      	mov	r5, r2
 80044f6:	e6f2      	b.n	80042de <_malloc_r+0x2be>
 80044f8:	2301      	movs	r3, #1
 80044fa:	6053      	str	r3, [r2, #4]
 80044fc:	e792      	b.n	8004424 <_malloc_r+0x404>
 80044fe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004502:	d821      	bhi.n	8004548 <_malloc_r+0x528>
 8004504:	0bd3      	lsrs	r3, r2, #15
 8004506:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800450a:	00c9      	lsls	r1, r1, #3
 800450c:	3377      	adds	r3, #119	; 0x77
 800450e:	e719      	b.n	8004344 <_malloc_r+0x324>
 8004510:	f240 5254 	movw	r2, #1364	; 0x554
 8004514:	4293      	cmp	r3, r2
 8004516:	d821      	bhi.n	800455c <_malloc_r+0x53c>
 8004518:	0cb3      	lsrs	r3, r6, #18
 800451a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800451e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8004522:	00c3      	lsls	r3, r0, #3
 8004524:	e5c2      	b.n	80040ac <_malloc_r+0x8c>
 8004526:	3b08      	subs	r3, #8
 8004528:	449b      	add	fp, r3
 800452a:	ebab 0b02 	sub.w	fp, fp, r2
 800452e:	f04f 0a00 	mov.w	sl, #0
 8004532:	e6b0      	b.n	8004296 <_malloc_r+0x276>
 8004534:	f105 0108 	add.w	r1, r5, #8
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff f9f5 	bl	8003928 <_free_r>
 800453e:	68bd      	ldr	r5, [r7, #8]
 8004540:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004544:	686b      	ldr	r3, [r5, #4]
 8004546:	e6ca      	b.n	80042de <_malloc_r+0x2be>
 8004548:	f240 5154 	movw	r1, #1364	; 0x554
 800454c:	428b      	cmp	r3, r1
 800454e:	d80b      	bhi.n	8004568 <_malloc_r+0x548>
 8004550:	0c93      	lsrs	r3, r2, #18
 8004552:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 8004556:	00c9      	lsls	r1, r1, #3
 8004558:	337c      	adds	r3, #124	; 0x7c
 800455a:	e6f3      	b.n	8004344 <_malloc_r+0x324>
 800455c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8004560:	207f      	movs	r0, #127	; 0x7f
 8004562:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8004566:	e5a1      	b.n	80040ac <_malloc_r+0x8c>
 8004568:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800456c:	237e      	movs	r3, #126	; 0x7e
 800456e:	e6e9      	b.n	8004344 <_malloc_r+0x324>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	e770      	b.n	8004456 <_malloc_r+0x436>
	...

08004580 <memchr>:
 8004580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004584:	2a10      	cmp	r2, #16
 8004586:	db2b      	blt.n	80045e0 <memchr+0x60>
 8004588:	f010 0f07 	tst.w	r0, #7
 800458c:	d008      	beq.n	80045a0 <memchr+0x20>
 800458e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004592:	3a01      	subs	r2, #1
 8004594:	428b      	cmp	r3, r1
 8004596:	d02d      	beq.n	80045f4 <memchr+0x74>
 8004598:	f010 0f07 	tst.w	r0, #7
 800459c:	b342      	cbz	r2, 80045f0 <memchr+0x70>
 800459e:	d1f6      	bne.n	800458e <memchr+0xe>
 80045a0:	b4f0      	push	{r4, r5, r6, r7}
 80045a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80045a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80045aa:	f022 0407 	bic.w	r4, r2, #7
 80045ae:	f07f 0700 	mvns.w	r7, #0
 80045b2:	2300      	movs	r3, #0
 80045b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80045b8:	3c08      	subs	r4, #8
 80045ba:	ea85 0501 	eor.w	r5, r5, r1
 80045be:	ea86 0601 	eor.w	r6, r6, r1
 80045c2:	fa85 f547 	uadd8	r5, r5, r7
 80045c6:	faa3 f587 	sel	r5, r3, r7
 80045ca:	fa86 f647 	uadd8	r6, r6, r7
 80045ce:	faa5 f687 	sel	r6, r5, r7
 80045d2:	b98e      	cbnz	r6, 80045f8 <memchr+0x78>
 80045d4:	d1ee      	bne.n	80045b4 <memchr+0x34>
 80045d6:	bcf0      	pop	{r4, r5, r6, r7}
 80045d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80045dc:	f002 0207 	and.w	r2, r2, #7
 80045e0:	b132      	cbz	r2, 80045f0 <memchr+0x70>
 80045e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80045e6:	3a01      	subs	r2, #1
 80045e8:	ea83 0301 	eor.w	r3, r3, r1
 80045ec:	b113      	cbz	r3, 80045f4 <memchr+0x74>
 80045ee:	d1f8      	bne.n	80045e2 <memchr+0x62>
 80045f0:	2000      	movs	r0, #0
 80045f2:	4770      	bx	lr
 80045f4:	3801      	subs	r0, #1
 80045f6:	4770      	bx	lr
 80045f8:	2d00      	cmp	r5, #0
 80045fa:	bf06      	itte	eq
 80045fc:	4635      	moveq	r5, r6
 80045fe:	3803      	subeq	r0, #3
 8004600:	3807      	subne	r0, #7
 8004602:	f015 0f01 	tst.w	r5, #1
 8004606:	d107      	bne.n	8004618 <memchr+0x98>
 8004608:	3001      	adds	r0, #1
 800460a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800460e:	bf02      	ittt	eq
 8004610:	3001      	addeq	r0, #1
 8004612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004616:	3001      	addeq	r0, #1
 8004618:	bcf0      	pop	{r4, r5, r6, r7}
 800461a:	3801      	subs	r0, #1
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop

08004620 <memcpy>:
 8004620:	4684      	mov	ip, r0
 8004622:	ea41 0300 	orr.w	r3, r1, r0
 8004626:	f013 0303 	ands.w	r3, r3, #3
 800462a:	d16d      	bne.n	8004708 <memcpy+0xe8>
 800462c:	3a40      	subs	r2, #64	; 0x40
 800462e:	d341      	bcc.n	80046b4 <memcpy+0x94>
 8004630:	f851 3b04 	ldr.w	r3, [r1], #4
 8004634:	f840 3b04 	str.w	r3, [r0], #4
 8004638:	f851 3b04 	ldr.w	r3, [r1], #4
 800463c:	f840 3b04 	str.w	r3, [r0], #4
 8004640:	f851 3b04 	ldr.w	r3, [r1], #4
 8004644:	f840 3b04 	str.w	r3, [r0], #4
 8004648:	f851 3b04 	ldr.w	r3, [r1], #4
 800464c:	f840 3b04 	str.w	r3, [r0], #4
 8004650:	f851 3b04 	ldr.w	r3, [r1], #4
 8004654:	f840 3b04 	str.w	r3, [r0], #4
 8004658:	f851 3b04 	ldr.w	r3, [r1], #4
 800465c:	f840 3b04 	str.w	r3, [r0], #4
 8004660:	f851 3b04 	ldr.w	r3, [r1], #4
 8004664:	f840 3b04 	str.w	r3, [r0], #4
 8004668:	f851 3b04 	ldr.w	r3, [r1], #4
 800466c:	f840 3b04 	str.w	r3, [r0], #4
 8004670:	f851 3b04 	ldr.w	r3, [r1], #4
 8004674:	f840 3b04 	str.w	r3, [r0], #4
 8004678:	f851 3b04 	ldr.w	r3, [r1], #4
 800467c:	f840 3b04 	str.w	r3, [r0], #4
 8004680:	f851 3b04 	ldr.w	r3, [r1], #4
 8004684:	f840 3b04 	str.w	r3, [r0], #4
 8004688:	f851 3b04 	ldr.w	r3, [r1], #4
 800468c:	f840 3b04 	str.w	r3, [r0], #4
 8004690:	f851 3b04 	ldr.w	r3, [r1], #4
 8004694:	f840 3b04 	str.w	r3, [r0], #4
 8004698:	f851 3b04 	ldr.w	r3, [r1], #4
 800469c:	f840 3b04 	str.w	r3, [r0], #4
 80046a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80046a4:	f840 3b04 	str.w	r3, [r0], #4
 80046a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80046ac:	f840 3b04 	str.w	r3, [r0], #4
 80046b0:	3a40      	subs	r2, #64	; 0x40
 80046b2:	d2bd      	bcs.n	8004630 <memcpy+0x10>
 80046b4:	3230      	adds	r2, #48	; 0x30
 80046b6:	d311      	bcc.n	80046dc <memcpy+0xbc>
 80046b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80046bc:	f840 3b04 	str.w	r3, [r0], #4
 80046c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80046c4:	f840 3b04 	str.w	r3, [r0], #4
 80046c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80046cc:	f840 3b04 	str.w	r3, [r0], #4
 80046d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80046d4:	f840 3b04 	str.w	r3, [r0], #4
 80046d8:	3a10      	subs	r2, #16
 80046da:	d2ed      	bcs.n	80046b8 <memcpy+0x98>
 80046dc:	320c      	adds	r2, #12
 80046de:	d305      	bcc.n	80046ec <memcpy+0xcc>
 80046e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80046e4:	f840 3b04 	str.w	r3, [r0], #4
 80046e8:	3a04      	subs	r2, #4
 80046ea:	d2f9      	bcs.n	80046e0 <memcpy+0xc0>
 80046ec:	3204      	adds	r2, #4
 80046ee:	d008      	beq.n	8004702 <memcpy+0xe2>
 80046f0:	07d2      	lsls	r2, r2, #31
 80046f2:	bf1c      	itt	ne
 80046f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80046f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80046fc:	d301      	bcc.n	8004702 <memcpy+0xe2>
 80046fe:	880b      	ldrh	r3, [r1, #0]
 8004700:	8003      	strh	r3, [r0, #0]
 8004702:	4660      	mov	r0, ip
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	2a08      	cmp	r2, #8
 800470a:	d313      	bcc.n	8004734 <memcpy+0x114>
 800470c:	078b      	lsls	r3, r1, #30
 800470e:	d08d      	beq.n	800462c <memcpy+0xc>
 8004710:	f010 0303 	ands.w	r3, r0, #3
 8004714:	d08a      	beq.n	800462c <memcpy+0xc>
 8004716:	f1c3 0304 	rsb	r3, r3, #4
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	07db      	lsls	r3, r3, #31
 800471e:	bf1c      	itt	ne
 8004720:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004724:	f800 3b01 	strbne.w	r3, [r0], #1
 8004728:	d380      	bcc.n	800462c <memcpy+0xc>
 800472a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800472e:	f820 3b02 	strh.w	r3, [r0], #2
 8004732:	e77b      	b.n	800462c <memcpy+0xc>
 8004734:	3a04      	subs	r2, #4
 8004736:	d3d9      	bcc.n	80046ec <memcpy+0xcc>
 8004738:	3a01      	subs	r2, #1
 800473a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800473e:	f800 3b01 	strb.w	r3, [r0], #1
 8004742:	d2f9      	bcs.n	8004738 <memcpy+0x118>
 8004744:	780b      	ldrb	r3, [r1, #0]
 8004746:	7003      	strb	r3, [r0, #0]
 8004748:	784b      	ldrb	r3, [r1, #1]
 800474a:	7043      	strb	r3, [r0, #1]
 800474c:	788b      	ldrb	r3, [r1, #2]
 800474e:	7083      	strb	r3, [r0, #2]
 8004750:	4660      	mov	r0, ip
 8004752:	4770      	bx	lr

08004754 <memmove>:
 8004754:	4288      	cmp	r0, r1
 8004756:	d90d      	bls.n	8004774 <memmove+0x20>
 8004758:	188b      	adds	r3, r1, r2
 800475a:	4283      	cmp	r3, r0
 800475c:	d90a      	bls.n	8004774 <memmove+0x20>
 800475e:	eb00 0c02 	add.w	ip, r0, r2
 8004762:	b1ba      	cbz	r2, 8004794 <memmove+0x40>
 8004764:	4662      	mov	r2, ip
 8004766:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800476a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800476e:	4299      	cmp	r1, r3
 8004770:	d1f9      	bne.n	8004766 <memmove+0x12>
 8004772:	4770      	bx	lr
 8004774:	2a0f      	cmp	r2, #15
 8004776:	d80e      	bhi.n	8004796 <memmove+0x42>
 8004778:	4603      	mov	r3, r0
 800477a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800477e:	b14a      	cbz	r2, 8004794 <memmove+0x40>
 8004780:	f10c 0c01 	add.w	ip, ip, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	448c      	add	ip, r1
 8004788:	f811 2b01 	ldrb.w	r2, [r1], #1
 800478c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004790:	4561      	cmp	r1, ip
 8004792:	d1f9      	bne.n	8004788 <memmove+0x34>
 8004794:	4770      	bx	lr
 8004796:	ea40 0301 	orr.w	r3, r0, r1
 800479a:	079b      	lsls	r3, r3, #30
 800479c:	d150      	bne.n	8004840 <memmove+0xec>
 800479e:	f1a2 0310 	sub.w	r3, r2, #16
 80047a2:	b570      	push	{r4, r5, r6, lr}
 80047a4:	f101 0c20 	add.w	ip, r1, #32
 80047a8:	f023 050f 	bic.w	r5, r3, #15
 80047ac:	f101 0e10 	add.w	lr, r1, #16
 80047b0:	f100 0410 	add.w	r4, r0, #16
 80047b4:	44ac      	add	ip, r5
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 80047bc:	f844 5c10 	str.w	r5, [r4, #-16]
 80047c0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 80047c4:	f844 5c0c 	str.w	r5, [r4, #-12]
 80047c8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80047cc:	f844 5c08 	str.w	r5, [r4, #-8]
 80047d0:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 80047d4:	f844 5c04 	str.w	r5, [r4, #-4]
 80047d8:	f10e 0e10 	add.w	lr, lr, #16
 80047dc:	45e6      	cmp	lr, ip
 80047de:	f104 0410 	add.w	r4, r4, #16
 80047e2:	d1e9      	bne.n	80047b8 <memmove+0x64>
 80047e4:	3301      	adds	r3, #1
 80047e6:	f012 0f0c 	tst.w	r2, #12
 80047ea:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80047ee:	f002 040f 	and.w	r4, r2, #15
 80047f2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80047f6:	d027      	beq.n	8004848 <memmove+0xf4>
 80047f8:	3c04      	subs	r4, #4
 80047fa:	f024 0603 	bic.w	r6, r4, #3
 80047fe:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8004802:	441e      	add	r6, r3
 8004804:	1f1c      	subs	r4, r3, #4
 8004806:	468e      	mov	lr, r1
 8004808:	f85e 5b04 	ldr.w	r5, [lr], #4
 800480c:	f844 5f04 	str.w	r5, [r4, #4]!
 8004810:	42b4      	cmp	r4, r6
 8004812:	d1f9      	bne.n	8004808 <memmove+0xb4>
 8004814:	f10c 0401 	add.w	r4, ip, #1
 8004818:	f002 0203 	and.w	r2, r2, #3
 800481c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004820:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004824:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8004828:	b14a      	cbz	r2, 800483e <memmove+0xea>
 800482a:	f10c 0c01 	add.w	ip, ip, #1
 800482e:	3b01      	subs	r3, #1
 8004830:	448c      	add	ip, r1
 8004832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800483a:	4561      	cmp	r1, ip
 800483c:	d1f9      	bne.n	8004832 <memmove+0xde>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8004844:	4603      	mov	r3, r0
 8004846:	e79b      	b.n	8004780 <memmove+0x2c>
 8004848:	4622      	mov	r2, r4
 800484a:	e7eb      	b.n	8004824 <memmove+0xd0>

0800484c <__malloc_lock>:
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop

08004850 <__malloc_unlock>:
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop

08004854 <_Balloc>:
 8004854:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004856:	b570      	push	{r4, r5, r6, lr}
 8004858:	4605      	mov	r5, r0
 800485a:	460c      	mov	r4, r1
 800485c:	b14b      	cbz	r3, 8004872 <_Balloc+0x1e>
 800485e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004862:	b180      	cbz	r0, 8004886 <_Balloc+0x32>
 8004864:	6802      	ldr	r2, [r0, #0]
 8004866:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800486a:	2300      	movs	r3, #0
 800486c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004870:	bd70      	pop	{r4, r5, r6, pc}
 8004872:	2221      	movs	r2, #33	; 0x21
 8004874:	2104      	movs	r1, #4
 8004876:	f001 fef9 	bl	800666c <_calloc_r>
 800487a:	4603      	mov	r3, r0
 800487c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800487e:	2800      	cmp	r0, #0
 8004880:	d1ed      	bne.n	800485e <_Balloc+0xa>
 8004882:	2000      	movs	r0, #0
 8004884:	bd70      	pop	{r4, r5, r6, pc}
 8004886:	2101      	movs	r1, #1
 8004888:	fa01 f604 	lsl.w	r6, r1, r4
 800488c:	1d72      	adds	r2, r6, #5
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	4628      	mov	r0, r5
 8004892:	f001 feeb 	bl	800666c <_calloc_r>
 8004896:	2800      	cmp	r0, #0
 8004898:	d0f3      	beq.n	8004882 <_Balloc+0x2e>
 800489a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800489e:	e7e4      	b.n	800486a <_Balloc+0x16>

080048a0 <_Bfree>:
 80048a0:	b131      	cbz	r1, 80048b0 <_Bfree+0x10>
 80048a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80048a4:	684a      	ldr	r2, [r1, #4]
 80048a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80048aa:	6008      	str	r0, [r1, #0]
 80048ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <__multadd>:
 80048b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b6:	690c      	ldr	r4, [r1, #16]
 80048b8:	4606      	mov	r6, r0
 80048ba:	b083      	sub	sp, #12
 80048bc:	460d      	mov	r5, r1
 80048be:	f101 0e14 	add.w	lr, r1, #20
 80048c2:	2000      	movs	r0, #0
 80048c4:	f8de 1000 	ldr.w	r1, [lr]
 80048c8:	fa1f fc81 	uxth.w	ip, r1
 80048cc:	fb02 330c 	mla	r3, r2, ip, r3
 80048d0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80048d4:	0c09      	lsrs	r1, r1, #16
 80048d6:	fb02 cc01 	mla	ip, r2, r1, ip
 80048da:	3001      	adds	r0, #1
 80048dc:	b29b      	uxth	r3, r3
 80048de:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 80048e2:	4284      	cmp	r4, r0
 80048e4:	f84e 3b04 	str.w	r3, [lr], #4
 80048e8:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80048ec:	dcea      	bgt.n	80048c4 <__multadd+0x10>
 80048ee:	b13b      	cbz	r3, 8004900 <__multadd+0x4c>
 80048f0:	68aa      	ldr	r2, [r5, #8]
 80048f2:	42a2      	cmp	r2, r4
 80048f4:	dd07      	ble.n	8004906 <__multadd+0x52>
 80048f6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80048fa:	3401      	adds	r4, #1
 80048fc:	6153      	str	r3, [r2, #20]
 80048fe:	612c      	str	r4, [r5, #16]
 8004900:	4628      	mov	r0, r5
 8004902:	b003      	add	sp, #12
 8004904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004906:	6869      	ldr	r1, [r5, #4]
 8004908:	9301      	str	r3, [sp, #4]
 800490a:	3101      	adds	r1, #1
 800490c:	4630      	mov	r0, r6
 800490e:	f7ff ffa1 	bl	8004854 <_Balloc>
 8004912:	9b01      	ldr	r3, [sp, #4]
 8004914:	4607      	mov	r7, r0
 8004916:	b1b8      	cbz	r0, 8004948 <__multadd+0x94>
 8004918:	692a      	ldr	r2, [r5, #16]
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	3202      	adds	r2, #2
 800491e:	f105 010c 	add.w	r1, r5, #12
 8004922:	0092      	lsls	r2, r2, #2
 8004924:	300c      	adds	r0, #12
 8004926:	f7ff fe7b 	bl	8004620 <memcpy>
 800492a:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800492c:	6869      	ldr	r1, [r5, #4]
 800492e:	9b01      	ldr	r3, [sp, #4]
 8004930:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8004934:	6028      	str	r0, [r5, #0]
 8004936:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800493a:	463d      	mov	r5, r7
 800493c:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8004940:	3401      	adds	r4, #1
 8004942:	6153      	str	r3, [r2, #20]
 8004944:	612c      	str	r4, [r5, #16]
 8004946:	e7db      	b.n	8004900 <__multadd+0x4c>
 8004948:	4b02      	ldr	r3, [pc, #8]	; (8004954 <__multadd+0xa0>)
 800494a:	4803      	ldr	r0, [pc, #12]	; (8004958 <__multadd+0xa4>)
 800494c:	463a      	mov	r2, r7
 800494e:	21b5      	movs	r1, #181	; 0xb5
 8004950:	f001 fe66 	bl	8006620 <__assert_func>
 8004954:	0801cb24 	.word	0x0801cb24
 8004958:	0801cb6c 	.word	0x0801cb6c

0800495c <__s2b>:
 800495c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004960:	460c      	mov	r4, r1
 8004962:	4928      	ldr	r1, [pc, #160]	; (8004a04 <__s2b+0xa8>)
 8004964:	461f      	mov	r7, r3
 8004966:	4616      	mov	r6, r2
 8004968:	f103 0208 	add.w	r2, r3, #8
 800496c:	fb81 3102 	smull	r3, r1, r1, r2
 8004970:	2f09      	cmp	r7, #9
 8004972:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004976:	4605      	mov	r5, r0
 8004978:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 800497c:	dd39      	ble.n	80049f2 <__s2b+0x96>
 800497e:	f04f 0c01 	mov.w	ip, #1
 8004982:	2100      	movs	r1, #0
 8004984:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004988:	4563      	cmp	r3, ip
 800498a:	f101 0101 	add.w	r1, r1, #1
 800498e:	dcf9      	bgt.n	8004984 <__s2b+0x28>
 8004990:	4628      	mov	r0, r5
 8004992:	f7ff ff5f 	bl	8004854 <_Balloc>
 8004996:	4601      	mov	r1, r0
 8004998:	b368      	cbz	r0, 80049f6 <__s2b+0x9a>
 800499a:	9b08      	ldr	r3, [sp, #32]
 800499c:	6143      	str	r3, [r0, #20]
 800499e:	2e09      	cmp	r6, #9
 80049a0:	f04f 0301 	mov.w	r3, #1
 80049a4:	6103      	str	r3, [r0, #16]
 80049a6:	dc12      	bgt.n	80049ce <__s2b+0x72>
 80049a8:	340a      	adds	r4, #10
 80049aa:	2609      	movs	r6, #9
 80049ac:	42b7      	cmp	r7, r6
 80049ae:	dd0b      	ble.n	80049c8 <__s2b+0x6c>
 80049b0:	1bbe      	subs	r6, r7, r6
 80049b2:	4426      	add	r6, r4
 80049b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80049b8:	220a      	movs	r2, #10
 80049ba:	3b30      	subs	r3, #48	; 0x30
 80049bc:	4628      	mov	r0, r5
 80049be:	f7ff ff79 	bl	80048b4 <__multadd>
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	4601      	mov	r1, r0
 80049c6:	d1f5      	bne.n	80049b4 <__s2b+0x58>
 80049c8:	4608      	mov	r0, r1
 80049ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ce:	f104 0909 	add.w	r9, r4, #9
 80049d2:	46c8      	mov	r8, r9
 80049d4:	4434      	add	r4, r6
 80049d6:	f818 3b01 	ldrb.w	r3, [r8], #1
 80049da:	220a      	movs	r2, #10
 80049dc:	3b30      	subs	r3, #48	; 0x30
 80049de:	4628      	mov	r0, r5
 80049e0:	f7ff ff68 	bl	80048b4 <__multadd>
 80049e4:	45a0      	cmp	r8, r4
 80049e6:	4601      	mov	r1, r0
 80049e8:	d1f5      	bne.n	80049d6 <__s2b+0x7a>
 80049ea:	f1a6 0408 	sub.w	r4, r6, #8
 80049ee:	444c      	add	r4, r9
 80049f0:	e7dc      	b.n	80049ac <__s2b+0x50>
 80049f2:	2100      	movs	r1, #0
 80049f4:	e7cc      	b.n	8004990 <__s2b+0x34>
 80049f6:	460a      	mov	r2, r1
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <__s2b+0xac>)
 80049fa:	4804      	ldr	r0, [pc, #16]	; (8004a0c <__s2b+0xb0>)
 80049fc:	21ce      	movs	r1, #206	; 0xce
 80049fe:	f001 fe0f 	bl	8006620 <__assert_func>
 8004a02:	bf00      	nop
 8004a04:	38e38e39 	.word	0x38e38e39
 8004a08:	0801cb24 	.word	0x0801cb24
 8004a0c:	0801cb6c 	.word	0x0801cb6c

08004a10 <__hi0bits>:
 8004a10:	0c03      	lsrs	r3, r0, #16
 8004a12:	041b      	lsls	r3, r3, #16
 8004a14:	b9d3      	cbnz	r3, 8004a4c <__hi0bits+0x3c>
 8004a16:	0400      	lsls	r0, r0, #16
 8004a18:	2310      	movs	r3, #16
 8004a1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004a1e:	bf04      	itt	eq
 8004a20:	0200      	lsleq	r0, r0, #8
 8004a22:	3308      	addeq	r3, #8
 8004a24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004a28:	bf04      	itt	eq
 8004a2a:	0100      	lsleq	r0, r0, #4
 8004a2c:	3304      	addeq	r3, #4
 8004a2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004a32:	bf04      	itt	eq
 8004a34:	0080      	lsleq	r0, r0, #2
 8004a36:	3302      	addeq	r3, #2
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	db05      	blt.n	8004a48 <__hi0bits+0x38>
 8004a3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004a40:	f103 0301 	add.w	r3, r3, #1
 8004a44:	bf08      	it	eq
 8004a46:	2320      	moveq	r3, #32
 8004a48:	4618      	mov	r0, r3
 8004a4a:	4770      	bx	lr
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e7e4      	b.n	8004a1a <__hi0bits+0xa>

08004a50 <__lo0bits>:
 8004a50:	6803      	ldr	r3, [r0, #0]
 8004a52:	f013 0207 	ands.w	r2, r3, #7
 8004a56:	4601      	mov	r1, r0
 8004a58:	d007      	beq.n	8004a6a <__lo0bits+0x1a>
 8004a5a:	07da      	lsls	r2, r3, #31
 8004a5c:	d41f      	bmi.n	8004a9e <__lo0bits+0x4e>
 8004a5e:	0798      	lsls	r0, r3, #30
 8004a60:	d521      	bpl.n	8004aa6 <__lo0bits+0x56>
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	600b      	str	r3, [r1, #0]
 8004a66:	2001      	movs	r0, #1
 8004a68:	4770      	bx	lr
 8004a6a:	b298      	uxth	r0, r3
 8004a6c:	b1a0      	cbz	r0, 8004a98 <__lo0bits+0x48>
 8004a6e:	4610      	mov	r0, r2
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	b90a      	cbnz	r2, 8004a78 <__lo0bits+0x28>
 8004a74:	3008      	adds	r0, #8
 8004a76:	0a1b      	lsrs	r3, r3, #8
 8004a78:	071a      	lsls	r2, r3, #28
 8004a7a:	bf04      	itt	eq
 8004a7c:	091b      	lsreq	r3, r3, #4
 8004a7e:	3004      	addeq	r0, #4
 8004a80:	079a      	lsls	r2, r3, #30
 8004a82:	bf04      	itt	eq
 8004a84:	089b      	lsreq	r3, r3, #2
 8004a86:	3002      	addeq	r0, #2
 8004a88:	07da      	lsls	r2, r3, #31
 8004a8a:	d403      	bmi.n	8004a94 <__lo0bits+0x44>
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	f100 0001 	add.w	r0, r0, #1
 8004a92:	d006      	beq.n	8004aa2 <__lo0bits+0x52>
 8004a94:	600b      	str	r3, [r1, #0]
 8004a96:	4770      	bx	lr
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	2010      	movs	r0, #16
 8004a9c:	e7e8      	b.n	8004a70 <__lo0bits+0x20>
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	4770      	bx	lr
 8004aa2:	2020      	movs	r0, #32
 8004aa4:	4770      	bx	lr
 8004aa6:	089b      	lsrs	r3, r3, #2
 8004aa8:	600b      	str	r3, [r1, #0]
 8004aaa:	2002      	movs	r0, #2
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop

08004ab0 <__i2b>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	460d      	mov	r5, r1
 8004ab8:	b14b      	cbz	r3, 8004ace <__i2b+0x1e>
 8004aba:	6858      	ldr	r0, [r3, #4]
 8004abc:	b1b0      	cbz	r0, 8004aec <__i2b+0x3c>
 8004abe:	6802      	ldr	r2, [r0, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004aca:	60c2      	str	r2, [r0, #12]
 8004acc:	bd38      	pop	{r3, r4, r5, pc}
 8004ace:	2221      	movs	r2, #33	; 0x21
 8004ad0:	2104      	movs	r1, #4
 8004ad2:	f001 fdcb 	bl	800666c <_calloc_r>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	64e0      	str	r0, [r4, #76]	; 0x4c
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d1ed      	bne.n	8004aba <__i2b+0xa>
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <__i2b+0x54>)
 8004ae0:	4809      	ldr	r0, [pc, #36]	; (8004b08 <__i2b+0x58>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004ae8:	f001 fd9a 	bl	8006620 <__assert_func>
 8004aec:	221c      	movs	r2, #28
 8004aee:	2101      	movs	r1, #1
 8004af0:	4620      	mov	r0, r4
 8004af2:	f001 fdbb 	bl	800666c <_calloc_r>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d0f1      	beq.n	8004ade <__i2b+0x2e>
 8004afa:	2201      	movs	r2, #1
 8004afc:	2302      	movs	r3, #2
 8004afe:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8004b02:	e7de      	b.n	8004ac2 <__i2b+0x12>
 8004b04:	0801cb24 	.word	0x0801cb24
 8004b08:	0801cb6c 	.word	0x0801cb6c

08004b0c <__multiply>:
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	690e      	ldr	r6, [r1, #16]
 8004b12:	6915      	ldr	r5, [r2, #16]
 8004b14:	42ae      	cmp	r6, r5
 8004b16:	b085      	sub	sp, #20
 8004b18:	4688      	mov	r8, r1
 8004b1a:	4614      	mov	r4, r2
 8004b1c:	db05      	blt.n	8004b2a <__multiply+0x1e>
 8004b1e:	462a      	mov	r2, r5
 8004b20:	4623      	mov	r3, r4
 8004b22:	4635      	mov	r5, r6
 8004b24:	460c      	mov	r4, r1
 8004b26:	4616      	mov	r6, r2
 8004b28:	4698      	mov	r8, r3
 8004b2a:	68a3      	ldr	r3, [r4, #8]
 8004b2c:	6861      	ldr	r1, [r4, #4]
 8004b2e:	19af      	adds	r7, r5, r6
 8004b30:	42bb      	cmp	r3, r7
 8004b32:	bfb8      	it	lt
 8004b34:	3101      	addlt	r1, #1
 8004b36:	f7ff fe8d 	bl	8004854 <_Balloc>
 8004b3a:	9001      	str	r0, [sp, #4]
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	f000 8087 	beq.w	8004c50 <__multiply+0x144>
 8004b42:	9b01      	ldr	r3, [sp, #4]
 8004b44:	f103 0914 	add.w	r9, r3, #20
 8004b48:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 8004b4c:	45d1      	cmp	r9, sl
 8004b4e:	d205      	bcs.n	8004b5c <__multiply+0x50>
 8004b50:	464b      	mov	r3, r9
 8004b52:	2200      	movs	r2, #0
 8004b54:	f843 2b04 	str.w	r2, [r3], #4
 8004b58:	459a      	cmp	sl, r3
 8004b5a:	d8fb      	bhi.n	8004b54 <__multiply+0x48>
 8004b5c:	f108 0814 	add.w	r8, r8, #20
 8004b60:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 8004b64:	f104 0314 	add.w	r3, r4, #20
 8004b68:	45d8      	cmp	r8, fp
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004b70:	d25f      	bcs.n	8004c32 <__multiply+0x126>
 8004b72:	1b2b      	subs	r3, r5, r4
 8004b74:	3b15      	subs	r3, #21
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	3415      	adds	r4, #21
 8004b7e:	42a5      	cmp	r5, r4
 8004b80:	bf38      	it	cc
 8004b82:	2304      	movcc	r3, #4
 8004b84:	e9cd a702 	strd	sl, r7, [sp, #8]
 8004b88:	46ac      	mov	ip, r5
 8004b8a:	461f      	mov	r7, r3
 8004b8c:	4692      	mov	sl, r2
 8004b8e:	e005      	b.n	8004b9c <__multiply+0x90>
 8004b90:	0c00      	lsrs	r0, r0, #16
 8004b92:	d129      	bne.n	8004be8 <__multiply+0xdc>
 8004b94:	45c3      	cmp	fp, r8
 8004b96:	f109 0904 	add.w	r9, r9, #4
 8004b9a:	d948      	bls.n	8004c2e <__multiply+0x122>
 8004b9c:	f858 0b04 	ldr.w	r0, [r8], #4
 8004ba0:	b285      	uxth	r5, r0
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	d0f4      	beq.n	8004b90 <__multiply+0x84>
 8004ba6:	4656      	mov	r6, sl
 8004ba8:	464c      	mov	r4, r9
 8004baa:	2300      	movs	r3, #0
 8004bac:	f856 0b04 	ldr.w	r0, [r6], #4
 8004bb0:	6821      	ldr	r1, [r4, #0]
 8004bb2:	b282      	uxth	r2, r0
 8004bb4:	fa1f fe81 	uxth.w	lr, r1
 8004bb8:	fb05 ee02 	mla	lr, r5, r2, lr
 8004bbc:	0c00      	lsrs	r0, r0, #16
 8004bbe:	0c0a      	lsrs	r2, r1, #16
 8004bc0:	4473      	add	r3, lr
 8004bc2:	fb05 2200 	mla	r2, r5, r0, r2
 8004bc6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bd0:	45b4      	cmp	ip, r6
 8004bd2:	f844 3b04 	str.w	r3, [r4], #4
 8004bd6:	ea4f 4312 	mov.w	r3, r2, lsr #16
 8004bda:	d8e7      	bhi.n	8004bac <__multiply+0xa0>
 8004bdc:	f849 3007 	str.w	r3, [r9, r7]
 8004be0:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8004be4:	0c00      	lsrs	r0, r0, #16
 8004be6:	d0d5      	beq.n	8004b94 <__multiply+0x88>
 8004be8:	f8d9 3000 	ldr.w	r3, [r9]
 8004bec:	4654      	mov	r4, sl
 8004bee:	4619      	mov	r1, r3
 8004bf0:	464d      	mov	r5, r9
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	8826      	ldrh	r6, [r4, #0]
 8004bf6:	0c09      	lsrs	r1, r1, #16
 8004bf8:	fb00 1106 	mla	r1, r0, r6, r1
 8004bfc:	440a      	add	r2, r1
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c04:	f845 3b04 	str.w	r3, [r5], #4
 8004c08:	f854 6b04 	ldr.w	r6, [r4], #4
 8004c0c:	6829      	ldr	r1, [r5, #0]
 8004c0e:	0c36      	lsrs	r6, r6, #16
 8004c10:	b28b      	uxth	r3, r1
 8004c12:	fb00 3306 	mla	r3, r0, r6, r3
 8004c16:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004c1a:	45a4      	cmp	ip, r4
 8004c1c:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8004c20:	d8e8      	bhi.n	8004bf4 <__multiply+0xe8>
 8004c22:	45c3      	cmp	fp, r8
 8004c24:	f849 3007 	str.w	r3, [r9, r7]
 8004c28:	f109 0904 	add.w	r9, r9, #4
 8004c2c:	d8b6      	bhi.n	8004b9c <__multiply+0x90>
 8004c2e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 8004c32:	2f00      	cmp	r7, #0
 8004c34:	dc02      	bgt.n	8004c3c <__multiply+0x130>
 8004c36:	e005      	b.n	8004c44 <__multiply+0x138>
 8004c38:	3f01      	subs	r7, #1
 8004c3a:	d003      	beq.n	8004c44 <__multiply+0x138>
 8004c3c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f9      	beq.n	8004c38 <__multiply+0x12c>
 8004c44:	9b01      	ldr	r3, [sp, #4]
 8004c46:	4618      	mov	r0, r3
 8004c48:	611f      	str	r7, [r3, #16]
 8004c4a:	b005      	add	sp, #20
 8004c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <__multiply+0x154>)
 8004c52:	4804      	ldr	r0, [pc, #16]	; (8004c64 <__multiply+0x158>)
 8004c54:	9a01      	ldr	r2, [sp, #4]
 8004c56:	f240 115d 	movw	r1, #349	; 0x15d
 8004c5a:	f001 fce1 	bl	8006620 <__assert_func>
 8004c5e:	bf00      	nop
 8004c60:	0801cb24 	.word	0x0801cb24
 8004c64:	0801cb6c 	.word	0x0801cb6c

08004c68 <__pow5mult>:
 8004c68:	f012 0303 	ands.w	r3, r2, #3
 8004c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c70:	4614      	mov	r4, r2
 8004c72:	4606      	mov	r6, r0
 8004c74:	d132      	bne.n	8004cdc <__pow5mult+0x74>
 8004c76:	460d      	mov	r5, r1
 8004c78:	10a4      	asrs	r4, r4, #2
 8004c7a:	d020      	beq.n	8004cbe <__pow5mult+0x56>
 8004c7c:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 8004c80:	f1b8 0f00 	cmp.w	r8, #0
 8004c84:	d033      	beq.n	8004cee <__pow5mult+0x86>
 8004c86:	07e3      	lsls	r3, r4, #31
 8004c88:	f04f 0700 	mov.w	r7, #0
 8004c8c:	d407      	bmi.n	8004c9e <__pow5mult+0x36>
 8004c8e:	1064      	asrs	r4, r4, #1
 8004c90:	d015      	beq.n	8004cbe <__pow5mult+0x56>
 8004c92:	f8d8 0000 	ldr.w	r0, [r8]
 8004c96:	b1a8      	cbz	r0, 8004cc4 <__pow5mult+0x5c>
 8004c98:	4680      	mov	r8, r0
 8004c9a:	07e3      	lsls	r3, r4, #31
 8004c9c:	d5f7      	bpl.n	8004c8e <__pow5mult+0x26>
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f7ff ff32 	bl	8004b0c <__multiply>
 8004ca8:	b1b5      	cbz	r5, 8004cd8 <__pow5mult+0x70>
 8004caa:	6869      	ldr	r1, [r5, #4]
 8004cac:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8004cae:	1064      	asrs	r4, r4, #1
 8004cb0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004cb4:	602a      	str	r2, [r5, #0]
 8004cb6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8004cba:	4605      	mov	r5, r0
 8004cbc:	d1e9      	bne.n	8004c92 <__pow5mult+0x2a>
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f7ff ff1f 	bl	8004b0c <__multiply>
 8004cce:	f8c8 0000 	str.w	r0, [r8]
 8004cd2:	6007      	str	r7, [r0, #0]
 8004cd4:	4680      	mov	r8, r0
 8004cd6:	e7e0      	b.n	8004c9a <__pow5mult+0x32>
 8004cd8:	4605      	mov	r5, r0
 8004cda:	e7d8      	b.n	8004c8e <__pow5mult+0x26>
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <__pow5mult+0xb4>)
 8004ce0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f7ff fde5 	bl	80048b4 <__multadd>
 8004cea:	4605      	mov	r5, r0
 8004cec:	e7c4      	b.n	8004c78 <__pow5mult+0x10>
 8004cee:	2101      	movs	r1, #1
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7ff fdaf 	bl	8004854 <_Balloc>
 8004cf6:	4680      	mov	r8, r0
 8004cf8:	b140      	cbz	r0, 8004d0c <__pow5mult+0xa4>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f240 2271 	movw	r2, #625	; 0x271
 8004d00:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8004d04:	2300      	movs	r3, #0
 8004d06:	64b0      	str	r0, [r6, #72]	; 0x48
 8004d08:	6003      	str	r3, [r0, #0]
 8004d0a:	e7bc      	b.n	8004c86 <__pow5mult+0x1e>
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <__pow5mult+0xb8>)
 8004d0e:	4805      	ldr	r0, [pc, #20]	; (8004d24 <__pow5mult+0xbc>)
 8004d10:	4642      	mov	r2, r8
 8004d12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004d16:	f001 fc83 	bl	8006620 <__assert_func>
 8004d1a:	bf00      	nop
 8004d1c:	0800d3d8 	.word	0x0800d3d8
 8004d20:	0801cb24 	.word	0x0801cb24
 8004d24:	0801cb6c 	.word	0x0801cb6c

08004d28 <__lshift>:
 8004d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	4690      	mov	r8, r2
 8004d30:	6926      	ldr	r6, [r4, #16]
 8004d32:	68a3      	ldr	r3, [r4, #8]
 8004d34:	6849      	ldr	r1, [r1, #4]
 8004d36:	eb06 1662 	add.w	r6, r6, r2, asr #5
 8004d3a:	1c75      	adds	r5, r6, #1
 8004d3c:	429d      	cmp	r5, r3
 8004d3e:	4607      	mov	r7, r0
 8004d40:	ea4f 1962 	mov.w	r9, r2, asr #5
 8004d44:	dd04      	ble.n	8004d50 <__lshift+0x28>
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	429d      	cmp	r5, r3
 8004d4a:	f101 0101 	add.w	r1, r1, #1
 8004d4e:	dcfa      	bgt.n	8004d46 <__lshift+0x1e>
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7ff fd7f 	bl	8004854 <_Balloc>
 8004d56:	4684      	mov	ip, r0
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d051      	beq.n	8004e00 <__lshift+0xd8>
 8004d5c:	f1b9 0f00 	cmp.w	r9, #0
 8004d60:	f100 0014 	add.w	r0, r0, #20
 8004d64:	dd0e      	ble.n	8004d84 <__lshift+0x5c>
 8004d66:	f109 0205 	add.w	r2, r9, #5
 8004d6a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8004d6e:	4603      	mov	r3, r0
 8004d70:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8004d74:	2100      	movs	r1, #0
 8004d76:	f843 1b04 	str.w	r1, [r3], #4
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d1fb      	bne.n	8004d76 <__lshift+0x4e>
 8004d7e:	f1ae 0314 	sub.w	r3, lr, #20
 8004d82:	4418      	add	r0, r3
 8004d84:	6921      	ldr	r1, [r4, #16]
 8004d86:	f104 0314 	add.w	r3, r4, #20
 8004d8a:	f018 081f 	ands.w	r8, r8, #31
 8004d8e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004d92:	d02d      	beq.n	8004df0 <__lshift+0xc8>
 8004d94:	f1c8 0920 	rsb	r9, r8, #32
 8004d98:	4686      	mov	lr, r0
 8004d9a:	f04f 0a00 	mov.w	sl, #0
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	fa02 f208 	lsl.w	r2, r2, r8
 8004da4:	ea42 020a 	orr.w	r2, r2, sl
 8004da8:	f84e 2b04 	str.w	r2, [lr], #4
 8004dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004db0:	4299      	cmp	r1, r3
 8004db2:	fa22 fa09 	lsr.w	sl, r2, r9
 8004db6:	d8f2      	bhi.n	8004d9e <__lshift+0x76>
 8004db8:	1b0b      	subs	r3, r1, r4
 8004dba:	3b15      	subs	r3, #21
 8004dbc:	f023 0303 	bic.w	r3, r3, #3
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	f104 0215 	add.w	r2, r4, #21
 8004dc6:	4291      	cmp	r1, r2
 8004dc8:	bf38      	it	cc
 8004dca:	2304      	movcc	r3, #4
 8004dcc:	f1ba 0f00 	cmp.w	sl, #0
 8004dd0:	bf18      	it	ne
 8004dd2:	462e      	movne	r6, r5
 8004dd4:	f840 a003 	str.w	sl, [r0, r3]
 8004dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dda:	6862      	ldr	r2, [r4, #4]
 8004ddc:	f8cc 6010 	str.w	r6, [ip, #16]
 8004de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004de4:	6021      	str	r1, [r4, #0]
 8004de6:	4660      	mov	r0, ip
 8004de8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df0:	3804      	subs	r0, #4
 8004df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004df6:	f840 2f04 	str.w	r2, [r0, #4]!
 8004dfa:	4299      	cmp	r1, r3
 8004dfc:	d8f9      	bhi.n	8004df2 <__lshift+0xca>
 8004dfe:	e7eb      	b.n	8004dd8 <__lshift+0xb0>
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <__lshift+0xe8>)
 8004e02:	4804      	ldr	r0, [pc, #16]	; (8004e14 <__lshift+0xec>)
 8004e04:	4662      	mov	r2, ip
 8004e06:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004e0a:	f001 fc09 	bl	8006620 <__assert_func>
 8004e0e:	bf00      	nop
 8004e10:	0801cb24 	.word	0x0801cb24
 8004e14:	0801cb6c 	.word	0x0801cb6c

08004e18 <__mcmp>:
 8004e18:	690b      	ldr	r3, [r1, #16]
 8004e1a:	4684      	mov	ip, r0
 8004e1c:	6900      	ldr	r0, [r0, #16]
 8004e1e:	1ac0      	subs	r0, r0, r3
 8004e20:	d116      	bne.n	8004e50 <__mcmp+0x38>
 8004e22:	f10c 0c14 	add.w	ip, ip, #20
 8004e26:	3114      	adds	r1, #20
 8004e28:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8004e2c:	b410      	push	{r4}
 8004e2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004e32:	e001      	b.n	8004e38 <__mcmp+0x20>
 8004e34:	4594      	cmp	ip, r2
 8004e36:	d208      	bcs.n	8004e4a <__mcmp+0x32>
 8004e38:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8004e3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004e40:	428c      	cmp	r4, r1
 8004e42:	d0f7      	beq.n	8004e34 <__mcmp+0x1c>
 8004e44:	d205      	bcs.n	8004e52 <__mcmp+0x3a>
 8004e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	4770      	bx	lr
 8004e52:	2001      	movs	r0, #1
 8004e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop

08004e5c <__mdiff>:
 8004e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e60:	690f      	ldr	r7, [r1, #16]
 8004e62:	6913      	ldr	r3, [r2, #16]
 8004e64:	1aff      	subs	r7, r7, r3
 8004e66:	2f00      	cmp	r7, #0
 8004e68:	460e      	mov	r6, r1
 8004e6a:	4690      	mov	r8, r2
 8004e6c:	d17a      	bne.n	8004f64 <__mdiff+0x108>
 8004e6e:	f101 0514 	add.w	r5, r1, #20
 8004e72:	3214      	adds	r2, #20
 8004e74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004e78:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004e7c:	e001      	b.n	8004e82 <__mdiff+0x26>
 8004e7e:	429d      	cmp	r5, r3
 8004e80:	d273      	bcs.n	8004f6a <__mdiff+0x10e>
 8004e82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004e86:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8004e8a:	42a1      	cmp	r1, r4
 8004e8c:	d0f7      	beq.n	8004e7e <__mdiff+0x22>
 8004e8e:	d364      	bcc.n	8004f5a <__mdiff+0xfe>
 8004e90:	6871      	ldr	r1, [r6, #4]
 8004e92:	f7ff fcdf 	bl	8004854 <_Balloc>
 8004e96:	4681      	mov	r9, r0
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d072      	beq.n	8004f82 <__mdiff+0x126>
 8004e9c:	6935      	ldr	r5, [r6, #16]
 8004e9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004ea2:	60c7      	str	r7, [r0, #12]
 8004ea4:	f108 0e14 	add.w	lr, r8, #20
 8004ea8:	f106 0014 	add.w	r0, r6, #20
 8004eac:	f109 0a14 	add.w	sl, r9, #20
 8004eb0:	f106 0c10 	add.w	ip, r6, #16
 8004eb4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8004eb8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 8004ebc:	4656      	mov	r6, sl
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004ec4:	f85c bf04 	ldr.w	fp, [ip, #4]!
 8004ec8:	b2a3      	uxth	r3, r4
 8004eca:	fa11 f18b 	uxtah	r1, r1, fp
 8004ece:	1acb      	subs	r3, r1, r3
 8004ed0:	0c21      	lsrs	r1, r4, #16
 8004ed2:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 8004ed6:	eb01 4123 	add.w	r1, r1, r3, asr #16
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004ee0:	4572      	cmp	r2, lr
 8004ee2:	f846 3b04 	str.w	r3, [r6], #4
 8004ee6:	ea4f 4121 	mov.w	r1, r1, asr #16
 8004eea:	d8e9      	bhi.n	8004ec0 <__mdiff+0x64>
 8004eec:	eba2 0408 	sub.w	r4, r2, r8
 8004ef0:	3c15      	subs	r4, #21
 8004ef2:	f108 0815 	add.w	r8, r8, #21
 8004ef6:	4542      	cmp	r2, r8
 8004ef8:	f024 0603 	bic.w	r6, r4, #3
 8004efc:	f106 0604 	add.w	r6, r6, #4
 8004f00:	bf38      	it	cc
 8004f02:	2604      	movcc	r6, #4
 8004f04:	4430      	add	r0, r6
 8004f06:	f024 0203 	bic.w	r2, r4, #3
 8004f0a:	bf38      	it	cc
 8004f0c:	2200      	movcc	r2, #0
 8004f0e:	4287      	cmp	r7, r0
 8004f10:	4452      	add	r2, sl
 8004f12:	44b2      	add	sl, r6
 8004f14:	d916      	bls.n	8004f44 <__mdiff+0xe8>
 8004f16:	4656      	mov	r6, sl
 8004f18:	4604      	mov	r4, r0
 8004f1a:	f854 3b04 	ldr.w	r3, [r4], #4
 8004f1e:	fa11 f183 	uxtah	r1, r1, r3
 8004f22:	140a      	asrs	r2, r1, #16
 8004f24:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004f28:	b289      	uxth	r1, r1
 8004f2a:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 8004f2e:	42a7      	cmp	r7, r4
 8004f30:	f846 3b04 	str.w	r3, [r6], #4
 8004f34:	ea4f 4122 	mov.w	r1, r2, asr #16
 8004f38:	d8ef      	bhi.n	8004f1a <__mdiff+0xbe>
 8004f3a:	1e7a      	subs	r2, r7, #1
 8004f3c:	1a10      	subs	r0, r2, r0
 8004f3e:	f020 0203 	bic.w	r2, r0, #3
 8004f42:	4452      	add	r2, sl
 8004f44:	b923      	cbnz	r3, 8004f50 <__mdiff+0xf4>
 8004f46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004f4a:	3d01      	subs	r5, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0fa      	beq.n	8004f46 <__mdiff+0xea>
 8004f50:	f8c9 5010 	str.w	r5, [r9, #16]
 8004f54:	4648      	mov	r0, r9
 8004f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5a:	4633      	mov	r3, r6
 8004f5c:	2701      	movs	r7, #1
 8004f5e:	4646      	mov	r6, r8
 8004f60:	4698      	mov	r8, r3
 8004f62:	e795      	b.n	8004e90 <__mdiff+0x34>
 8004f64:	dbf9      	blt.n	8004f5a <__mdiff+0xfe>
 8004f66:	2700      	movs	r7, #0
 8004f68:	e792      	b.n	8004e90 <__mdiff+0x34>
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	f7ff fc72 	bl	8004854 <_Balloc>
 8004f70:	4681      	mov	r9, r0
 8004f72:	b168      	cbz	r0, 8004f90 <__mdiff+0x134>
 8004f74:	2201      	movs	r2, #1
 8004f76:	2300      	movs	r3, #0
 8004f78:	e9c9 2304 	strd	r2, r3, [r9, #16]
 8004f7c:	4648      	mov	r0, r9
 8004f7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f82:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <__mdiff+0x144>)
 8004f84:	4807      	ldr	r0, [pc, #28]	; (8004fa4 <__mdiff+0x148>)
 8004f86:	464a      	mov	r2, r9
 8004f88:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004f8c:	f001 fb48 	bl	8006620 <__assert_func>
 8004f90:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <__mdiff+0x144>)
 8004f92:	4804      	ldr	r0, [pc, #16]	; (8004fa4 <__mdiff+0x148>)
 8004f94:	464a      	mov	r2, r9
 8004f96:	f240 2132 	movw	r1, #562	; 0x232
 8004f9a:	f001 fb41 	bl	8006620 <__assert_func>
 8004f9e:	bf00      	nop
 8004fa0:	0801cb24 	.word	0x0801cb24
 8004fa4:	0801cb6c 	.word	0x0801cb6c

08004fa8 <__ulp>:
 8004fa8:	b082      	sub	sp, #8
 8004faa:	ed8d 0b00 	vstr	d0, [sp]
 8004fae:	4b15      	ldr	r3, [pc, #84]	; (8005004 <__ulp+0x5c>)
 8004fb0:	9a01      	ldr	r2, [sp, #4]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dd05      	ble.n	8004fc8 <__ulp+0x20>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	ec41 0b10 	vmov	d0, r0, r1
 8004fc4:	b002      	add	sp, #8
 8004fc6:	4770      	bx	lr
 8004fc8:	425b      	negs	r3, r3
 8004fca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004fce:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004fd2:	da08      	bge.n	8004fe6 <__ulp+0x3e>
 8004fd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004fd8:	2000      	movs	r0, #0
 8004fda:	fa43 f102 	asr.w	r1, r3, r2
 8004fde:	ec41 0b10 	vmov	d0, r0, r1
 8004fe2:	b002      	add	sp, #8
 8004fe4:	4770      	bx	lr
 8004fe6:	3a14      	subs	r2, #20
 8004fe8:	2a1e      	cmp	r2, #30
 8004fea:	bfda      	itte	le
 8004fec:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
 8004ff0:	fa23 f202 	lsrle.w	r2, r3, r2
 8004ff4:	2201      	movgt	r2, #1
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	ec41 0b10 	vmov	d0, r0, r1
 8004ffe:	b002      	add	sp, #8
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	7ff00000 	.word	0x7ff00000

08005008 <__b2d>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	6904      	ldr	r4, [r0, #16]
 800500c:	f100 0614 	add.w	r6, r0, #20
 8005010:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005014:	1f27      	subs	r7, r4, #4
 8005016:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800501a:	4628      	mov	r0, r5
 800501c:	f7ff fcf8 	bl	8004a10 <__hi0bits>
 8005020:	f1c0 0320 	rsb	r3, r0, #32
 8005024:	280a      	cmp	r0, #10
 8005026:	600b      	str	r3, [r1, #0]
 8005028:	dd31      	ble.n	800508e <__b2d+0x86>
 800502a:	42be      	cmp	r6, r7
 800502c:	d21b      	bcs.n	8005066 <__b2d+0x5e>
 800502e:	380b      	subs	r0, #11
 8005030:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8005034:	d023      	beq.n	800507e <__b2d+0x76>
 8005036:	f1c0 0c20 	rsb	ip, r0, #32
 800503a:	4085      	lsls	r5, r0
 800503c:	fa21 f70c 	lsr.w	r7, r1, ip
 8005040:	432f      	orrs	r7, r5
 8005042:	f1a4 0508 	sub.w	r5, r4, #8
 8005046:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
 800504a:	42ae      	cmp	r6, r5
 800504c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005050:	d236      	bcs.n	80050c0 <__b2d+0xb8>
 8005052:	4081      	lsls	r1, r0
 8005054:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8005058:	fa20 f00c 	lsr.w	r0, r0, ip
 800505c:	4308      	orrs	r0, r1
 800505e:	4602      	mov	r2, r0
 8005060:	ec43 2b10 	vmov	d0, r2, r3
 8005064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005066:	380b      	subs	r0, #11
 8005068:	d008      	beq.n	800507c <__b2d+0x74>
 800506a:	fa05 f000 	lsl.w	r0, r5, r0
 800506e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8005072:	2000      	movs	r0, #0
 8005074:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005078:	4602      	mov	r2, r0
 800507a:	e7f1      	b.n	8005060 <__b2d+0x58>
 800507c:	4601      	mov	r1, r0
 800507e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005082:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005086:	460a      	mov	r2, r1
 8005088:	ec43 2b10 	vmov	d0, r2, r3
 800508c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800508e:	f1c0 0c0b 	rsb	ip, r0, #11
 8005092:	fa25 f10c 	lsr.w	r1, r5, ip
 8005096:	42be      	cmp	r6, r7
 8005098:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800509c:	bf38      	it	cc
 800509e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 80050a2:	f100 0015 	add.w	r0, r0, #21
 80050a6:	bf34      	ite	cc
 80050a8:	fa21 f10c 	lsrcc.w	r1, r1, ip
 80050ac:	2100      	movcs	r1, #0
 80050ae:	fa05 f000 	lsl.w	r0, r5, r0
 80050b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80050b6:	ea40 0201 	orr.w	r2, r0, r1
 80050ba:	ec43 2b10 	vmov	d0, r2, r3
 80050be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c0:	fa01 f000 	lsl.w	r0, r1, r0
 80050c4:	4602      	mov	r2, r0
 80050c6:	e7cb      	b.n	8005060 <__b2d+0x58>

080050c8 <__d2b>:
 80050c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050cc:	4688      	mov	r8, r1
 80050ce:	b083      	sub	sp, #12
 80050d0:	2101      	movs	r1, #1
 80050d2:	ec57 6b10 	vmov	r6, r7, d0
 80050d6:	4615      	mov	r5, r2
 80050d8:	f7ff fbbc 	bl	8004854 <_Balloc>
 80050dc:	4604      	mov	r4, r0
 80050de:	2800      	cmp	r0, #0
 80050e0:	d04f      	beq.n	8005182 <__d2b+0xba>
 80050e2:	f3c7 590a 	ubfx	r9, r7, #20, #11
 80050e6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80050ea:	f1b9 0f00 	cmp.w	r9, #0
 80050ee:	d001      	beq.n	80050f4 <__d2b+0x2c>
 80050f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f4:	2e00      	cmp	r6, #0
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	d024      	beq.n	8005144 <__d2b+0x7c>
 80050fa:	4668      	mov	r0, sp
 80050fc:	9600      	str	r6, [sp, #0]
 80050fe:	f7ff fca7 	bl	8004a50 <__lo0bits>
 8005102:	2800      	cmp	r0, #0
 8005104:	d039      	beq.n	800517a <__d2b+0xb2>
 8005106:	e9dd 1300 	ldrd	r1, r3, [sp]
 800510a:	f1c0 0220 	rsb	r2, r0, #32
 800510e:	fa03 f202 	lsl.w	r2, r3, r2
 8005112:	430a      	orrs	r2, r1
 8005114:	40c3      	lsrs	r3, r0
 8005116:	6162      	str	r2, [r4, #20]
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf14      	ite	ne
 800511e:	2202      	movne	r2, #2
 8005120:	2201      	moveq	r2, #1
 8005122:	61a3      	str	r3, [r4, #24]
 8005124:	6122      	str	r2, [r4, #16]
 8005126:	f1b9 0f00 	cmp.w	r9, #0
 800512a:	d016      	beq.n	800515a <__d2b+0x92>
 800512c:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
 8005130:	4403      	add	r3, r0
 8005132:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005136:	f8c8 3000 	str.w	r3, [r8]
 800513a:	6028      	str	r0, [r5, #0]
 800513c:	4620      	mov	r0, r4
 800513e:	b003      	add	sp, #12
 8005140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005144:	a801      	add	r0, sp, #4
 8005146:	f7ff fc83 	bl	8004a50 <__lo0bits>
 800514a:	9b01      	ldr	r3, [sp, #4]
 800514c:	6163      	str	r3, [r4, #20]
 800514e:	2201      	movs	r2, #1
 8005150:	3020      	adds	r0, #32
 8005152:	6122      	str	r2, [r4, #16]
 8005154:	f1b9 0f00 	cmp.w	r9, #0
 8005158:	d1e8      	bne.n	800512c <__d2b+0x64>
 800515a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800515e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005162:	f8c8 0000 	str.w	r0, [r8]
 8005166:	6918      	ldr	r0, [r3, #16]
 8005168:	f7ff fc52 	bl	8004a10 <__hi0bits>
 800516c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005170:	6028      	str	r0, [r5, #0]
 8005172:	4620      	mov	r0, r4
 8005174:	b003      	add	sp, #12
 8005176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800517a:	9b00      	ldr	r3, [sp, #0]
 800517c:	6163      	str	r3, [r4, #20]
 800517e:	9b01      	ldr	r3, [sp, #4]
 8005180:	e7cb      	b.n	800511a <__d2b+0x52>
 8005182:	4b03      	ldr	r3, [pc, #12]	; (8005190 <__d2b+0xc8>)
 8005184:	4803      	ldr	r0, [pc, #12]	; (8005194 <__d2b+0xcc>)
 8005186:	4622      	mov	r2, r4
 8005188:	f240 310a 	movw	r1, #778	; 0x30a
 800518c:	f001 fa48 	bl	8006620 <__assert_func>
 8005190:	0801cb24 	.word	0x0801cb24
 8005194:	0801cb6c 	.word	0x0801cb6c

08005198 <__ratio>:
 8005198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800519c:	b083      	sub	sp, #12
 800519e:	460e      	mov	r6, r1
 80051a0:	4669      	mov	r1, sp
 80051a2:	4607      	mov	r7, r0
 80051a4:	f7ff ff30 	bl	8005008 <__b2d>
 80051a8:	a901      	add	r1, sp, #4
 80051aa:	4630      	mov	r0, r6
 80051ac:	ec55 4b10 	vmov	r4, r5, d0
 80051b0:	f7ff ff2a 	bl	8005008 <__b2d>
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	6931      	ldr	r1, [r6, #16]
 80051b8:	1a59      	subs	r1, r3, r1
 80051ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	ec51 0b10 	vmov	r0, r1, d0
 80051ca:	dd0d      	ble.n	80051e8 <__ratio+0x50>
 80051cc:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 80051d0:	464d      	mov	r5, r9
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4620      	mov	r0, r4
 80051d8:	4629      	mov	r1, r5
 80051da:	f002 fa15 	bl	8007608 <__aeabi_ddiv>
 80051de:	ec41 0b10 	vmov	d0, r0, r1
 80051e2:	b003      	add	sp, #12
 80051e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051e8:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 80051ec:	eb01 5703 	add.w	r7, r1, r3, lsl #20
 80051f0:	4639      	mov	r1, r7
 80051f2:	e7ee      	b.n	80051d2 <__ratio+0x3a>

080051f4 <_mprec_log10>:
 80051f4:	2817      	cmp	r0, #23
 80051f6:	b570      	push	{r4, r5, r6, lr}
 80051f8:	4606      	mov	r6, r0
 80051fa:	dd0c      	ble.n	8005216 <_mprec_log10+0x22>
 80051fc:	490a      	ldr	r1, [pc, #40]	; (8005228 <_mprec_log10+0x34>)
 80051fe:	4d0b      	ldr	r5, [pc, #44]	; (800522c <_mprec_log10+0x38>)
 8005200:	2000      	movs	r0, #0
 8005202:	2400      	movs	r4, #0
 8005204:	4622      	mov	r2, r4
 8005206:	462b      	mov	r3, r5
 8005208:	f002 f8d4 	bl	80073b4 <__aeabi_dmul>
 800520c:	3e01      	subs	r6, #1
 800520e:	d1f9      	bne.n	8005204 <_mprec_log10+0x10>
 8005210:	ec41 0b10 	vmov	d0, r0, r1
 8005214:	bd70      	pop	{r4, r5, r6, pc}
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <_mprec_log10+0x3c>)
 8005218:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
 800521c:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8005220:	ec41 0b10 	vmov	d0, r0, r1
 8005224:	bd70      	pop	{r4, r5, r6, pc}
 8005226:	bf00      	nop
 8005228:	3ff00000 	.word	0x3ff00000
 800522c:	40240000 	.word	0x40240000
 8005230:	0800d3d8 	.word	0x0800d3d8

08005234 <__copybits>:
 8005234:	3901      	subs	r1, #1
 8005236:	1149      	asrs	r1, r1, #5
 8005238:	f101 0c01 	add.w	ip, r1, #1
 800523c:	6911      	ldr	r1, [r2, #16]
 800523e:	f102 0314 	add.w	r3, r2, #20
 8005242:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005246:	428b      	cmp	r3, r1
 8005248:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800524c:	d216      	bcs.n	800527c <__copybits+0x48>
 800524e:	b510      	push	{r4, lr}
 8005250:	f1a0 0e04 	sub.w	lr, r0, #4
 8005254:	f853 4b04 	ldr.w	r4, [r3], #4
 8005258:	f84e 4f04 	str.w	r4, [lr, #4]!
 800525c:	4299      	cmp	r1, r3
 800525e:	d8f9      	bhi.n	8005254 <__copybits+0x20>
 8005260:	1a8b      	subs	r3, r1, r2
 8005262:	3b15      	subs	r3, #21
 8005264:	f023 0303 	bic.w	r3, r3, #3
 8005268:	3304      	adds	r3, #4
 800526a:	4418      	add	r0, r3
 800526c:	4584      	cmp	ip, r0
 800526e:	d904      	bls.n	800527a <__copybits+0x46>
 8005270:	2300      	movs	r3, #0
 8005272:	f840 3b04 	str.w	r3, [r0], #4
 8005276:	4584      	cmp	ip, r0
 8005278:	d8fb      	bhi.n	8005272 <__copybits+0x3e>
 800527a:	bd10      	pop	{r4, pc}
 800527c:	4584      	cmp	ip, r0
 800527e:	d905      	bls.n	800528c <__copybits+0x58>
 8005280:	2300      	movs	r3, #0
 8005282:	f840 3b04 	str.w	r3, [r0], #4
 8005286:	4584      	cmp	ip, r0
 8005288:	d8fb      	bhi.n	8005282 <__copybits+0x4e>
 800528a:	4770      	bx	lr
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop

08005290 <__any_on>:
 8005290:	6903      	ldr	r3, [r0, #16]
 8005292:	114a      	asrs	r2, r1, #5
 8005294:	4293      	cmp	r3, r2
 8005296:	f100 0014 	add.w	r0, r0, #20
 800529a:	da09      	bge.n	80052b0 <__any_on+0x20>
 800529c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80052a0:	e002      	b.n	80052a8 <__any_on+0x18>
 80052a2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80052a6:	b9ca      	cbnz	r2, 80052dc <__any_on+0x4c>
 80052a8:	4283      	cmp	r3, r0
 80052aa:	d8fa      	bhi.n	80052a2 <__any_on+0x12>
 80052ac:	2000      	movs	r0, #0
 80052ae:	4770      	bx	lr
 80052b0:	dd11      	ble.n	80052d6 <__any_on+0x46>
 80052b2:	f011 011f 	ands.w	r1, r1, #31
 80052b6:	d00e      	beq.n	80052d6 <__any_on+0x46>
 80052b8:	b410      	push	{r4}
 80052ba:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80052be:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80052c2:	fa24 f201 	lsr.w	r2, r4, r1
 80052c6:	fa02 f101 	lsl.w	r1, r2, r1
 80052ca:	428c      	cmp	r4, r1
 80052cc:	d00c      	beq.n	80052e8 <__any_on+0x58>
 80052ce:	2001      	movs	r0, #1
 80052d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80052da:	e7e5      	b.n	80052a8 <__any_on+0x18>
 80052dc:	2001      	movs	r0, #1
 80052de:	4770      	bx	lr
 80052e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80052e4:	2a00      	cmp	r2, #0
 80052e6:	d1f2      	bne.n	80052ce <__any_on+0x3e>
 80052e8:	4283      	cmp	r3, r0
 80052ea:	d8f9      	bhi.n	80052e0 <__any_on+0x50>
 80052ec:	2000      	movs	r0, #0
 80052ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <_putc_r>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	460d      	mov	r5, r1
 80052f8:	4616      	mov	r6, r2
 80052fa:	4604      	mov	r4, r0
 80052fc:	b108      	cbz	r0, 8005302 <_putc_r+0xe>
 80052fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005300:	b17b      	cbz	r3, 8005322 <_putc_r+0x2e>
 8005302:	68b3      	ldr	r3, [r6, #8]
 8005304:	3b01      	subs	r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	60b3      	str	r3, [r6, #8]
 800530a:	da11      	bge.n	8005330 <_putc_r+0x3c>
 800530c:	69b0      	ldr	r0, [r6, #24]
 800530e:	4283      	cmp	r3, r0
 8005310:	db14      	blt.n	800533c <_putc_r+0x48>
 8005312:	b2e8      	uxtb	r0, r5
 8005314:	280a      	cmp	r0, #10
 8005316:	d011      	beq.n	800533c <_putc_r+0x48>
 8005318:	6833      	ldr	r3, [r6, #0]
 800531a:	1c5c      	adds	r4, r3, #1
 800531c:	6034      	str	r4, [r6, #0]
 800531e:	701d      	strb	r5, [r3, #0]
 8005320:	bd70      	pop	{r4, r5, r6, pc}
 8005322:	f7fe fa91 	bl	8003848 <__sinit>
 8005326:	68b3      	ldr	r3, [r6, #8]
 8005328:	3b01      	subs	r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	60b3      	str	r3, [r6, #8]
 800532e:	dbed      	blt.n	800530c <_putc_r+0x18>
 8005330:	6833      	ldr	r3, [r6, #0]
 8005332:	1c5c      	adds	r4, r3, #1
 8005334:	6034      	str	r4, [r6, #0]
 8005336:	701d      	strb	r5, [r3, #0]
 8005338:	b2e8      	uxtb	r0, r5
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	4632      	mov	r2, r6
 800533e:	4629      	mov	r1, r5
 8005340:	4620      	mov	r0, r4
 8005342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005346:	f001 b907 	b.w	8006558 <__swbuf_r>
 800534a:	bf00      	nop

0800534c <putc>:
 800534c:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <putc+0x5c>)
 800534e:	b570      	push	{r4, r5, r6, lr}
 8005350:	681e      	ldr	r6, [r3, #0]
 8005352:	4605      	mov	r5, r0
 8005354:	460c      	mov	r4, r1
 8005356:	b10e      	cbz	r6, 800535c <putc+0x10>
 8005358:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800535a:	b17b      	cbz	r3, 800537c <putc+0x30>
 800535c:	68a3      	ldr	r3, [r4, #8]
 800535e:	3b01      	subs	r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	60a3      	str	r3, [r4, #8]
 8005364:	da12      	bge.n	800538c <putc+0x40>
 8005366:	69a2      	ldr	r2, [r4, #24]
 8005368:	4293      	cmp	r3, r2
 800536a:	db15      	blt.n	8005398 <putc+0x4c>
 800536c:	b2e8      	uxtb	r0, r5
 800536e:	280a      	cmp	r0, #10
 8005370:	d012      	beq.n	8005398 <putc+0x4c>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	6022      	str	r2, [r4, #0]
 8005378:	701d      	strb	r5, [r3, #0]
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	4630      	mov	r0, r6
 800537e:	f7fe fa63 	bl	8003848 <__sinit>
 8005382:	68a3      	ldr	r3, [r4, #8]
 8005384:	3b01      	subs	r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	60a3      	str	r3, [r4, #8]
 800538a:	dbec      	blt.n	8005366 <putc+0x1a>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	6022      	str	r2, [r4, #0]
 8005392:	701d      	strb	r5, [r3, #0]
 8005394:	b2e8      	uxtb	r0, r5
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	4622      	mov	r2, r4
 800539a:	4629      	mov	r1, r5
 800539c:	4630      	mov	r0, r6
 800539e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053a2:	f001 b8d9 	b.w	8006558 <__swbuf_r>
 80053a6:	bf00      	nop
 80053a8:	20000010 	.word	0x20000010

080053ac <_realloc_r>:
 80053ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b0:	4617      	mov	r7, r2
 80053b2:	2900      	cmp	r1, #0
 80053b4:	f000 8098 	beq.w	80054e8 <_realloc_r+0x13c>
 80053b8:	f107 050b 	add.w	r5, r7, #11
 80053bc:	4680      	mov	r8, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	f7ff fa44 	bl	800484c <__malloc_lock>
 80053c4:	2d16      	cmp	r5, #22
 80053c6:	d85d      	bhi.n	8005484 <_realloc_r+0xd8>
 80053c8:	2510      	movs	r5, #16
 80053ca:	462a      	mov	r2, r5
 80053cc:	42af      	cmp	r7, r5
 80053ce:	d85e      	bhi.n	800548e <_realloc_r+0xe2>
 80053d0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80053d4:	f021 0603 	bic.w	r6, r1, #3
 80053d8:	4296      	cmp	r6, r2
 80053da:	f1a4 0908 	sub.w	r9, r4, #8
 80053de:	da62      	bge.n	80054a6 <_realloc_r+0xfa>
 80053e0:	4bbc      	ldr	r3, [pc, #752]	; (80056d4 <_realloc_r+0x328>)
 80053e2:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80053e6:	eb09 0006 	add.w	r0, r9, r6
 80053ea:	4584      	cmp	ip, r0
 80053ec:	f000 8097 	beq.w	800551e <_realloc_r+0x172>
 80053f0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80053f4:	f02c 0301 	bic.w	r3, ip, #1
 80053f8:	4403      	add	r3, r0
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	07db      	lsls	r3, r3, #31
 80053fe:	d468      	bmi.n	80054d2 <_realloc_r+0x126>
 8005400:	f02c 0c03 	bic.w	ip, ip, #3
 8005404:	eb06 030c 	add.w	r3, r6, ip
 8005408:	4293      	cmp	r3, r2
 800540a:	da47      	bge.n	800549c <_realloc_r+0xf0>
 800540c:	07cb      	lsls	r3, r1, #31
 800540e:	d410      	bmi.n	8005432 <_realloc_r+0x86>
 8005410:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8005414:	eba9 0a03 	sub.w	sl, r9, r3
 8005418:	f8da 3004 	ldr.w	r3, [sl, #4]
 800541c:	f023 0103 	bic.w	r1, r3, #3
 8005420:	448c      	add	ip, r1
 8005422:	44b4      	add	ip, r6
 8005424:	4594      	cmp	ip, r2
 8005426:	f280 8111 	bge.w	800564c <_realloc_r+0x2a0>
 800542a:	1873      	adds	r3, r6, r1
 800542c:	4293      	cmp	r3, r2
 800542e:	f280 80e8 	bge.w	8005602 <_realloc_r+0x256>
 8005432:	4639      	mov	r1, r7
 8005434:	4640      	mov	r0, r8
 8005436:	f7fe fdf3 	bl	8004020 <_malloc_r>
 800543a:	4607      	mov	r7, r0
 800543c:	b1e0      	cbz	r0, 8005478 <_realloc_r+0xcc>
 800543e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	444b      	add	r3, r9
 8005448:	f1a0 0208 	sub.w	r2, r0, #8
 800544c:	4293      	cmp	r3, r2
 800544e:	f000 80d2 	beq.w	80055f6 <_realloc_r+0x24a>
 8005452:	1f32      	subs	r2, r6, #4
 8005454:	2a24      	cmp	r2, #36	; 0x24
 8005456:	f200 80f5 	bhi.w	8005644 <_realloc_r+0x298>
 800545a:	2a13      	cmp	r2, #19
 800545c:	f200 80ac 	bhi.w	80055b8 <_realloc_r+0x20c>
 8005460:	4603      	mov	r3, r0
 8005462:	4622      	mov	r2, r4
 8005464:	6811      	ldr	r1, [r2, #0]
 8005466:	6019      	str	r1, [r3, #0]
 8005468:	6851      	ldr	r1, [r2, #4]
 800546a:	6059      	str	r1, [r3, #4]
 800546c:	6892      	ldr	r2, [r2, #8]
 800546e:	609a      	str	r2, [r3, #8]
 8005470:	4621      	mov	r1, r4
 8005472:	4640      	mov	r0, r8
 8005474:	f7fe fa58 	bl	8003928 <_free_r>
 8005478:	4640      	mov	r0, r8
 800547a:	f7ff f9e9 	bl	8004850 <__malloc_unlock>
 800547e:	4638      	mov	r0, r7
 8005480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005484:	f025 0507 	bic.w	r5, r5, #7
 8005488:	2d00      	cmp	r5, #0
 800548a:	462a      	mov	r2, r5
 800548c:	da9e      	bge.n	80053cc <_realloc_r+0x20>
 800548e:	230c      	movs	r3, #12
 8005490:	f8c8 3000 	str.w	r3, [r8]
 8005494:	2700      	movs	r7, #0
 8005496:	4638      	mov	r0, r7
 8005498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549c:	461e      	mov	r6, r3
 800549e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80054a2:	60d3      	str	r3, [r2, #12]
 80054a4:	609a      	str	r2, [r3, #8]
 80054a6:	1b73      	subs	r3, r6, r5
 80054a8:	2b0f      	cmp	r3, #15
 80054aa:	d822      	bhi.n	80054f2 <_realloc_r+0x146>
 80054ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	4333      	orrs	r3, r6
 80054b6:	444e      	add	r6, r9
 80054b8:	f8c9 3004 	str.w	r3, [r9, #4]
 80054bc:	6873      	ldr	r3, [r6, #4]
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	6073      	str	r3, [r6, #4]
 80054c4:	4640      	mov	r0, r8
 80054c6:	4627      	mov	r7, r4
 80054c8:	f7ff f9c2 	bl	8004850 <__malloc_unlock>
 80054cc:	4638      	mov	r0, r7
 80054ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d2:	07c9      	lsls	r1, r1, #31
 80054d4:	d4ad      	bmi.n	8005432 <_realloc_r+0x86>
 80054d6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80054da:	eba9 0a03 	sub.w	sl, r9, r3
 80054de:	f8da 1004 	ldr.w	r1, [sl, #4]
 80054e2:	f021 0103 	bic.w	r1, r1, #3
 80054e6:	e7a0      	b.n	800542a <_realloc_r+0x7e>
 80054e8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ec:	4611      	mov	r1, r2
 80054ee:	f7fe bd97 	b.w	8004020 <_malloc_r>
 80054f2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80054f6:	f001 0101 	and.w	r1, r1, #1
 80054fa:	4329      	orrs	r1, r5
 80054fc:	f8c9 1004 	str.w	r1, [r9, #4]
 8005500:	eb09 0105 	add.w	r1, r9, r5
 8005504:	444e      	add	r6, r9
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	604b      	str	r3, [r1, #4]
 800550c:	6873      	ldr	r3, [r6, #4]
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	3108      	adds	r1, #8
 8005514:	6073      	str	r3, [r6, #4]
 8005516:	4640      	mov	r0, r8
 8005518:	f7fe fa06 	bl	8003928 <_free_r>
 800551c:	e7d2      	b.n	80054c4 <_realloc_r+0x118>
 800551e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005522:	f020 0b03 	bic.w	fp, r0, #3
 8005526:	eb06 0c0b 	add.w	ip, r6, fp
 800552a:	f105 0010 	add.w	r0, r5, #16
 800552e:	4584      	cmp	ip, r0
 8005530:	da4d      	bge.n	80055ce <_realloc_r+0x222>
 8005532:	07c9      	lsls	r1, r1, #31
 8005534:	f53f af7d 	bmi.w	8005432 <_realloc_r+0x86>
 8005538:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800553c:	eba9 0a01 	sub.w	sl, r9, r1
 8005540:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005544:	f021 0103 	bic.w	r1, r1, #3
 8005548:	448b      	add	fp, r1
 800554a:	44b3      	add	fp, r6
 800554c:	4558      	cmp	r0, fp
 800554e:	f73f af6c 	bgt.w	800542a <_realloc_r+0x7e>
 8005552:	4657      	mov	r7, sl
 8005554:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005558:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800555c:	1f32      	subs	r2, r6, #4
 800555e:	2a24      	cmp	r2, #36	; 0x24
 8005560:	60c1      	str	r1, [r0, #12]
 8005562:	6088      	str	r0, [r1, #8]
 8005564:	f200 80db 	bhi.w	800571e <_realloc_r+0x372>
 8005568:	2a13      	cmp	r2, #19
 800556a:	f240 80d6 	bls.w	800571a <_realloc_r+0x36e>
 800556e:	6821      	ldr	r1, [r4, #0]
 8005570:	f8ca 1008 	str.w	r1, [sl, #8]
 8005574:	6861      	ldr	r1, [r4, #4]
 8005576:	f8ca 100c 	str.w	r1, [sl, #12]
 800557a:	2a1b      	cmp	r2, #27
 800557c:	f200 80df 	bhi.w	800573e <_realloc_r+0x392>
 8005580:	3408      	adds	r4, #8
 8005582:	f10a 0210 	add.w	r2, sl, #16
 8005586:	6821      	ldr	r1, [r4, #0]
 8005588:	6011      	str	r1, [r2, #0]
 800558a:	6861      	ldr	r1, [r4, #4]
 800558c:	6051      	str	r1, [r2, #4]
 800558e:	68a1      	ldr	r1, [r4, #8]
 8005590:	6091      	str	r1, [r2, #8]
 8005592:	eb0a 0105 	add.w	r1, sl, r5
 8005596:	ebab 0205 	sub.w	r2, fp, r5
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	6099      	str	r1, [r3, #8]
 80055a0:	604a      	str	r2, [r1, #4]
 80055a2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	431d      	orrs	r5, r3
 80055ac:	4640      	mov	r0, r8
 80055ae:	f8ca 5004 	str.w	r5, [sl, #4]
 80055b2:	f7ff f94d 	bl	8004850 <__malloc_unlock>
 80055b6:	e76e      	b.n	8005496 <_realloc_r+0xea>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	6003      	str	r3, [r0, #0]
 80055bc:	6863      	ldr	r3, [r4, #4]
 80055be:	6043      	str	r3, [r0, #4]
 80055c0:	2a1b      	cmp	r2, #27
 80055c2:	d868      	bhi.n	8005696 <_realloc_r+0x2ea>
 80055c4:	f104 0208 	add.w	r2, r4, #8
 80055c8:	f100 0308 	add.w	r3, r0, #8
 80055cc:	e74a      	b.n	8005464 <_realloc_r+0xb8>
 80055ce:	eb09 0205 	add.w	r2, r9, r5
 80055d2:	609a      	str	r2, [r3, #8]
 80055d4:	ebac 0305 	sub.w	r3, ip, r5
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	6053      	str	r3, [r2, #4]
 80055de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	431d      	orrs	r5, r3
 80055e8:	4640      	mov	r0, r8
 80055ea:	f844 5c04 	str.w	r5, [r4, #-4]
 80055ee:	f7ff f92f 	bl	8004850 <__malloc_unlock>
 80055f2:	4627      	mov	r7, r4
 80055f4:	e74f      	b.n	8005496 <_realloc_r+0xea>
 80055f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80055fa:	f023 0303 	bic.w	r3, r3, #3
 80055fe:	441e      	add	r6, r3
 8005600:	e751      	b.n	80054a6 <_realloc_r+0xfa>
 8005602:	4657      	mov	r7, sl
 8005604:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005608:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800560c:	1f32      	subs	r2, r6, #4
 800560e:	2a24      	cmp	r2, #36	; 0x24
 8005610:	60c1      	str	r1, [r0, #12]
 8005612:	6088      	str	r0, [r1, #8]
 8005614:	d84c      	bhi.n	80056b0 <_realloc_r+0x304>
 8005616:	2a13      	cmp	r2, #19
 8005618:	d948      	bls.n	80056ac <_realloc_r+0x300>
 800561a:	6821      	ldr	r1, [r4, #0]
 800561c:	f8ca 1008 	str.w	r1, [sl, #8]
 8005620:	6861      	ldr	r1, [r4, #4]
 8005622:	f8ca 100c 	str.w	r1, [sl, #12]
 8005626:	2a1b      	cmp	r2, #27
 8005628:	d856      	bhi.n	80056d8 <_realloc_r+0x32c>
 800562a:	3408      	adds	r4, #8
 800562c:	f10a 0210 	add.w	r2, sl, #16
 8005630:	461e      	mov	r6, r3
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	6863      	ldr	r3, [r4, #4]
 8005638:	6053      	str	r3, [r2, #4]
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	6093      	str	r3, [r2, #8]
 800563e:	46d1      	mov	r9, sl
 8005640:	463c      	mov	r4, r7
 8005642:	e730      	b.n	80054a6 <_realloc_r+0xfa>
 8005644:	4621      	mov	r1, r4
 8005646:	f7ff f885 	bl	8004754 <memmove>
 800564a:	e711      	b.n	8005470 <_realloc_r+0xc4>
 800564c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 8005650:	4657      	mov	r7, sl
 8005652:	60cb      	str	r3, [r1, #12]
 8005654:	6099      	str	r1, [r3, #8]
 8005656:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800565a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800565e:	60cb      	str	r3, [r1, #12]
 8005660:	1f32      	subs	r2, r6, #4
 8005662:	2a24      	cmp	r2, #36	; 0x24
 8005664:	6099      	str	r1, [r3, #8]
 8005666:	d82d      	bhi.n	80056c4 <_realloc_r+0x318>
 8005668:	2a13      	cmp	r2, #19
 800566a:	d929      	bls.n	80056c0 <_realloc_r+0x314>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	f8ca 3008 	str.w	r3, [sl, #8]
 8005672:	6863      	ldr	r3, [r4, #4]
 8005674:	f8ca 300c 	str.w	r3, [sl, #12]
 8005678:	2a1b      	cmp	r2, #27
 800567a:	d842      	bhi.n	8005702 <_realloc_r+0x356>
 800567c:	3408      	adds	r4, #8
 800567e:	f10a 0310 	add.w	r3, sl, #16
 8005682:	6822      	ldr	r2, [r4, #0]
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	6862      	ldr	r2, [r4, #4]
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	68a2      	ldr	r2, [r4, #8]
 800568c:	609a      	str	r2, [r3, #8]
 800568e:	4666      	mov	r6, ip
 8005690:	46d1      	mov	r9, sl
 8005692:	463c      	mov	r4, r7
 8005694:	e707      	b.n	80054a6 <_realloc_r+0xfa>
 8005696:	68a3      	ldr	r3, [r4, #8]
 8005698:	6083      	str	r3, [r0, #8]
 800569a:	68e3      	ldr	r3, [r4, #12]
 800569c:	60c3      	str	r3, [r0, #12]
 800569e:	2a24      	cmp	r2, #36	; 0x24
 80056a0:	d026      	beq.n	80056f0 <_realloc_r+0x344>
 80056a2:	f104 0210 	add.w	r2, r4, #16
 80056a6:	f100 0310 	add.w	r3, r0, #16
 80056aa:	e6db      	b.n	8005464 <_realloc_r+0xb8>
 80056ac:	463a      	mov	r2, r7
 80056ae:	e7bf      	b.n	8005630 <_realloc_r+0x284>
 80056b0:	4621      	mov	r1, r4
 80056b2:	4638      	mov	r0, r7
 80056b4:	461e      	mov	r6, r3
 80056b6:	46d1      	mov	r9, sl
 80056b8:	f7ff f84c 	bl	8004754 <memmove>
 80056bc:	463c      	mov	r4, r7
 80056be:	e6f2      	b.n	80054a6 <_realloc_r+0xfa>
 80056c0:	463b      	mov	r3, r7
 80056c2:	e7de      	b.n	8005682 <_realloc_r+0x2d6>
 80056c4:	4621      	mov	r1, r4
 80056c6:	4638      	mov	r0, r7
 80056c8:	4666      	mov	r6, ip
 80056ca:	46d1      	mov	r9, sl
 80056cc:	f7ff f842 	bl	8004754 <memmove>
 80056d0:	463c      	mov	r4, r7
 80056d2:	e6e8      	b.n	80054a6 <_realloc_r+0xfa>
 80056d4:	20000440 	.word	0x20000440
 80056d8:	68a1      	ldr	r1, [r4, #8]
 80056da:	f8ca 1010 	str.w	r1, [sl, #16]
 80056de:	68e1      	ldr	r1, [r4, #12]
 80056e0:	f8ca 1014 	str.w	r1, [sl, #20]
 80056e4:	2a24      	cmp	r2, #36	; 0x24
 80056e6:	d020      	beq.n	800572a <_realloc_r+0x37e>
 80056e8:	3410      	adds	r4, #16
 80056ea:	f10a 0218 	add.w	r2, sl, #24
 80056ee:	e79f      	b.n	8005630 <_realloc_r+0x284>
 80056f0:	6923      	ldr	r3, [r4, #16]
 80056f2:	6103      	str	r3, [r0, #16]
 80056f4:	6961      	ldr	r1, [r4, #20]
 80056f6:	6141      	str	r1, [r0, #20]
 80056f8:	f104 0218 	add.w	r2, r4, #24
 80056fc:	f100 0318 	add.w	r3, r0, #24
 8005700:	e6b0      	b.n	8005464 <_realloc_r+0xb8>
 8005702:	68a3      	ldr	r3, [r4, #8]
 8005704:	f8ca 3010 	str.w	r3, [sl, #16]
 8005708:	68e3      	ldr	r3, [r4, #12]
 800570a:	f8ca 3014 	str.w	r3, [sl, #20]
 800570e:	2a24      	cmp	r2, #36	; 0x24
 8005710:	d021      	beq.n	8005756 <_realloc_r+0x3aa>
 8005712:	3410      	adds	r4, #16
 8005714:	f10a 0318 	add.w	r3, sl, #24
 8005718:	e7b3      	b.n	8005682 <_realloc_r+0x2d6>
 800571a:	463a      	mov	r2, r7
 800571c:	e733      	b.n	8005586 <_realloc_r+0x1da>
 800571e:	4621      	mov	r1, r4
 8005720:	4638      	mov	r0, r7
 8005722:	f7ff f817 	bl	8004754 <memmove>
 8005726:	4b16      	ldr	r3, [pc, #88]	; (8005780 <_realloc_r+0x3d4>)
 8005728:	e733      	b.n	8005592 <_realloc_r+0x1e6>
 800572a:	6922      	ldr	r2, [r4, #16]
 800572c:	f8ca 2018 	str.w	r2, [sl, #24]
 8005730:	6962      	ldr	r2, [r4, #20]
 8005732:	f8ca 201c 	str.w	r2, [sl, #28]
 8005736:	3418      	adds	r4, #24
 8005738:	f10a 0220 	add.w	r2, sl, #32
 800573c:	e778      	b.n	8005630 <_realloc_r+0x284>
 800573e:	68a1      	ldr	r1, [r4, #8]
 8005740:	f8ca 1010 	str.w	r1, [sl, #16]
 8005744:	68e1      	ldr	r1, [r4, #12]
 8005746:	f8ca 1014 	str.w	r1, [sl, #20]
 800574a:	2a24      	cmp	r2, #36	; 0x24
 800574c:	d00d      	beq.n	800576a <_realloc_r+0x3be>
 800574e:	3410      	adds	r4, #16
 8005750:	f10a 0218 	add.w	r2, sl, #24
 8005754:	e717      	b.n	8005586 <_realloc_r+0x1da>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	f8ca 3018 	str.w	r3, [sl, #24]
 800575c:	6963      	ldr	r3, [r4, #20]
 800575e:	f8ca 301c 	str.w	r3, [sl, #28]
 8005762:	3418      	adds	r4, #24
 8005764:	f10a 0320 	add.w	r3, sl, #32
 8005768:	e78b      	b.n	8005682 <_realloc_r+0x2d6>
 800576a:	6922      	ldr	r2, [r4, #16]
 800576c:	f8ca 2018 	str.w	r2, [sl, #24]
 8005770:	6962      	ldr	r2, [r4, #20]
 8005772:	f8ca 201c 	str.w	r2, [sl, #28]
 8005776:	3418      	adds	r4, #24
 8005778:	f10a 0220 	add.w	r2, sl, #32
 800577c:	e703      	b.n	8005586 <_realloc_r+0x1da>
 800577e:	bf00      	nop
 8005780:	20000440 	.word	0x20000440

08005784 <__sread>:
 8005784:	b510      	push	{r4, lr}
 8005786:	460c      	mov	r4, r1
 8005788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578c:	f002 ff8e 	bl	80086ac <_read_r>
 8005790:	2800      	cmp	r0, #0
 8005792:	db03      	blt.n	800579c <__sread+0x18>
 8005794:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005796:	4403      	add	r3, r0
 8005798:	6523      	str	r3, [r4, #80]	; 0x50
 800579a:	bd10      	pop	{r4, pc}
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a2:	81a3      	strh	r3, [r4, #12]
 80057a4:	bd10      	pop	{r4, pc}
 80057a6:	bf00      	nop

080057a8 <__seofread>:
 80057a8:	2000      	movs	r0, #0
 80057aa:	4770      	bx	lr

080057ac <__swrite>:
 80057ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b0:	460c      	mov	r4, r1
 80057b2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 80057b6:	461f      	mov	r7, r3
 80057b8:	05cb      	lsls	r3, r1, #23
 80057ba:	4605      	mov	r5, r0
 80057bc:	4616      	mov	r6, r2
 80057be:	d40b      	bmi.n	80057d8 <__swrite+0x2c>
 80057c0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80057c4:	81a1      	strh	r1, [r4, #12]
 80057c6:	463b      	mov	r3, r7
 80057c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057cc:	4632      	mov	r2, r6
 80057ce:	4628      	mov	r0, r5
 80057d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d4:	f002 bff4 	b.w	80087c0 <_write_r>
 80057d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057dc:	2302      	movs	r3, #2
 80057de:	2200      	movs	r2, #0
 80057e0:	f002 fe9a 	bl	8008518 <_lseek_r>
 80057e4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80057e8:	e7ea      	b.n	80057c0 <__swrite+0x14>
 80057ea:	bf00      	nop

080057ec <__sseek>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	460c      	mov	r4, r1
 80057f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f4:	f002 fe90 	bl	8008518 <_lseek_r>
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	1c42      	adds	r2, r0, #1
 80057fc:	bf0e      	itee	eq
 80057fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005806:	6520      	strne	r0, [r4, #80]	; 0x50
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	bd10      	pop	{r4, pc}

0800580c <__sclose>:
 800580c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005810:	f002 be78 	b.w	8008504 <_close_r>

08005814 <__sprint_r.part.0>:
 8005814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800581a:	049c      	lsls	r4, r3, #18
 800581c:	4690      	mov	r8, r2
 800581e:	d52d      	bpl.n	800587c <__sprint_r.part.0+0x68>
 8005820:	6893      	ldr	r3, [r2, #8]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	b343      	cbz	r3, 8005878 <__sprint_r.part.0+0x64>
 8005826:	468b      	mov	fp, r1
 8005828:	4606      	mov	r6, r0
 800582a:	f102 0908 	add.w	r9, r2, #8
 800582e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 8005832:	ea5f 079a 	movs.w	r7, sl, lsr #2
 8005836:	d015      	beq.n	8005864 <__sprint_r.part.0+0x50>
 8005838:	3d04      	subs	r5, #4
 800583a:	2400      	movs	r4, #0
 800583c:	e001      	b.n	8005842 <__sprint_r.part.0+0x2e>
 800583e:	42a7      	cmp	r7, r4
 8005840:	d00e      	beq.n	8005860 <__sprint_r.part.0+0x4c>
 8005842:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005846:	465a      	mov	r2, fp
 8005848:	4630      	mov	r0, r6
 800584a:	f001 f81f 	bl	800688c <_fputwc_r>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	f104 0401 	add.w	r4, r4, #1
 8005854:	d1f3      	bne.n	800583e <__sprint_r.part.0+0x2a>
 8005856:	2300      	movs	r3, #0
 8005858:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800585c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005860:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005864:	f02a 0a03 	bic.w	sl, sl, #3
 8005868:	eba3 030a 	sub.w	r3, r3, sl
 800586c:	f8c8 3008 	str.w	r3, [r8, #8]
 8005870:	f109 0908 	add.w	r9, r9, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1da      	bne.n	800582e <__sprint_r.part.0+0x1a>
 8005878:	2000      	movs	r0, #0
 800587a:	e7ec      	b.n	8005856 <__sprint_r.part.0+0x42>
 800587c:	f7fe f95a 	bl	8003b34 <__sfvwrite_r>
 8005880:	2300      	movs	r3, #0
 8005882:	e9c8 3301 	strd	r3, r3, [r8, #4]
 8005886:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588a:	bf00      	nop

0800588c <__sprint_r>:
 800588c:	b410      	push	{r4}
 800588e:	6894      	ldr	r4, [r2, #8]
 8005890:	b114      	cbz	r4, 8005898 <__sprint_r+0xc>
 8005892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005896:	e7bd      	b.n	8005814 <__sprint_r.part.0>
 8005898:	4620      	mov	r0, r4
 800589a:	6054      	str	r4, [r2, #4]
 800589c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop

080058a4 <_vfiprintf_r>:
 80058a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a8:	b0ab      	sub	sp, #172	; 0xac
 80058aa:	461c      	mov	r4, r3
 80058ac:	4688      	mov	r8, r1
 80058ae:	4617      	mov	r7, r2
 80058b0:	9306      	str	r3, [sp, #24]
 80058b2:	4683      	mov	fp, r0
 80058b4:	b118      	cbz	r0, 80058be <_vfiprintf_r+0x1a>
 80058b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 8225 	beq.w	8005d08 <_vfiprintf_r+0x464>
 80058be:	f9b8 100c 	ldrsh.w	r1, [r8, #12]
 80058c2:	0488      	lsls	r0, r1, #18
 80058c4:	b28a      	uxth	r2, r1
 80058c6:	d40a      	bmi.n	80058de <_vfiprintf_r+0x3a>
 80058c8:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80058cc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 80058d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d4:	f8a8 200c 	strh.w	r2, [r8, #12]
 80058d8:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 80058dc:	b292      	uxth	r2, r2
 80058de:	0713      	lsls	r3, r2, #28
 80058e0:	f140 80a4 	bpl.w	8005a2c <_vfiprintf_r+0x188>
 80058e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 809f 	beq.w	8005a2c <_vfiprintf_r+0x188>
 80058ee:	f002 021a 	and.w	r2, r2, #26
 80058f2:	2a0a      	cmp	r2, #10
 80058f4:	f000 80a8 	beq.w	8005a48 <_vfiprintf_r+0x1a4>
 80058f8:	ab1a      	add	r3, sp, #104	; 0x68
 80058fa:	930d      	str	r3, [sp, #52]	; 0x34
 80058fc:	2300      	movs	r3, #0
 80058fe:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8005902:	9309      	str	r3, [sp, #36]	; 0x24
 8005904:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005908:	9305      	str	r3, [sp, #20]
 800590a:	783b      	ldrb	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 810d 	beq.w	8005b2c <_vfiprintf_r+0x288>
 8005912:	463c      	mov	r4, r7
 8005914:	e004      	b.n	8005920 <_vfiprintf_r+0x7c>
 8005916:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 80e8 	beq.w	8005af0 <_vfiprintf_r+0x24c>
 8005920:	2b25      	cmp	r3, #37	; 0x25
 8005922:	d1f8      	bne.n	8005916 <_vfiprintf_r+0x72>
 8005924:	1be5      	subs	r5, r4, r7
 8005926:	f040 80e5 	bne.w	8005af4 <_vfiprintf_r+0x250>
 800592a:	7823      	ldrb	r3, [r4, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 80fd 	beq.w	8005b2c <_vfiprintf_r+0x288>
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	2100      	movs	r1, #0
 8005938:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800593c:	7863      	ldrb	r3, [r4, #1]
 800593e:	9104      	str	r1, [sp, #16]
 8005940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005944:	1c67      	adds	r7, r4, #1
 8005946:	4608      	mov	r0, r1
 8005948:	9202      	str	r2, [sp, #8]
 800594a:	468a      	mov	sl, r1
 800594c:	3701      	adds	r7, #1
 800594e:	f1a3 0220 	sub.w	r2, r3, #32
 8005952:	2a58      	cmp	r2, #88	; 0x58
 8005954:	f200 80f7 	bhi.w	8005b46 <_vfiprintf_r+0x2a2>
 8005958:	e8df f012 	tbh	[pc, r2, lsl #1]
 800595c:	00f50233 	.word	0x00f50233
 8005960:	022f00f5 	.word	0x022f00f5
 8005964:	00f500f5 	.word	0x00f500f5
 8005968:	00f500f5 	.word	0x00f500f5
 800596c:	00f500f5 	.word	0x00f500f5
 8005970:	022b01e5 	.word	0x022b01e5
 8005974:	01f000f5 	.word	0x01f000f5
 8005978:	00f501f4 	.word	0x00f501f4
 800597c:	00590227 	.word	0x00590227
 8005980:	00590059 	.word	0x00590059
 8005984:	00590059 	.word	0x00590059
 8005988:	00590059 	.word	0x00590059
 800598c:	00590059 	.word	0x00590059
 8005990:	00f500f5 	.word	0x00f500f5
 8005994:	00f500f5 	.word	0x00f500f5
 8005998:	00f500f5 	.word	0x00f500f5
 800599c:	00f500f5 	.word	0x00f500f5
 80059a0:	00f500f5 	.word	0x00f500f5
 80059a4:	00f5020e 	.word	0x00f5020e
 80059a8:	00f500f5 	.word	0x00f500f5
 80059ac:	00f500f5 	.word	0x00f500f5
 80059b0:	00f500f5 	.word	0x00f500f5
 80059b4:	00f500f5 	.word	0x00f500f5
 80059b8:	009400f5 	.word	0x009400f5
 80059bc:	00f500f5 	.word	0x00f500f5
 80059c0:	00f500f5 	.word	0x00f500f5
 80059c4:	008400f5 	.word	0x008400f5
 80059c8:	00f500f5 	.word	0x00f500f5
 80059cc:	00f50248 	.word	0x00f50248
 80059d0:	00f500f5 	.word	0x00f500f5
 80059d4:	00f500f5 	.word	0x00f500f5
 80059d8:	00f500f5 	.word	0x00f500f5
 80059dc:	00f500f5 	.word	0x00f500f5
 80059e0:	023a00f5 	.word	0x023a00f5
 80059e4:	00f501a7 	.word	0x00f501a7
 80059e8:	00f500f5 	.word	0x00f500f5
 80059ec:	01a70289 	.word	0x01a70289
 80059f0:	00f500f5 	.word	0x00f500f5
 80059f4:	00f5027f 	.word	0x00f5027f
 80059f8:	00960269 	.word	0x00960269
 80059fc:	02c502c9 	.word	0x02c502c9
 8005a00:	02a400f5 	.word	0x02a400f5
 8005a04:	008600f5 	.word	0x008600f5
 8005a08:	00f500f5 	.word	0x00f500f5
 8005a0c:	028d      	.short	0x028d
 8005a0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005a12:	2400      	movs	r4, #0
 8005a14:	f817 3b01 	ldrb.w	r3, [r7], #1
 8005a18:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005a1c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005a20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005a24:	2a09      	cmp	r2, #9
 8005a26:	d9f5      	bls.n	8005a14 <_vfiprintf_r+0x170>
 8005a28:	9404      	str	r4, [sp, #16]
 8005a2a:	e790      	b.n	800594e <_vfiprintf_r+0xaa>
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	4658      	mov	r0, fp
 8005a30:	f7fc fc78 	bl	8002324 <__swsetup_r>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	f040 8535 	bne.w	80064a4 <_vfiprintf_r+0xc00>
 8005a3a:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8005a3e:	f002 021a 	and.w	r2, r2, #26
 8005a42:	2a0a      	cmp	r2, #10
 8005a44:	f47f af58 	bne.w	80058f8 <_vfiprintf_r+0x54>
 8005a48:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f6ff af53 	blt.w	80058f8 <_vfiprintf_r+0x54>
 8005a52:	4623      	mov	r3, r4
 8005a54:	463a      	mov	r2, r7
 8005a56:	4641      	mov	r1, r8
 8005a58:	4658      	mov	r0, fp
 8005a5a:	b02b      	add	sp, #172	; 0xac
 8005a5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a60:	f000 bd44 	b.w	80064ec <__sbprintf>
 8005a64:	f04a 0a10 	orr.w	sl, sl, #16
 8005a68:	f01a 0120 	ands.w	r1, sl, #32
 8005a6c:	f000 810f 	beq.w	8005c8e <_vfiprintf_r+0x3ea>
 8005a70:	9b06      	ldr	r3, [sp, #24]
 8005a72:	3307      	adds	r3, #7
 8005a74:	f023 0307 	bic.w	r3, r3, #7
 8005a78:	6859      	ldr	r1, [r3, #4]
 8005a7a:	f853 0b08 	ldr.w	r0, [r3], #8
 8005a7e:	9306      	str	r3, [sp, #24]
 8005a80:	2301      	movs	r3, #1
 8005a82:	e00e      	b.n	8005aa2 <_vfiprintf_r+0x1fe>
 8005a84:	f04a 0a10 	orr.w	sl, sl, #16
 8005a88:	f01a 0120 	ands.w	r1, sl, #32
 8005a8c:	f000 80f2 	beq.w	8005c74 <_vfiprintf_r+0x3d0>
 8005a90:	9b06      	ldr	r3, [sp, #24]
 8005a92:	3307      	adds	r3, #7
 8005a94:	f023 0307 	bic.w	r3, r3, #7
 8005a98:	6859      	ldr	r1, [r3, #4]
 8005a9a:	f853 0b08 	ldr.w	r0, [r3], #8
 8005a9e:	9306      	str	r3, [sp, #24]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8005aaa:	2200      	movs	r2, #0
 8005aac:	9207      	str	r2, [sp, #28]
 8005aae:	9a02      	ldr	r2, [sp, #8]
 8005ab0:	1c54      	adds	r4, r2, #1
 8005ab2:	f000 822f 	beq.w	8005f14 <_vfiprintf_r+0x670>
 8005ab6:	f02a 0480 	bic.w	r4, sl, #128	; 0x80
 8005aba:	9401      	str	r4, [sp, #4]
 8005abc:	ea50 0401 	orrs.w	r4, r0, r1
 8005ac0:	f040 8226 	bne.w	8005f10 <_vfiprintf_r+0x66c>
 8005ac4:	2a00      	cmp	r2, #0
 8005ac6:	f040 8495 	bne.w	80063f4 <_vfiprintf_r+0xb50>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 840e 	bne.w	80062ec <_vfiprintf_r+0xa48>
 8005ad0:	f01a 0301 	ands.w	r3, sl, #1
 8005ad4:	9303      	str	r3, [sp, #12]
 8005ad6:	f040 843e 	bne.w	8006356 <_vfiprintf_r+0xab2>
 8005ada:	ac1a      	add	r4, sp, #104	; 0x68
 8005adc:	e9dd 6302 	ldrd	r6, r3, [sp, #8]
 8005ae0:	429e      	cmp	r6, r3
 8005ae2:	bfb8      	it	lt
 8005ae4:	461e      	movlt	r6, r3
 8005ae6:	9b07      	ldr	r3, [sp, #28]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d03e      	beq.n	8005b6a <_vfiprintf_r+0x2c6>
 8005aec:	3601      	adds	r6, #1
 8005aee:	e03c      	b.n	8005b6a <_vfiprintf_r+0x2c6>
 8005af0:	1be5      	subs	r5, r4, r7
 8005af2:	d01b      	beq.n	8005b2c <_vfiprintf_r+0x288>
 8005af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005af8:	3301      	adds	r3, #1
 8005afa:	442a      	add	r2, r5
 8005afc:	2b07      	cmp	r3, #7
 8005afe:	e9c9 7500 	strd	r7, r5, [r9]
 8005b02:	920f      	str	r2, [sp, #60]	; 0x3c
 8005b04:	930e      	str	r3, [sp, #56]	; 0x38
 8005b06:	dc05      	bgt.n	8005b14 <_vfiprintf_r+0x270>
 8005b08:	f109 0908 	add.w	r9, r9, #8
 8005b0c:	9b05      	ldr	r3, [sp, #20]
 8005b0e:	442b      	add	r3, r5
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	e70a      	b.n	800592a <_vfiprintf_r+0x86>
 8005b14:	2a00      	cmp	r2, #0
 8005b16:	f000 83d1 	beq.w	80062bc <_vfiprintf_r+0xa18>
 8005b1a:	aa0d      	add	r2, sp, #52	; 0x34
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	4658      	mov	r0, fp
 8005b20:	f7ff fe78 	bl	8005814 <__sprint_r.part.0>
 8005b24:	b930      	cbnz	r0, 8005b34 <_vfiprintf_r+0x290>
 8005b26:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005b2a:	e7ef      	b.n	8005b0c <_vfiprintf_r+0x268>
 8005b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f040 8485 	bne.w	800643e <_vfiprintf_r+0xb9a>
 8005b34:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005b38:	065b      	lsls	r3, r3, #25
 8005b3a:	f100 84b3 	bmi.w	80064a4 <_vfiprintf_r+0xc00>
 8005b3e:	9805      	ldr	r0, [sp, #20]
 8005b40:	b02b      	add	sp, #172	; 0xac
 8005b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b46:	2900      	cmp	r1, #0
 8005b48:	f040 8475 	bne.w	8006436 <_vfiprintf_r+0xb92>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ed      	beq.n	8005b2c <_vfiprintf_r+0x288>
 8005b50:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8005b54:	2601      	movs	r6, #1
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005b5e:	9603      	str	r6, [sp, #12]
 8005b60:	ac10      	add	r4, sp, #64	; 0x40
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8cd a004 	str.w	sl, [sp, #4]
 8005b68:	9302      	str	r3, [sp, #8]
 8005b6a:	9b01      	ldr	r3, [sp, #4]
 8005b6c:	f013 0302 	ands.w	r3, r3, #2
 8005b70:	9307      	str	r3, [sp, #28]
 8005b72:	9b01      	ldr	r3, [sp, #4]
 8005b74:	bf18      	it	ne
 8005b76:	3602      	addne	r6, #2
 8005b78:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8005b7c:	9308      	str	r3, [sp, #32]
 8005b7e:	d104      	bne.n	8005b8a <_vfiprintf_r+0x2e6>
 8005b80:	9b04      	ldr	r3, [sp, #16]
 8005b82:	1b9d      	subs	r5, r3, r6
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	f300 82db 	bgt.w	8006140 <_vfiprintf_r+0x89c>
 8005b8a:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005b8e:	f101 0c01 	add.w	ip, r1, #1
 8005b92:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005b96:	b193      	cbz	r3, 8005bbe <_vfiprintf_r+0x31a>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	f1bc 0f07 	cmp.w	ip, #7
 8005ba4:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 8005ba8:	f8c9 3000 	str.w	r3, [r9]
 8005bac:	f8c9 1004 	str.w	r1, [r9, #4]
 8005bb0:	f300 82a6 	bgt.w	8006100 <_vfiprintf_r+0x85c>
 8005bb4:	4661      	mov	r1, ip
 8005bb6:	f109 0908 	add.w	r9, r9, #8
 8005bba:	f10c 0c01 	add.w	ip, ip, #1
 8005bbe:	9b07      	ldr	r3, [sp, #28]
 8005bc0:	b1eb      	cbz	r3, 8005bfe <_vfiprintf_r+0x35a>
 8005bc2:	ab0c      	add	r3, sp, #48	; 0x30
 8005bc4:	3002      	adds	r0, #2
 8005bc6:	f8c9 3000 	str.w	r3, [r9]
 8005bca:	f1bc 0f07 	cmp.w	ip, #7
 8005bce:	f04f 0302 	mov.w	r3, #2
 8005bd2:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 8005bd6:	f8c9 3004 	str.w	r3, [r9, #4]
 8005bda:	f340 82ab 	ble.w	8006134 <_vfiprintf_r+0x890>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	f000 8366 	beq.w	80062b0 <_vfiprintf_r+0xa0c>
 8005be4:	aa0d      	add	r2, sp, #52	; 0x34
 8005be6:	4641      	mov	r1, r8
 8005be8:	4658      	mov	r0, fp
 8005bea:	f7ff fe13 	bl	8005814 <__sprint_r.part.0>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d1a0      	bne.n	8005b34 <_vfiprintf_r+0x290>
 8005bf2:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005bf6:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005bfa:	f101 0c01 	add.w	ip, r1, #1
 8005bfe:	9b08      	ldr	r3, [sp, #32]
 8005c00:	2b80      	cmp	r3, #128	; 0x80
 8005c02:	f000 81c8 	beq.w	8005f96 <_vfiprintf_r+0x6f2>
 8005c06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005c0a:	1a9d      	subs	r5, r3, r2
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	f300 821c 	bgt.w	800604a <_vfiprintf_r+0x7a6>
 8005c12:	9b03      	ldr	r3, [sp, #12]
 8005c14:	f8c9 4000 	str.w	r4, [r9]
 8005c18:	4418      	add	r0, r3
 8005c1a:	f1bc 0f07 	cmp.w	ip, #7
 8005c1e:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 8005c22:	f8c9 3004 	str.w	r3, [r9, #4]
 8005c26:	f340 81b3 	ble.w	8005f90 <_vfiprintf_r+0x6ec>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	f000 82d2 	beq.w	80061d4 <_vfiprintf_r+0x930>
 8005c30:	aa0d      	add	r2, sp, #52	; 0x34
 8005c32:	4641      	mov	r1, r8
 8005c34:	4658      	mov	r0, fp
 8005c36:	f7ff fded 	bl	8005814 <__sprint_r.part.0>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	f47f af7a 	bne.w	8005b34 <_vfiprintf_r+0x290>
 8005c40:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c42:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005c46:	9b01      	ldr	r3, [sp, #4]
 8005c48:	075a      	lsls	r2, r3, #29
 8005c4a:	d504      	bpl.n	8005c56 <_vfiprintf_r+0x3b2>
 8005c4c:	9b04      	ldr	r3, [sp, #16]
 8005c4e:	1b9c      	subs	r4, r3, r6
 8005c50:	2c00      	cmp	r4, #0
 8005c52:	f300 82c9 	bgt.w	80061e8 <_vfiprintf_r+0x944>
 8005c56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c5a:	42b2      	cmp	r2, r6
 8005c5c:	bfac      	ite	ge
 8005c5e:	189b      	addge	r3, r3, r2
 8005c60:	199b      	addlt	r3, r3, r6
 8005c62:	9305      	str	r3, [sp, #20]
 8005c64:	2800      	cmp	r0, #0
 8005c66:	f040 8236 	bne.w	80060d6 <_vfiprintf_r+0x832>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	930e      	str	r3, [sp, #56]	; 0x38
 8005c6e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005c72:	e64a      	b.n	800590a <_vfiprintf_r+0x66>
 8005c74:	f01a 0310 	ands.w	r3, sl, #16
 8005c78:	d149      	bne.n	8005d0e <_vfiprintf_r+0x46a>
 8005c7a:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8005c7e:	d046      	beq.n	8005d0e <_vfiprintf_r+0x46a>
 8005c80:	9a06      	ldr	r2, [sp, #24]
 8005c82:	f852 0b04 	ldr.w	r0, [r2], #4
 8005c86:	9206      	str	r2, [sp, #24]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	b280      	uxth	r0, r0
 8005c8c:	e709      	b.n	8005aa2 <_vfiprintf_r+0x1fe>
 8005c8e:	f01a 0310 	ands.w	r3, sl, #16
 8005c92:	d142      	bne.n	8005d1a <_vfiprintf_r+0x476>
 8005c94:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8005c98:	d03f      	beq.n	8005d1a <_vfiprintf_r+0x476>
 8005c9a:	9a06      	ldr	r2, [sp, #24]
 8005c9c:	f852 0b04 	ldr.w	r0, [r2], #4
 8005ca0:	9206      	str	r2, [sp, #24]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	b280      	uxth	r0, r0
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e6fb      	b.n	8005aa2 <_vfiprintf_r+0x1fe>
 8005caa:	2900      	cmp	r1, #0
 8005cac:	f040 83e1 	bne.w	8006472 <_vfiprintf_r+0xbce>
 8005cb0:	f01a 0f20 	tst.w	sl, #32
 8005cb4:	9b06      	ldr	r3, [sp, #24]
 8005cb6:	d068      	beq.n	8005d8a <_vfiprintf_r+0x4e6>
 8005cb8:	3307      	adds	r3, #7
 8005cba:	f023 0307 	bic.w	r3, r3, #7
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f852 0b08 	ldr.w	r0, [r2], #8
 8005cc6:	9206      	str	r2, [sp, #24]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f2c0 8304 	blt.w	80062d8 <_vfiprintf_r+0xa34>
 8005cd0:	9b02      	ldr	r3, [sp, #8]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	f000 838a 	beq.w	80063ec <_vfiprintf_r+0xb48>
 8005cd8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005cdc:	9307      	str	r3, [sp, #28]
 8005cde:	ea50 0301 	orrs.w	r3, r0, r1
 8005ce2:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8005ce6:	f000 8354 	beq.w	8006392 <_vfiprintf_r+0xaee>
 8005cea:	280a      	cmp	r0, #10
 8005cec:	f171 0300 	sbcs.w	r3, r1, #0
 8005cf0:	f080 8312 	bcs.w	8006318 <_vfiprintf_r+0xa74>
 8005cf4:	3030      	adds	r0, #48	; 0x30
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
 8005cfc:	f8cd a004 	str.w	sl, [sp, #4]
 8005d00:	9303      	str	r3, [sp, #12]
 8005d02:	f10d 0467 	add.w	r4, sp, #103	; 0x67
 8005d06:	e6e9      	b.n	8005adc <_vfiprintf_r+0x238>
 8005d08:	f7fd fd9e 	bl	8003848 <__sinit>
 8005d0c:	e5d7      	b.n	80058be <_vfiprintf_r+0x1a>
 8005d0e:	9b06      	ldr	r3, [sp, #24]
 8005d10:	f853 0b04 	ldr.w	r0, [r3], #4
 8005d14:	9306      	str	r3, [sp, #24]
 8005d16:	460b      	mov	r3, r1
 8005d18:	e6c3      	b.n	8005aa2 <_vfiprintf_r+0x1fe>
 8005d1a:	9b06      	ldr	r3, [sp, #24]
 8005d1c:	f853 0b04 	ldr.w	r0, [r3], #4
 8005d20:	9306      	str	r3, [sp, #24]
 8005d22:	2301      	movs	r3, #1
 8005d24:	e6bd      	b.n	8005aa2 <_vfiprintf_r+0x1fe>
 8005d26:	9b06      	ldr	r3, [sp, #24]
 8005d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2c:	9204      	str	r2, [sp, #16]
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	f280 830d 	bge.w	800634e <_vfiprintf_r+0xaaa>
 8005d34:	9a04      	ldr	r2, [sp, #16]
 8005d36:	9306      	str	r3, [sp, #24]
 8005d38:	4252      	negs	r2, r2
 8005d3a:	9204      	str	r2, [sp, #16]
 8005d3c:	783b      	ldrb	r3, [r7, #0]
 8005d3e:	f04a 0a04 	orr.w	sl, sl, #4
 8005d42:	e603      	b.n	800594c <_vfiprintf_r+0xa8>
 8005d44:	463c      	mov	r4, r7
 8005d46:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d4c:	f000 83af 	beq.w	80064ae <_vfiprintf_r+0xc0a>
 8005d50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005d54:	2a09      	cmp	r2, #9
 8005d56:	4627      	mov	r7, r4
 8005d58:	bf98      	it	ls
 8005d5a:	2400      	movls	r4, #0
 8005d5c:	f200 838f 	bhi.w	800647e <_vfiprintf_r+0xbda>
 8005d60:	f817 3b01 	ldrb.w	r3, [r7], #1
 8005d64:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005d68:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005d6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005d70:	2a09      	cmp	r2, #9
 8005d72:	d9f5      	bls.n	8005d60 <_vfiprintf_r+0x4bc>
 8005d74:	9402      	str	r4, [sp, #8]
 8005d76:	e5ea      	b.n	800594e <_vfiprintf_r+0xaa>
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	f040 8384 	bne.w	8006486 <_vfiprintf_r+0xbe2>
 8005d7e:	f04a 0a10 	orr.w	sl, sl, #16
 8005d82:	f01a 0f20 	tst.w	sl, #32
 8005d86:	9b06      	ldr	r3, [sp, #24]
 8005d88:	d196      	bne.n	8005cb8 <_vfiprintf_r+0x414>
 8005d8a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005d8e:	9306      	str	r3, [sp, #24]
 8005d90:	f01a 0f10 	tst.w	sl, #16
 8005d94:	f040 829b 	bne.w	80062ce <_vfiprintf_r+0xa2a>
 8005d98:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005d9c:	f000 8297 	beq.w	80062ce <_vfiprintf_r+0xa2a>
 8005da0:	f340 31c0 	sbfx	r1, r0, #15, #1
 8005da4:	460b      	mov	r3, r1
 8005da6:	b200      	sxth	r0, r0
 8005da8:	e78f      	b.n	8005cca <_vfiprintf_r+0x426>
 8005daa:	783b      	ldrb	r3, [r7, #0]
 8005dac:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8005db0:	e5cc      	b.n	800594c <_vfiprintf_r+0xa8>
 8005db2:	783b      	ldrb	r3, [r7, #0]
 8005db4:	2101      	movs	r1, #1
 8005db6:	202b      	movs	r0, #43	; 0x2b
 8005db8:	e5c8      	b.n	800594c <_vfiprintf_r+0xa8>
 8005dba:	783b      	ldrb	r3, [r7, #0]
 8005dbc:	f04a 0a01 	orr.w	sl, sl, #1
 8005dc0:	e5c4      	b.n	800594c <_vfiprintf_r+0xa8>
 8005dc2:	783b      	ldrb	r3, [r7, #0]
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	f47f adc1 	bne.w	800594c <_vfiprintf_r+0xa8>
 8005dca:	2101      	movs	r1, #1
 8005dcc:	2020      	movs	r0, #32
 8005dce:	e5bd      	b.n	800594c <_vfiprintf_r+0xa8>
 8005dd0:	9b06      	ldr	r3, [sp, #24]
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8005dda:	2601      	movs	r6, #1
 8005ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005de0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8005de4:	9306      	str	r3, [sp, #24]
 8005de6:	9603      	str	r6, [sp, #12]
 8005de8:	ac10      	add	r4, sp, #64	; 0x40
 8005dea:	e6ba      	b.n	8005b62 <_vfiprintf_r+0x2be>
 8005dec:	2900      	cmp	r1, #0
 8005dee:	f040 834d 	bne.w	800648c <_vfiprintf_r+0xbe8>
 8005df2:	4abd      	ldr	r2, [pc, #756]	; (80060e8 <_vfiprintf_r+0x844>)
 8005df4:	9209      	str	r2, [sp, #36]	; 0x24
 8005df6:	f01a 0120 	ands.w	r1, sl, #32
 8005dfa:	d044      	beq.n	8005e86 <_vfiprintf_r+0x5e2>
 8005dfc:	9a06      	ldr	r2, [sp, #24]
 8005dfe:	3207      	adds	r2, #7
 8005e00:	f022 0207 	bic.w	r2, r2, #7
 8005e04:	6851      	ldr	r1, [r2, #4]
 8005e06:	f852 0b08 	ldr.w	r0, [r2], #8
 8005e0a:	9206      	str	r2, [sp, #24]
 8005e0c:	f01a 0f01 	tst.w	sl, #1
 8005e10:	d00b      	beq.n	8005e2a <_vfiprintf_r+0x586>
 8005e12:	ea50 0201 	orrs.w	r2, r0, r1
 8005e16:	d008      	beq.n	8005e2a <_vfiprintf_r+0x586>
 8005e18:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8005e1c:	2330      	movs	r3, #48	; 0x30
 8005e1e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8005e22:	f04a 0a02 	orr.w	sl, sl, #2
 8005e26:	2302      	movs	r3, #2
 8005e28:	e63b      	b.n	8005aa2 <_vfiprintf_r+0x1fe>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e639      	b.n	8005aa2 <_vfiprintf_r+0x1fe>
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	f040 8322 	bne.w	8006478 <_vfiprintf_r+0xbd4>
 8005e34:	f01a 0f20 	tst.w	sl, #32
 8005e38:	f040 829a 	bne.w	8006370 <_vfiprintf_r+0xacc>
 8005e3c:	f01a 0f10 	tst.w	sl, #16
 8005e40:	f040 82cc 	bne.w	80063dc <_vfiprintf_r+0xb38>
 8005e44:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005e48:	f000 82c8 	beq.w	80063dc <_vfiprintf_r+0xb38>
 8005e4c:	9b06      	ldr	r3, [sp, #24]
 8005e4e:	9905      	ldr	r1, [sp, #20]
 8005e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e54:	9306      	str	r3, [sp, #24]
 8005e56:	8011      	strh	r1, [r2, #0]
 8005e58:	e557      	b.n	800590a <_vfiprintf_r+0x66>
 8005e5a:	783b      	ldrb	r3, [r7, #0]
 8005e5c:	2b6c      	cmp	r3, #108	; 0x6c
 8005e5e:	bf03      	ittte	eq
 8005e60:	787b      	ldrbeq	r3, [r7, #1]
 8005e62:	f04a 0a20 	orreq.w	sl, sl, #32
 8005e66:	3701      	addeq	r7, #1
 8005e68:	f04a 0a10 	orrne.w	sl, sl, #16
 8005e6c:	e56e      	b.n	800594c <_vfiprintf_r+0xa8>
 8005e6e:	783b      	ldrb	r3, [r7, #0]
 8005e70:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 8005e74:	e56a      	b.n	800594c <_vfiprintf_r+0xa8>
 8005e76:	2900      	cmp	r1, #0
 8005e78:	f040 82f8 	bne.w	800646c <_vfiprintf_r+0xbc8>
 8005e7c:	4a9b      	ldr	r2, [pc, #620]	; (80060ec <_vfiprintf_r+0x848>)
 8005e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e80:	f01a 0120 	ands.w	r1, sl, #32
 8005e84:	d1ba      	bne.n	8005dfc <_vfiprintf_r+0x558>
 8005e86:	f01a 0210 	ands.w	r2, sl, #16
 8005e8a:	f040 821b 	bne.w	80062c4 <_vfiprintf_r+0xa20>
 8005e8e:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
 8005e92:	f000 8217 	beq.w	80062c4 <_vfiprintf_r+0xa20>
 8005e96:	9c06      	ldr	r4, [sp, #24]
 8005e98:	f854 0b04 	ldr.w	r0, [r4], #4
 8005e9c:	9406      	str	r4, [sp, #24]
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	b280      	uxth	r0, r0
 8005ea2:	e7b3      	b.n	8005e0c <_vfiprintf_r+0x568>
 8005ea4:	9d06      	ldr	r5, [sp, #24]
 8005ea6:	f855 4b04 	ldr.w	r4, [r5], #4
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	f000 82a4 	beq.w	8006400 <_vfiprintf_r+0xb5c>
 8005eb8:	9b02      	ldr	r3, [sp, #8]
 8005eba:	1c5e      	adds	r6, r3, #1
 8005ebc:	f000 8272 	beq.w	80063a4 <_vfiprintf_r+0xb00>
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7fe fb5b 	bl	8004580 <memchr>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f000 82be 	beq.w	800644c <_vfiprintf_r+0xba8>
 8005ed0:	1b03      	subs	r3, r0, r4
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005ed8:	9307      	str	r3, [sp, #28]
 8005eda:	2300      	movs	r3, #0
 8005edc:	9506      	str	r5, [sp, #24]
 8005ede:	f8cd a004 	str.w	sl, [sp, #4]
 8005ee2:	9302      	str	r3, [sp, #8]
 8005ee4:	e5fa      	b.n	8005adc <_vfiprintf_r+0x238>
 8005ee6:	783b      	ldrb	r3, [r7, #0]
 8005ee8:	f04a 0a20 	orr.w	sl, sl, #32
 8005eec:	e52e      	b.n	800594c <_vfiprintf_r+0xa8>
 8005eee:	9b06      	ldr	r3, [sp, #24]
 8005ef0:	f853 0b04 	ldr.w	r0, [r3], #4
 8005ef4:	9306      	str	r3, [sp, #24]
 8005ef6:	2330      	movs	r3, #48	; 0x30
 8005ef8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8005efc:	2378      	movs	r3, #120	; 0x78
 8005efe:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8005f02:	4b7a      	ldr	r3, [pc, #488]	; (80060ec <_vfiprintf_r+0x848>)
 8005f04:	9309      	str	r3, [sp, #36]	; 0x24
 8005f06:	f04a 0a02 	orr.w	sl, sl, #2
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e5c8      	b.n	8005aa2 <_vfiprintf_r+0x1fe>
 8005f10:	f8dd a004 	ldr.w	sl, [sp, #4]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	f43f aee8 	beq.w	8005cea <_vfiprintf_r+0x446>
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	ac1a      	add	r4, sp, #104	; 0x68
 8005f1e:	d112      	bne.n	8005f46 <_vfiprintf_r+0x6a2>
 8005f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f22:	f000 030f 	and.w	r3, r0, #15
 8005f26:	0900      	lsrs	r0, r0, #4
 8005f28:	5cd3      	ldrb	r3, [r2, r3]
 8005f2a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8005f2e:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8005f32:	0909      	lsrs	r1, r1, #4
 8005f34:	ea50 0301 	orrs.w	r3, r0, r1
 8005f38:	d1f3      	bne.n	8005f22 <_vfiprintf_r+0x67e>
 8005f3a:	ab1a      	add	r3, sp, #104	; 0x68
 8005f3c:	1b1b      	subs	r3, r3, r4
 8005f3e:	f8cd a004 	str.w	sl, [sp, #4]
 8005f42:	9303      	str	r3, [sp, #12]
 8005f44:	e5ca      	b.n	8005adc <_vfiprintf_r+0x238>
 8005f46:	f000 0307 	and.w	r3, r0, #7
 8005f4a:	08c0      	lsrs	r0, r0, #3
 8005f4c:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 8005f50:	08c9      	lsrs	r1, r1, #3
 8005f52:	3330      	adds	r3, #48	; 0x30
 8005f54:	ea50 0501 	orrs.w	r5, r0, r1
 8005f58:	4622      	mov	r2, r4
 8005f5a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8005f5e:	d1f2      	bne.n	8005f46 <_vfiprintf_r+0x6a2>
 8005f60:	f01a 0f01 	tst.w	sl, #1
 8005f64:	d0e9      	beq.n	8005f3a <_vfiprintf_r+0x696>
 8005f66:	2b30      	cmp	r3, #48	; 0x30
 8005f68:	d0e7      	beq.n	8005f3a <_vfiprintf_r+0x696>
 8005f6a:	2330      	movs	r3, #48	; 0x30
 8005f6c:	3a02      	subs	r2, #2
 8005f6e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005f72:	ab1a      	add	r3, sp, #104	; 0x68
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	f8cd a004 	str.w	sl, [sp, #4]
 8005f7a:	9303      	str	r3, [sp, #12]
 8005f7c:	4614      	mov	r4, r2
 8005f7e:	e5ad      	b.n	8005adc <_vfiprintf_r+0x238>
 8005f80:	9803      	ldr	r0, [sp, #12]
 8005f82:	941a      	str	r4, [sp, #104]	; 0x68
 8005f84:	2301      	movs	r3, #1
 8005f86:	901b      	str	r0, [sp, #108]	; 0x6c
 8005f88:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f8a:	930e      	str	r3, [sp, #56]	; 0x38
 8005f8c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005f90:	f109 0908 	add.w	r9, r9, #8
 8005f94:	e657      	b.n	8005c46 <_vfiprintf_r+0x3a2>
 8005f96:	9b04      	ldr	r3, [sp, #16]
 8005f98:	1b9d      	subs	r5, r3, r6
 8005f9a:	2d00      	cmp	r5, #0
 8005f9c:	f77f ae33 	ble.w	8005c06 <_vfiprintf_r+0x362>
 8005fa0:	2d10      	cmp	r5, #16
 8005fa2:	f340 827b 	ble.w	800649c <_vfiprintf_r+0xbf8>
 8005fa6:	f8df a148 	ldr.w	sl, [pc, #328]	; 80060f0 <_vfiprintf_r+0x84c>
 8005faa:	4652      	mov	r2, sl
 8005fac:	2310      	movs	r3, #16
 8005fae:	46a2      	mov	sl, r4
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	e007      	b.n	8005fc4 <_vfiprintf_r+0x720>
 8005fb4:	f101 0e02 	add.w	lr, r1, #2
 8005fb8:	f109 0908 	add.w	r9, r9, #8
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	3d10      	subs	r5, #16
 8005fc0:	2d10      	cmp	r5, #16
 8005fc2:	dd1d      	ble.n	8006000 <_vfiprintf_r+0x75c>
 8005fc4:	1c4a      	adds	r2, r1, #1
 8005fc6:	3010      	adds	r0, #16
 8005fc8:	2a07      	cmp	r2, #7
 8005fca:	e9c9 4300 	strd	r4, r3, [r9]
 8005fce:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8005fd2:	ddef      	ble.n	8005fb4 <_vfiprintf_r+0x710>
 8005fd4:	aa0d      	add	r2, sp, #52	; 0x34
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	f000 808c 	beq.w	80060f4 <_vfiprintf_r+0x850>
 8005fdc:	4641      	mov	r1, r8
 8005fde:	4658      	mov	r0, fp
 8005fe0:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005fe4:	f7ff fc16 	bl	8005814 <__sprint_r.part.0>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f47f ada3 	bne.w	8005b34 <_vfiprintf_r+0x290>
 8005fee:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8005ff2:	3d10      	subs	r5, #16
 8005ff4:	2d10      	cmp	r5, #16
 8005ff6:	f101 0e01 	add.w	lr, r1, #1
 8005ffa:	f04f 0310 	mov.w	r3, #16
 8005ffe:	dce1      	bgt.n	8005fc4 <_vfiprintf_r+0x720>
 8006000:	4623      	mov	r3, r4
 8006002:	4654      	mov	r4, sl
 8006004:	469a      	mov	sl, r3
 8006006:	4428      	add	r0, r5
 8006008:	f1be 0f07 	cmp.w	lr, #7
 800600c:	e9cd e00e 	strd	lr, r0, [sp, #56]	; 0x38
 8006010:	f8c9 a000 	str.w	sl, [r9]
 8006014:	f8c9 5004 	str.w	r5, [r9, #4]
 8006018:	f340 81a4 	ble.w	8006364 <_vfiprintf_r+0xac0>
 800601c:	2800      	cmp	r0, #0
 800601e:	f000 81f8 	beq.w	8006412 <_vfiprintf_r+0xb6e>
 8006022:	aa0d      	add	r2, sp, #52	; 0x34
 8006024:	4641      	mov	r1, r8
 8006026:	4658      	mov	r0, fp
 8006028:	f7ff fbf4 	bl	8005814 <__sprint_r.part.0>
 800602c:	2800      	cmp	r0, #0
 800602e:	f47f ad81 	bne.w	8005b34 <_vfiprintf_r+0x290>
 8006032:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006036:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 800603a:	1a9d      	subs	r5, r3, r2
 800603c:	2d00      	cmp	r5, #0
 800603e:	f101 0c01 	add.w	ip, r1, #1
 8006042:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006046:	f77f ade4 	ble.w	8005c12 <_vfiprintf_r+0x36e>
 800604a:	2d10      	cmp	r5, #16
 800604c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 80060f0 <_vfiprintf_r+0x84c>
 8006050:	dd2b      	ble.n	80060aa <_vfiprintf_r+0x806>
 8006052:	4652      	mov	r2, sl
 8006054:	2310      	movs	r3, #16
 8006056:	46a2      	mov	sl, r4
 8006058:	4614      	mov	r4, r2
 800605a:	e007      	b.n	800606c <_vfiprintf_r+0x7c8>
 800605c:	f101 0c02 	add.w	ip, r1, #2
 8006060:	f109 0908 	add.w	r9, r9, #8
 8006064:	4611      	mov	r1, r2
 8006066:	3d10      	subs	r5, #16
 8006068:	2d10      	cmp	r5, #16
 800606a:	dd1b      	ble.n	80060a4 <_vfiprintf_r+0x800>
 800606c:	1c4a      	adds	r2, r1, #1
 800606e:	3010      	adds	r0, #16
 8006070:	2a07      	cmp	r2, #7
 8006072:	e9c9 4300 	strd	r4, r3, [r9]
 8006076:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 800607a:	ddef      	ble.n	800605c <_vfiprintf_r+0x7b8>
 800607c:	aa0d      	add	r2, sp, #52	; 0x34
 800607e:	4641      	mov	r1, r8
 8006080:	b318      	cbz	r0, 80060ca <_vfiprintf_r+0x826>
 8006082:	4658      	mov	r0, fp
 8006084:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006088:	f7ff fbc4 	bl	8005814 <__sprint_r.part.0>
 800608c:	2800      	cmp	r0, #0
 800608e:	f47f ad51 	bne.w	8005b34 <_vfiprintf_r+0x290>
 8006092:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8006096:	3d10      	subs	r5, #16
 8006098:	2d10      	cmp	r5, #16
 800609a:	f101 0c01 	add.w	ip, r1, #1
 800609e:	f04f 0310 	mov.w	r3, #16
 80060a2:	dce3      	bgt.n	800606c <_vfiprintf_r+0x7c8>
 80060a4:	4623      	mov	r3, r4
 80060a6:	4654      	mov	r4, sl
 80060a8:	469a      	mov	sl, r3
 80060aa:	4428      	add	r0, r5
 80060ac:	f1bc 0f07 	cmp.w	ip, #7
 80060b0:	e9cd c00e 	strd	ip, r0, [sp, #56]	; 0x38
 80060b4:	f8c9 a000 	str.w	sl, [r9]
 80060b8:	f8c9 5004 	str.w	r5, [r9, #4]
 80060bc:	f300 80e3 	bgt.w	8006286 <_vfiprintf_r+0x9e2>
 80060c0:	f109 0908 	add.w	r9, r9, #8
 80060c4:	f10c 0c01 	add.w	ip, ip, #1
 80060c8:	e5a3      	b.n	8005c12 <_vfiprintf_r+0x36e>
 80060ca:	f04f 0c01 	mov.w	ip, #1
 80060ce:	4601      	mov	r1, r0
 80060d0:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80060d4:	e7c7      	b.n	8006066 <_vfiprintf_r+0x7c2>
 80060d6:	aa0d      	add	r2, sp, #52	; 0x34
 80060d8:	4641      	mov	r1, r8
 80060da:	4658      	mov	r0, fp
 80060dc:	f7ff fb9a 	bl	8005814 <__sprint_r.part.0>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f43f adc2 	beq.w	8005c6a <_vfiprintf_r+0x3c6>
 80060e6:	e525      	b.n	8005b34 <_vfiprintf_r+0x290>
 80060e8:	0801caf4 	.word	0x0801caf4
 80060ec:	0801cae0 	.word	0x0801cae0
 80060f0:	0800d510 	.word	0x0800d510
 80060f4:	f04f 0e01 	mov.w	lr, #1
 80060f8:	4601      	mov	r1, r0
 80060fa:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80060fe:	e75e      	b.n	8005fbe <_vfiprintf_r+0x71a>
 8006100:	2800      	cmp	r0, #0
 8006102:	f000 80d2 	beq.w	80062aa <_vfiprintf_r+0xa06>
 8006106:	aa0d      	add	r2, sp, #52	; 0x34
 8006108:	4641      	mov	r1, r8
 800610a:	4658      	mov	r0, fp
 800610c:	f7ff fb82 	bl	8005814 <__sprint_r.part.0>
 8006110:	2800      	cmp	r0, #0
 8006112:	f47f ad0f 	bne.w	8005b34 <_vfiprintf_r+0x290>
 8006116:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 800611a:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800611e:	f101 0c01 	add.w	ip, r1, #1
 8006122:	e54c      	b.n	8005bbe <_vfiprintf_r+0x31a>
 8006124:	2002      	movs	r0, #2
 8006126:	ab0c      	add	r3, sp, #48	; 0x30
 8006128:	901b      	str	r0, [sp, #108]	; 0x6c
 800612a:	931a      	str	r3, [sp, #104]	; 0x68
 800612c:	f04f 0c01 	mov.w	ip, #1
 8006130:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006134:	4661      	mov	r1, ip
 8006136:	f109 0908 	add.w	r9, r9, #8
 800613a:	f101 0c01 	add.w	ip, r1, #1
 800613e:	e55e      	b.n	8005bfe <_vfiprintf_r+0x35a>
 8006140:	2d10      	cmp	r5, #16
 8006142:	f340 818d 	ble.w	8006460 <_vfiprintf_r+0xbbc>
 8006146:	f8df a380 	ldr.w	sl, [pc, #896]	; 80064c8 <_vfiprintf_r+0xc24>
 800614a:	e9dd c00e 	ldrd	ip, r0, [sp, #56]	; 0x38
 800614e:	4652      	mov	r2, sl
 8006150:	2310      	movs	r3, #16
 8006152:	46a2      	mov	sl, r4
 8006154:	4661      	mov	r1, ip
 8006156:	4614      	mov	r4, r2
 8006158:	e007      	b.n	800616a <_vfiprintf_r+0x8c6>
 800615a:	f101 0c02 	add.w	ip, r1, #2
 800615e:	f109 0908 	add.w	r9, r9, #8
 8006162:	4611      	mov	r1, r2
 8006164:	3d10      	subs	r5, #16
 8006166:	2d10      	cmp	r5, #16
 8006168:	dd1b      	ble.n	80061a2 <_vfiprintf_r+0x8fe>
 800616a:	1c4a      	adds	r2, r1, #1
 800616c:	3010      	adds	r0, #16
 800616e:	2a07      	cmp	r2, #7
 8006170:	e9c9 4300 	strd	r4, r3, [r9]
 8006174:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
 8006178:	ddef      	ble.n	800615a <_vfiprintf_r+0x8b6>
 800617a:	aa0d      	add	r2, sp, #52	; 0x34
 800617c:	b320      	cbz	r0, 80061c8 <_vfiprintf_r+0x924>
 800617e:	4641      	mov	r1, r8
 8006180:	4658      	mov	r0, fp
 8006182:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006186:	f7ff fb45 	bl	8005814 <__sprint_r.part.0>
 800618a:	2800      	cmp	r0, #0
 800618c:	f47f acd2 	bne.w	8005b34 <_vfiprintf_r+0x290>
 8006190:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 8006194:	3d10      	subs	r5, #16
 8006196:	2d10      	cmp	r5, #16
 8006198:	f101 0c01 	add.w	ip, r1, #1
 800619c:	f04f 0310 	mov.w	r3, #16
 80061a0:	dce3      	bgt.n	800616a <_vfiprintf_r+0x8c6>
 80061a2:	4623      	mov	r3, r4
 80061a4:	4661      	mov	r1, ip
 80061a6:	4654      	mov	r4, sl
 80061a8:	469a      	mov	sl, r3
 80061aa:	4428      	add	r0, r5
 80061ac:	2907      	cmp	r1, #7
 80061ae:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
 80061b2:	f8c9 a000 	str.w	sl, [r9]
 80061b6:	f8c9 5004 	str.w	r5, [r9, #4]
 80061ba:	f300 809c 	bgt.w	80062f6 <_vfiprintf_r+0xa52>
 80061be:	f109 0908 	add.w	r9, r9, #8
 80061c2:	f101 0c01 	add.w	ip, r1, #1
 80061c6:	e4e4      	b.n	8005b92 <_vfiprintf_r+0x2ee>
 80061c8:	4601      	mov	r1, r0
 80061ca:	f04f 0c01 	mov.w	ip, #1
 80061ce:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80061d2:	e7c7      	b.n	8006164 <_vfiprintf_r+0x8c0>
 80061d4:	9b01      	ldr	r3, [sp, #4]
 80061d6:	900e      	str	r0, [sp, #56]	; 0x38
 80061d8:	0759      	lsls	r1, r3, #29
 80061da:	d54c      	bpl.n	8006276 <_vfiprintf_r+0x9d2>
 80061dc:	9b04      	ldr	r3, [sp, #16]
 80061de:	1b9c      	subs	r4, r3, r6
 80061e0:	2c00      	cmp	r4, #0
 80061e2:	dd48      	ble.n	8006276 <_vfiprintf_r+0x9d2>
 80061e4:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80061e8:	2c10      	cmp	r4, #16
 80061ea:	f340 8152 	ble.w	8006492 <_vfiprintf_r+0xbee>
 80061ee:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 80064c8 <_vfiprintf_r+0xc24>
 80061f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f4:	4653      	mov	r3, sl
 80061f6:	2510      	movs	r5, #16
 80061f8:	46b2      	mov	sl, r6
 80061fa:	461e      	mov	r6, r3
 80061fc:	e006      	b.n	800620c <_vfiprintf_r+0x968>
 80061fe:	1c91      	adds	r1, r2, #2
 8006200:	f109 0908 	add.w	r9, r9, #8
 8006204:	461a      	mov	r2, r3
 8006206:	3c10      	subs	r4, #16
 8006208:	2c10      	cmp	r4, #16
 800620a:	dd19      	ble.n	8006240 <_vfiprintf_r+0x99c>
 800620c:	1c53      	adds	r3, r2, #1
 800620e:	3010      	adds	r0, #16
 8006210:	2b07      	cmp	r3, #7
 8006212:	e9c9 6500 	strd	r6, r5, [r9]
 8006216:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
 800621a:	ddf0      	ble.n	80061fe <_vfiprintf_r+0x95a>
 800621c:	aa0d      	add	r2, sp, #52	; 0x34
 800621e:	b328      	cbz	r0, 800626c <_vfiprintf_r+0x9c8>
 8006220:	4641      	mov	r1, r8
 8006222:	4658      	mov	r0, fp
 8006224:	f7ff faf6 	bl	8005814 <__sprint_r.part.0>
 8006228:	2800      	cmp	r0, #0
 800622a:	f47f ac83 	bne.w	8005b34 <_vfiprintf_r+0x290>
 800622e:	e9dd 200e 	ldrd	r2, r0, [sp, #56]	; 0x38
 8006232:	3c10      	subs	r4, #16
 8006234:	2c10      	cmp	r4, #16
 8006236:	f102 0101 	add.w	r1, r2, #1
 800623a:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800623e:	dce5      	bgt.n	800620c <_vfiprintf_r+0x968>
 8006240:	4633      	mov	r3, r6
 8006242:	4656      	mov	r6, sl
 8006244:	469a      	mov	sl, r3
 8006246:	4420      	add	r0, r4
 8006248:	2907      	cmp	r1, #7
 800624a:	e9c9 a400 	strd	sl, r4, [r9]
 800624e:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
 8006252:	f77f ad00 	ble.w	8005c56 <_vfiprintf_r+0x3b2>
 8006256:	b170      	cbz	r0, 8006276 <_vfiprintf_r+0x9d2>
 8006258:	aa0d      	add	r2, sp, #52	; 0x34
 800625a:	4641      	mov	r1, r8
 800625c:	4658      	mov	r0, fp
 800625e:	f7ff fad9 	bl	8005814 <__sprint_r.part.0>
 8006262:	2800      	cmp	r0, #0
 8006264:	f47f ac66 	bne.w	8005b34 <_vfiprintf_r+0x290>
 8006268:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800626a:	e4f4      	b.n	8005c56 <_vfiprintf_r+0x3b2>
 800626c:	2101      	movs	r1, #1
 800626e:	4602      	mov	r2, r0
 8006270:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006274:	e7c7      	b.n	8006206 <_vfiprintf_r+0x962>
 8006276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800627a:	42b2      	cmp	r2, r6
 800627c:	bfac      	ite	ge
 800627e:	189b      	addge	r3, r3, r2
 8006280:	199b      	addlt	r3, r3, r6
 8006282:	9305      	str	r3, [sp, #20]
 8006284:	e4f1      	b.n	8005c6a <_vfiprintf_r+0x3c6>
 8006286:	2800      	cmp	r0, #0
 8006288:	f43f ae7a 	beq.w	8005f80 <_vfiprintf_r+0x6dc>
 800628c:	aa0d      	add	r2, sp, #52	; 0x34
 800628e:	4641      	mov	r1, r8
 8006290:	4658      	mov	r0, fp
 8006292:	f7ff fabf 	bl	8005814 <__sprint_r.part.0>
 8006296:	2800      	cmp	r0, #0
 8006298:	f47f ac4c 	bne.w	8005b34 <_vfiprintf_r+0x290>
 800629c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800629e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80062a0:	f103 0c01 	add.w	ip, r3, #1
 80062a4:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80062a8:	e4b3      	b.n	8005c12 <_vfiprintf_r+0x36e>
 80062aa:	9b07      	ldr	r3, [sp, #28]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d169      	bne.n	8006384 <_vfiprintf_r+0xae0>
 80062b0:	f04f 0c01 	mov.w	ip, #1
 80062b4:	4601      	mov	r1, r0
 80062b6:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80062ba:	e4a0      	b.n	8005bfe <_vfiprintf_r+0x35a>
 80062bc:	920e      	str	r2, [sp, #56]	; 0x38
 80062be:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80062c2:	e423      	b.n	8005b0c <_vfiprintf_r+0x268>
 80062c4:	9a06      	ldr	r2, [sp, #24]
 80062c6:	f852 0b04 	ldr.w	r0, [r2], #4
 80062ca:	9206      	str	r2, [sp, #24]
 80062cc:	e59e      	b.n	8005e0c <_vfiprintf_r+0x568>
 80062ce:	17c1      	asrs	r1, r0, #31
 80062d0:	460b      	mov	r3, r1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f6bf acfc 	bge.w	8005cd0 <_vfiprintf_r+0x42c>
 80062d8:	232d      	movs	r3, #45	; 0x2d
 80062da:	4240      	negs	r0, r0
 80062dc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80062e0:	9307      	str	r3, [sp, #28]
 80062e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80062e6:	2301      	movs	r3, #1
 80062e8:	f7ff bbe1 	b.w	8005aae <_vfiprintf_r+0x20a>
 80062ec:	9b02      	ldr	r3, [sp, #8]
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	ac1a      	add	r4, sp, #104	; 0x68
 80062f2:	f7ff bbf3 	b.w	8005adc <_vfiprintf_r+0x238>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d062      	beq.n	80063c0 <_vfiprintf_r+0xb1c>
 80062fa:	aa0d      	add	r2, sp, #52	; 0x34
 80062fc:	4641      	mov	r1, r8
 80062fe:	4658      	mov	r0, fp
 8006300:	f7ff fa88 	bl	8005814 <__sprint_r.part.0>
 8006304:	2800      	cmp	r0, #0
 8006306:	f47f ac15 	bne.w	8005b34 <_vfiprintf_r+0x290>
 800630a:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
 800630e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006312:	f101 0c01 	add.w	ip, r1, #1
 8006316:	e43c      	b.n	8005b92 <_vfiprintf_r+0x2ee>
 8006318:	ac1a      	add	r4, sp, #104	; 0x68
 800631a:	220a      	movs	r2, #10
 800631c:	2300      	movs	r3, #0
 800631e:	4606      	mov	r6, r0
 8006320:	460d      	mov	r5, r1
 8006322:	f001 fb1f 	bl	8007964 <__aeabi_uldivmod>
 8006326:	3230      	adds	r2, #48	; 0x30
 8006328:	f804 2d01 	strb.w	r2, [r4, #-1]!
 800632c:	2300      	movs	r3, #0
 800632e:	4630      	mov	r0, r6
 8006330:	4629      	mov	r1, r5
 8006332:	220a      	movs	r2, #10
 8006334:	f001 fb16 	bl	8007964 <__aeabi_uldivmod>
 8006338:	2e0a      	cmp	r6, #10
 800633a:	f175 0300 	sbcs.w	r3, r5, #0
 800633e:	d2ec      	bcs.n	800631a <_vfiprintf_r+0xa76>
 8006340:	ab1a      	add	r3, sp, #104	; 0x68
 8006342:	1b1b      	subs	r3, r3, r4
 8006344:	f8cd a004 	str.w	sl, [sp, #4]
 8006348:	9303      	str	r3, [sp, #12]
 800634a:	f7ff bbc7 	b.w	8005adc <_vfiprintf_r+0x238>
 800634e:	9306      	str	r3, [sp, #24]
 8006350:	783b      	ldrb	r3, [r7, #0]
 8006352:	f7ff bafb 	b.w	800594c <_vfiprintf_r+0xa8>
 8006356:	2330      	movs	r3, #48	; 0x30
 8006358:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800635c:	f10d 0467 	add.w	r4, sp, #103	; 0x67
 8006360:	f7ff bbbc 	b.w	8005adc <_vfiprintf_r+0x238>
 8006364:	f109 0908 	add.w	r9, r9, #8
 8006368:	f10e 0c01 	add.w	ip, lr, #1
 800636c:	4671      	mov	r1, lr
 800636e:	e44a      	b.n	8005c06 <_vfiprintf_r+0x362>
 8006370:	e9dd 0305 	ldrd	r0, r3, [sp, #20]
 8006374:	f853 1b04 	ldr.w	r1, [r3], #4
 8006378:	9306      	str	r3, [sp, #24]
 800637a:	17c2      	asrs	r2, r0, #31
 800637c:	e9c1 0200 	strd	r0, r2, [r1]
 8006380:	f7ff bac3 	b.w	800590a <_vfiprintf_r+0x66>
 8006384:	2002      	movs	r0, #2
 8006386:	ab0c      	add	r3, sp, #48	; 0x30
 8006388:	901b      	str	r0, [sp, #108]	; 0x6c
 800638a:	931a      	str	r3, [sp, #104]	; 0x68
 800638c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006390:	e6d1      	b.n	8006136 <_vfiprintf_r+0x892>
 8006392:	9b02      	ldr	r3, [sp, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f47f acad 	bne.w	8005cf4 <_vfiprintf_r+0x450>
 800639a:	f8cd a004 	str.w	sl, [sp, #4]
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	f7ff bb9b 	b.w	8005ada <_vfiprintf_r+0x236>
 80063a4:	4620      	mov	r0, r4
 80063a6:	9506      	str	r5, [sp, #24]
 80063a8:	f8cd a004 	str.w	sl, [sp, #4]
 80063ac:	f7fa fb88 	bl	8000ac0 <strlen>
 80063b0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80063b4:	9307      	str	r3, [sp, #28]
 80063b6:	2300      	movs	r3, #0
 80063b8:	9003      	str	r0, [sp, #12]
 80063ba:	9302      	str	r3, [sp, #8]
 80063bc:	f7ff bb8e 	b.w	8005adc <_vfiprintf_r+0x238>
 80063c0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80063c4:	b363      	cbz	r3, 8006420 <_vfiprintf_r+0xb7c>
 80063c6:	2301      	movs	r3, #1
 80063c8:	469c      	mov	ip, r3
 80063ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80063cc:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80063d0:	931a      	str	r3, [sp, #104]	; 0x68
 80063d2:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80063d6:	4660      	mov	r0, ip
 80063d8:	f7ff bbec 	b.w	8005bb4 <_vfiprintf_r+0x310>
 80063dc:	9b06      	ldr	r3, [sp, #24]
 80063de:	9905      	ldr	r1, [sp, #20]
 80063e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80063e4:	6011      	str	r1, [r2, #0]
 80063e6:	9306      	str	r3, [sp, #24]
 80063e8:	f7ff ba8f 	b.w	800590a <_vfiprintf_r+0x66>
 80063ec:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80063f0:	9307      	str	r3, [sp, #28]
 80063f2:	e47a      	b.n	8005cea <_vfiprintf_r+0x446>
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80063fa:	f47f ad8e 	bne.w	8005f1a <_vfiprintf_r+0x676>
 80063fe:	e479      	b.n	8005cf4 <_vfiprintf_r+0x450>
 8006400:	9e02      	ldr	r6, [sp, #8]
 8006402:	4c30      	ldr	r4, [pc, #192]	; (80064c4 <_vfiprintf_r+0xc20>)
 8006404:	9506      	str	r5, [sp, #24]
 8006406:	2e06      	cmp	r6, #6
 8006408:	bf28      	it	cs
 800640a:	2606      	movcs	r6, #6
 800640c:	9603      	str	r6, [sp, #12]
 800640e:	f7ff bba8 	b.w	8005b62 <_vfiprintf_r+0x2be>
 8006412:	f04f 0c01 	mov.w	ip, #1
 8006416:	4601      	mov	r1, r0
 8006418:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800641c:	f7ff bbf3 	b.w	8005c06 <_vfiprintf_r+0x362>
 8006420:	9b07      	ldr	r3, [sp, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f47f ae7e 	bne.w	8006124 <_vfiprintf_r+0x880>
 8006428:	4601      	mov	r1, r0
 800642a:	f04f 0c01 	mov.w	ip, #1
 800642e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8006432:	f7ff bbe8 	b.w	8005c06 <_vfiprintf_r+0x362>
 8006436:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800643a:	f7ff bb87 	b.w	8005b4c <_vfiprintf_r+0x2a8>
 800643e:	aa0d      	add	r2, sp, #52	; 0x34
 8006440:	4641      	mov	r1, r8
 8006442:	4658      	mov	r0, fp
 8006444:	f7ff f9e6 	bl	8005814 <__sprint_r.part.0>
 8006448:	f7ff bb74 	b.w	8005b34 <_vfiprintf_r+0x290>
 800644c:	9b02      	ldr	r3, [sp, #8]
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006454:	9506      	str	r5, [sp, #24]
 8006456:	e9cd a001 	strd	sl, r0, [sp, #4]
 800645a:	9307      	str	r3, [sp, #28]
 800645c:	f7ff bb3e 	b.w	8005adc <_vfiprintf_r+0x238>
 8006460:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006462:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006464:	f8df a060 	ldr.w	sl, [pc, #96]	; 80064c8 <_vfiprintf_r+0xc24>
 8006468:	3101      	adds	r1, #1
 800646a:	e69e      	b.n	80061aa <_vfiprintf_r+0x906>
 800646c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006470:	e504      	b.n	8005e7c <_vfiprintf_r+0x5d8>
 8006472:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006476:	e41b      	b.n	8005cb0 <_vfiprintf_r+0x40c>
 8006478:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800647c:	e4da      	b.n	8005e34 <_vfiprintf_r+0x590>
 800647e:	2200      	movs	r2, #0
 8006480:	9202      	str	r2, [sp, #8]
 8006482:	f7ff ba64 	b.w	800594e <_vfiprintf_r+0xaa>
 8006486:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800648a:	e478      	b.n	8005d7e <_vfiprintf_r+0x4da>
 800648c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006490:	e4af      	b.n	8005df2 <_vfiprintf_r+0x54e>
 8006492:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006494:	f8df a030 	ldr.w	sl, [pc, #48]	; 80064c8 <_vfiprintf_r+0xc24>
 8006498:	3101      	adds	r1, #1
 800649a:	e6d4      	b.n	8006246 <_vfiprintf_r+0x9a2>
 800649c:	f8df a02c 	ldr.w	sl, [pc, #44]	; 80064cc <_vfiprintf_r+0xc28>
 80064a0:	46e6      	mov	lr, ip
 80064a2:	e5b0      	b.n	8006006 <_vfiprintf_r+0x762>
 80064a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a8:	9305      	str	r3, [sp, #20]
 80064aa:	f7ff bb48 	b.w	8005b3e <_vfiprintf_r+0x29a>
 80064ae:	9a06      	ldr	r2, [sp, #24]
 80064b0:	787b      	ldrb	r3, [r7, #1]
 80064b2:	4627      	mov	r7, r4
 80064b4:	f852 4b04 	ldr.w	r4, [r2], #4
 80064b8:	9206      	str	r2, [sp, #24]
 80064ba:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80064be:	9402      	str	r4, [sp, #8]
 80064c0:	f7ff ba44 	b.w	800594c <_vfiprintf_r+0xa8>
 80064c4:	0801cb08 	.word	0x0801cb08
 80064c8:	0800d500 	.word	0x0800d500
 80064cc:	0800d510 	.word	0x0800d510

080064d0 <vfiprintf>:
 80064d0:	b410      	push	{r4}
 80064d2:	4c05      	ldr	r4, [pc, #20]	; (80064e8 <vfiprintf+0x18>)
 80064d4:	4684      	mov	ip, r0
 80064d6:	4613      	mov	r3, r2
 80064d8:	6820      	ldr	r0, [r4, #0]
 80064da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064de:	460a      	mov	r2, r1
 80064e0:	4661      	mov	r1, ip
 80064e2:	f7ff b9df 	b.w	80058a4 <_vfiprintf_r>
 80064e6:	bf00      	nop
 80064e8:	20000010 	.word	0x20000010

080064ec <__sbprintf>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	460c      	mov	r4, r1
 80064f0:	8989      	ldrh	r1, [r1, #12]
 80064f2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80064f6:	f021 0102 	bic.w	r1, r1, #2
 80064fa:	f8ad 100c 	strh.w	r1, [sp, #12]
 80064fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006500:	9119      	str	r1, [sp, #100]	; 0x64
 8006502:	89e1      	ldrh	r1, [r4, #14]
 8006504:	f8ad 100e 	strh.w	r1, [sp, #14]
 8006508:	69e1      	ldr	r1, [r4, #28]
 800650a:	9107      	str	r1, [sp, #28]
 800650c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800650e:	9109      	str	r1, [sp, #36]	; 0x24
 8006510:	a91a      	add	r1, sp, #104	; 0x68
 8006512:	9100      	str	r1, [sp, #0]
 8006514:	9104      	str	r1, [sp, #16]
 8006516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800651a:	9102      	str	r1, [sp, #8]
 800651c:	9105      	str	r1, [sp, #20]
 800651e:	2100      	movs	r1, #0
 8006520:	9106      	str	r1, [sp, #24]
 8006522:	4669      	mov	r1, sp
 8006524:	4606      	mov	r6, r0
 8006526:	f7ff f9bd 	bl	80058a4 <_vfiprintf_r>
 800652a:	1e05      	subs	r5, r0, #0
 800652c:	db07      	blt.n	800653e <__sbprintf+0x52>
 800652e:	4669      	mov	r1, sp
 8006530:	4630      	mov	r0, r6
 8006532:	f7fd f85f 	bl	80035f4 <_fflush_r>
 8006536:	2800      	cmp	r0, #0
 8006538:	bf18      	it	ne
 800653a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800653e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006542:	065b      	lsls	r3, r3, #25
 8006544:	d503      	bpl.n	800654e <__sbprintf+0x62>
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	4628      	mov	r0, r5
 8006550:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8006554:	bd70      	pop	{r4, r5, r6, pc}
 8006556:	bf00      	nop

08006558 <__swbuf_r>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	460d      	mov	r5, r1
 800655c:	4614      	mov	r4, r2
 800655e:	4606      	mov	r6, r0
 8006560:	b110      	cbz	r0, 8006568 <__swbuf_r+0x10>
 8006562:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006564:	2b00      	cmp	r3, #0
 8006566:	d043      	beq.n	80065f0 <__swbuf_r+0x98>
 8006568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800656c:	69a3      	ldr	r3, [r4, #24]
 800656e:	60a3      	str	r3, [r4, #8]
 8006570:	0717      	lsls	r7, r2, #28
 8006572:	b290      	uxth	r0, r2
 8006574:	d51b      	bpl.n	80065ae <__swbuf_r+0x56>
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	b1cb      	cbz	r3, 80065ae <__swbuf_r+0x56>
 800657a:	b2ed      	uxtb	r5, r5
 800657c:	0481      	lsls	r1, r0, #18
 800657e:	462f      	mov	r7, r5
 8006580:	d522      	bpl.n	80065c8 <__swbuf_r+0x70>
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	6961      	ldr	r1, [r4, #20]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	4299      	cmp	r1, r3
 800658a:	dd29      	ble.n	80065e0 <__swbuf_r+0x88>
 800658c:	3301      	adds	r3, #1
 800658e:	68a1      	ldr	r1, [r4, #8]
 8006590:	3901      	subs	r1, #1
 8006592:	60a1      	str	r1, [r4, #8]
 8006594:	1c51      	adds	r1, r2, #1
 8006596:	6021      	str	r1, [r4, #0]
 8006598:	7015      	strb	r5, [r2, #0]
 800659a:	6962      	ldr	r2, [r4, #20]
 800659c:	429a      	cmp	r2, r3
 800659e:	d02a      	beq.n	80065f6 <__swbuf_r+0x9e>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	07db      	lsls	r3, r3, #31
 80065a4:	d501      	bpl.n	80065aa <__swbuf_r+0x52>
 80065a6:	2d0a      	cmp	r5, #10
 80065a8:	d025      	beq.n	80065f6 <__swbuf_r+0x9e>
 80065aa:	4638      	mov	r0, r7
 80065ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ae:	4621      	mov	r1, r4
 80065b0:	4630      	mov	r0, r6
 80065b2:	f7fb feb7 	bl	8002324 <__swsetup_r>
 80065b6:	bb20      	cbnz	r0, 8006602 <__swbuf_r+0xaa>
 80065b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065bc:	6923      	ldr	r3, [r4, #16]
 80065be:	b290      	uxth	r0, r2
 80065c0:	b2ed      	uxtb	r5, r5
 80065c2:	0481      	lsls	r1, r0, #18
 80065c4:	462f      	mov	r7, r5
 80065c6:	d4dc      	bmi.n	8006582 <__swbuf_r+0x2a>
 80065c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065cc:	81a2      	strh	r2, [r4, #12]
 80065ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065d0:	6961      	ldr	r1, [r4, #20]
 80065d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065d6:	6662      	str	r2, [r4, #100]	; 0x64
 80065d8:	6822      	ldr	r2, [r4, #0]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	4299      	cmp	r1, r3
 80065de:	dcd5      	bgt.n	800658c <__swbuf_r+0x34>
 80065e0:	4621      	mov	r1, r4
 80065e2:	4630      	mov	r0, r6
 80065e4:	f7fd f806 	bl	80035f4 <_fflush_r>
 80065e8:	b958      	cbnz	r0, 8006602 <__swbuf_r+0xaa>
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	2301      	movs	r3, #1
 80065ee:	e7ce      	b.n	800658e <__swbuf_r+0x36>
 80065f0:	f7fd f92a 	bl	8003848 <__sinit>
 80065f4:	e7b8      	b.n	8006568 <__swbuf_r+0x10>
 80065f6:	4621      	mov	r1, r4
 80065f8:	4630      	mov	r0, r6
 80065fa:	f7fc fffb 	bl	80035f4 <_fflush_r>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d0d3      	beq.n	80065aa <__swbuf_r+0x52>
 8006602:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006606:	e7d0      	b.n	80065aa <__swbuf_r+0x52>

08006608 <__swbuf>:
 8006608:	b410      	push	{r4}
 800660a:	4c04      	ldr	r4, [pc, #16]	; (800661c <__swbuf+0x14>)
 800660c:	4603      	mov	r3, r0
 800660e:	460a      	mov	r2, r1
 8006610:	6820      	ldr	r0, [r4, #0]
 8006612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006616:	4619      	mov	r1, r3
 8006618:	f7ff bf9e 	b.w	8006558 <__swbuf_r>
 800661c:	20000010 	.word	0x20000010

08006620 <__assert_func>:
 8006620:	b500      	push	{lr}
 8006622:	4c0b      	ldr	r4, [pc, #44]	; (8006650 <__assert_func+0x30>)
 8006624:	6825      	ldr	r5, [r4, #0]
 8006626:	4614      	mov	r4, r2
 8006628:	68ee      	ldr	r6, [r5, #12]
 800662a:	461a      	mov	r2, r3
 800662c:	b085      	sub	sp, #20
 800662e:	4603      	mov	r3, r0
 8006630:	460d      	mov	r5, r1
 8006632:	b14c      	cbz	r4, 8006648 <__assert_func+0x28>
 8006634:	4907      	ldr	r1, [pc, #28]	; (8006654 <__assert_func+0x34>)
 8006636:	9500      	str	r5, [sp, #0]
 8006638:	e9cd 1401 	strd	r1, r4, [sp, #4]
 800663c:	4630      	mov	r0, r6
 800663e:	4906      	ldr	r1, [pc, #24]	; (8006658 <__assert_func+0x38>)
 8006640:	f000 f8bc 	bl	80067bc <fiprintf>
 8006644:	f000 fb96 	bl	8006d74 <abort>
 8006648:	4904      	ldr	r1, [pc, #16]	; (800665c <__assert_func+0x3c>)
 800664a:	460c      	mov	r4, r1
 800664c:	e7f3      	b.n	8006636 <__assert_func+0x16>
 800664e:	bf00      	nop
 8006650:	20000010 	.word	0x20000010
 8006654:	0801cba0 	.word	0x0801cba0
 8006658:	0801cbb0 	.word	0x0801cbb0
 800665c:	0801cbac 	.word	0x0801cbac

08006660 <__assert>:
 8006660:	b508      	push	{r3, lr}
 8006662:	4613      	mov	r3, r2
 8006664:	2200      	movs	r2, #0
 8006666:	f7ff ffdb 	bl	8006620 <__assert_func>
 800666a:	bf00      	nop

0800666c <_calloc_r>:
 800666c:	b510      	push	{r4, lr}
 800666e:	fb02 f101 	mul.w	r1, r2, r1
 8006672:	f7fd fcd5 	bl	8004020 <_malloc_r>
 8006676:	4604      	mov	r4, r0
 8006678:	b168      	cbz	r0, 8006696 <_calloc_r+0x2a>
 800667a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800667e:	f022 0203 	bic.w	r2, r2, #3
 8006682:	3a04      	subs	r2, #4
 8006684:	2a24      	cmp	r2, #36	; 0x24
 8006686:	d818      	bhi.n	80066ba <_calloc_r+0x4e>
 8006688:	2a13      	cmp	r2, #19
 800668a:	d806      	bhi.n	800669a <_calloc_r+0x2e>
 800668c:	4602      	mov	r2, r0
 800668e:	2300      	movs	r3, #0
 8006690:	e9c2 3300 	strd	r3, r3, [r2]
 8006694:	6093      	str	r3, [r2, #8]
 8006696:	4620      	mov	r0, r4
 8006698:	bd10      	pop	{r4, pc}
 800669a:	2300      	movs	r3, #0
 800669c:	2a1b      	cmp	r2, #27
 800669e:	e9c0 3300 	strd	r3, r3, [r0]
 80066a2:	d90f      	bls.n	80066c4 <_calloc_r+0x58>
 80066a4:	2a24      	cmp	r2, #36	; 0x24
 80066a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80066aa:	bf11      	iteee	ne
 80066ac:	f100 0210 	addne.w	r2, r0, #16
 80066b0:	6103      	streq	r3, [r0, #16]
 80066b2:	f100 0218 	addeq.w	r2, r0, #24
 80066b6:	6143      	streq	r3, [r0, #20]
 80066b8:	e7e9      	b.n	800668e <_calloc_r+0x22>
 80066ba:	2100      	movs	r1, #0
 80066bc:	f7f9 ffec 	bl	8000698 <memset>
 80066c0:	4620      	mov	r0, r4
 80066c2:	bd10      	pop	{r4, pc}
 80066c4:	f100 0208 	add.w	r2, r0, #8
 80066c8:	e7e1      	b.n	800668e <_calloc_r+0x22>
 80066ca:	bf00      	nop

080066cc <_fclose_r.part.0>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	460c      	mov	r4, r1
 80066d0:	4606      	mov	r6, r0
 80066d2:	f7fc fef7 	bl	80034c4 <__sflush_r>
 80066d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066d8:	4605      	mov	r5, r0
 80066da:	b133      	cbz	r3, 80066ea <_fclose_r.part.0+0x1e>
 80066dc:	69e1      	ldr	r1, [r4, #28]
 80066de:	4630      	mov	r0, r6
 80066e0:	4798      	blx	r3
 80066e2:	2800      	cmp	r0, #0
 80066e4:	bfb8      	it	lt
 80066e6:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	061b      	lsls	r3, r3, #24
 80066ee:	d419      	bmi.n	8006724 <_fclose_r.part.0+0x58>
 80066f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80066f2:	b141      	cbz	r1, 8006706 <_fclose_r.part.0+0x3a>
 80066f4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80066f8:	4299      	cmp	r1, r3
 80066fa:	d002      	beq.n	8006702 <_fclose_r.part.0+0x36>
 80066fc:	4630      	mov	r0, r6
 80066fe:	f7fd f913 	bl	8003928 <_free_r>
 8006702:	2300      	movs	r3, #0
 8006704:	6323      	str	r3, [r4, #48]	; 0x30
 8006706:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006708:	b121      	cbz	r1, 8006714 <_fclose_r.part.0+0x48>
 800670a:	4630      	mov	r0, r6
 800670c:	f7fd f90c 	bl	8003928 <_free_r>
 8006710:	2300      	movs	r3, #0
 8006712:	6463      	str	r3, [r4, #68]	; 0x44
 8006714:	f7fd f89c 	bl	8003850 <__sfp_lock_acquire>
 8006718:	2300      	movs	r3, #0
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	f7fd f89a 	bl	8003854 <__sfp_lock_release>
 8006720:	4628      	mov	r0, r5
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	6921      	ldr	r1, [r4, #16]
 8006726:	4630      	mov	r0, r6
 8006728:	f7fd f8fe 	bl	8003928 <_free_r>
 800672c:	e7e0      	b.n	80066f0 <_fclose_r.part.0+0x24>
 800672e:	bf00      	nop

08006730 <_fclose_r>:
 8006730:	b1b1      	cbz	r1, 8006760 <_fclose_r+0x30>
 8006732:	b538      	push	{r3, r4, r5, lr}
 8006734:	4604      	mov	r4, r0
 8006736:	460d      	mov	r5, r1
 8006738:	b108      	cbz	r0, 800673e <_fclose_r+0xe>
 800673a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800673c:	b14b      	cbz	r3, 8006752 <_fclose_r+0x22>
 800673e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8006742:	b90b      	cbnz	r3, 8006748 <_fclose_r+0x18>
 8006744:	2000      	movs	r0, #0
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	4629      	mov	r1, r5
 800674a:	4620      	mov	r0, r4
 800674c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006750:	e7bc      	b.n	80066cc <_fclose_r.part.0>
 8006752:	f7fd f879 	bl	8003848 <__sinit>
 8006756:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0f2      	beq.n	8006744 <_fclose_r+0x14>
 800675e:	e7f3      	b.n	8006748 <_fclose_r+0x18>
 8006760:	2000      	movs	r0, #0
 8006762:	4770      	bx	lr

08006764 <fclose>:
 8006764:	b1c0      	cbz	r0, 8006798 <fclose+0x34>
 8006766:	b538      	push	{r3, r4, r5, lr}
 8006768:	4b0c      	ldr	r3, [pc, #48]	; (800679c <fclose+0x38>)
 800676a:	681d      	ldr	r5, [r3, #0]
 800676c:	4604      	mov	r4, r0
 800676e:	b10d      	cbz	r5, 8006774 <fclose+0x10>
 8006770:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006772:	b14b      	cbz	r3, 8006788 <fclose+0x24>
 8006774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006778:	b90b      	cbnz	r3, 800677e <fclose+0x1a>
 800677a:	2000      	movs	r0, #0
 800677c:	bd38      	pop	{r3, r4, r5, pc}
 800677e:	4621      	mov	r1, r4
 8006780:	4628      	mov	r0, r5
 8006782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006786:	e7a1      	b.n	80066cc <_fclose_r.part.0>
 8006788:	4628      	mov	r0, r5
 800678a:	f7fd f85d 	bl	8003848 <__sinit>
 800678e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f1      	beq.n	800677a <fclose+0x16>
 8006796:	e7f2      	b.n	800677e <fclose+0x1a>
 8006798:	2000      	movs	r0, #0
 800679a:	4770      	bx	lr
 800679c:	20000010 	.word	0x20000010

080067a0 <_fiprintf_r>:
 80067a0:	b40c      	push	{r2, r3}
 80067a2:	b500      	push	{lr}
 80067a4:	b083      	sub	sp, #12
 80067a6:	ab04      	add	r3, sp, #16
 80067a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	f7ff f879 	bl	80058a4 <_vfiprintf_r>
 80067b2:	b003      	add	sp, #12
 80067b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b8:	b002      	add	sp, #8
 80067ba:	4770      	bx	lr

080067bc <fiprintf>:
 80067bc:	b40e      	push	{r1, r2, r3}
 80067be:	b510      	push	{r4, lr}
 80067c0:	b083      	sub	sp, #12
 80067c2:	ab05      	add	r3, sp, #20
 80067c4:	4c06      	ldr	r4, [pc, #24]	; (80067e0 <fiprintf+0x24>)
 80067c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	4601      	mov	r1, r0
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	f7ff f868 	bl	80058a4 <_vfiprintf_r>
 80067d4:	b003      	add	sp, #12
 80067d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067da:	b003      	add	sp, #12
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	20000010 	.word	0x20000010

080067e4 <__fputwc>:
 80067e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	4682      	mov	sl, r0
 80067ec:	4688      	mov	r8, r1
 80067ee:	4614      	mov	r4, r2
 80067f0:	f000 f8a4 	bl	800693c <__locale_mb_cur_max>
 80067f4:	2801      	cmp	r0, #1
 80067f6:	d103      	bne.n	8006800 <__fputwc+0x1c>
 80067f8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80067fc:	2bfe      	cmp	r3, #254	; 0xfe
 80067fe:	d936      	bls.n	800686e <__fputwc+0x8a>
 8006800:	4642      	mov	r2, r8
 8006802:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006806:	a901      	add	r1, sp, #4
 8006808:	4650      	mov	r0, sl
 800680a:	f000 fa57 	bl	8006cbc <_wcrtomb_r>
 800680e:	1c42      	adds	r2, r0, #1
 8006810:	4606      	mov	r6, r0
 8006812:	d032      	beq.n	800687a <__fputwc+0x96>
 8006814:	b330      	cbz	r0, 8006864 <__fputwc+0x80>
 8006816:	f89d c004 	ldrb.w	ip, [sp, #4]
 800681a:	f10d 0905 	add.w	r9, sp, #5
 800681e:	2500      	movs	r5, #0
 8006820:	e009      	b.n	8006836 <__fputwc+0x52>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	6022      	str	r2, [r4, #0]
 8006828:	f883 c000 	strb.w	ip, [r3]
 800682c:	3501      	adds	r5, #1
 800682e:	42b5      	cmp	r5, r6
 8006830:	d218      	bcs.n	8006864 <__fputwc+0x80>
 8006832:	f819 cb01 	ldrb.w	ip, [r9], #1
 8006836:	68a3      	ldr	r3, [r4, #8]
 8006838:	3b01      	subs	r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	60a3      	str	r3, [r4, #8]
 800683e:	daf0      	bge.n	8006822 <__fputwc+0x3e>
 8006840:	69a7      	ldr	r7, [r4, #24]
 8006842:	42bb      	cmp	r3, r7
 8006844:	4661      	mov	r1, ip
 8006846:	4622      	mov	r2, r4
 8006848:	4650      	mov	r0, sl
 800684a:	db02      	blt.n	8006852 <__fputwc+0x6e>
 800684c:	f1bc 0f0a 	cmp.w	ip, #10
 8006850:	d1e7      	bne.n	8006822 <__fputwc+0x3e>
 8006852:	f7ff fe81 	bl	8006558 <__swbuf_r>
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d1e8      	bne.n	800682c <__fputwc+0x48>
 800685a:	4606      	mov	r6, r0
 800685c:	4630      	mov	r0, r6
 800685e:	b002      	add	sp, #8
 8006860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006864:	4646      	mov	r6, r8
 8006866:	4630      	mov	r0, r6
 8006868:	b002      	add	sp, #8
 800686a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686e:	fa5f fc88 	uxtb.w	ip, r8
 8006872:	f88d c004 	strb.w	ip, [sp, #4]
 8006876:	4606      	mov	r6, r0
 8006878:	e7cf      	b.n	800681a <__fputwc+0x36>
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	4630      	mov	r0, r6
 800687e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006882:	81a3      	strh	r3, [r4, #12]
 8006884:	b002      	add	sp, #8
 8006886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688a:	bf00      	nop

0800688c <_fputwc_r>:
 800688c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8006890:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006894:	d10b      	bne.n	80068ae <_fputwc_r+0x22>
 8006896:	b410      	push	{r4}
 8006898:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800689a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800689e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80068a2:	6654      	str	r4, [r2, #100]	; 0x64
 80068a4:	8193      	strh	r3, [r2, #12]
 80068a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068aa:	f7ff bf9b 	b.w	80067e4 <__fputwc>
 80068ae:	f7ff bf99 	b.w	80067e4 <__fputwc>
 80068b2:	bf00      	nop

080068b4 <fputwc>:
 80068b4:	b530      	push	{r4, r5, lr}
 80068b6:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <fputwc+0x44>)
 80068b8:	681d      	ldr	r5, [r3, #0]
 80068ba:	460c      	mov	r4, r1
 80068bc:	b083      	sub	sp, #12
 80068be:	4601      	mov	r1, r0
 80068c0:	b10d      	cbz	r5, 80068c6 <fputwc+0x12>
 80068c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80068c4:	b18b      	cbz	r3, 80068ea <fputwc+0x36>
 80068c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ca:	049a      	lsls	r2, r3, #18
 80068cc:	d406      	bmi.n	80068dc <fputwc+0x28>
 80068ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	6662      	str	r2, [r4, #100]	; 0x64
 80068dc:	4622      	mov	r2, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	b003      	add	sp, #12
 80068e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068e6:	f7ff bf7d 	b.w	80067e4 <__fputwc>
 80068ea:	9001      	str	r0, [sp, #4]
 80068ec:	4628      	mov	r0, r5
 80068ee:	f7fc ffab 	bl	8003848 <__sinit>
 80068f2:	9901      	ldr	r1, [sp, #4]
 80068f4:	e7e7      	b.n	80068c6 <fputwc+0x12>
 80068f6:	bf00      	nop
 80068f8:	20000010 	.word	0x20000010

080068fc <_setlocale_r>:
 80068fc:	b142      	cbz	r2, 8006910 <_setlocale_r+0x14>
 80068fe:	b510      	push	{r4, lr}
 8006900:	490b      	ldr	r1, [pc, #44]	; (8006930 <_setlocale_r+0x34>)
 8006902:	4610      	mov	r0, r2
 8006904:	4614      	mov	r4, r2
 8006906:	f000 f86f 	bl	80069e8 <strcmp>
 800690a:	b918      	cbnz	r0, 8006914 <_setlocale_r+0x18>
 800690c:	4809      	ldr	r0, [pc, #36]	; (8006934 <_setlocale_r+0x38>)
 800690e:	bd10      	pop	{r4, pc}
 8006910:	4808      	ldr	r0, [pc, #32]	; (8006934 <_setlocale_r+0x38>)
 8006912:	4770      	bx	lr
 8006914:	4907      	ldr	r1, [pc, #28]	; (8006934 <_setlocale_r+0x38>)
 8006916:	4620      	mov	r0, r4
 8006918:	f000 f866 	bl	80069e8 <strcmp>
 800691c:	2800      	cmp	r0, #0
 800691e:	d0f5      	beq.n	800690c <_setlocale_r+0x10>
 8006920:	4905      	ldr	r1, [pc, #20]	; (8006938 <_setlocale_r+0x3c>)
 8006922:	4620      	mov	r0, r4
 8006924:	f000 f860 	bl	80069e8 <strcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	d0ef      	beq.n	800690c <_setlocale_r+0x10>
 800692c:	2000      	movs	r0, #0
 800692e:	bd10      	pop	{r4, pc}
 8006930:	0801cbe4 	.word	0x0801cbe4
 8006934:	0801cbe0 	.word	0x0801cbe0
 8006938:	0801cbac 	.word	0x0801cbac

0800693c <__locale_mb_cur_max>:
 800693c:	4b01      	ldr	r3, [pc, #4]	; (8006944 <__locale_mb_cur_max+0x8>)
 800693e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8006942:	4770      	bx	lr
 8006944:	20000850 	.word	0x20000850

08006948 <setlocale>:
 8006948:	b141      	cbz	r1, 800695c <setlocale+0x14>
 800694a:	b510      	push	{r4, lr}
 800694c:	460c      	mov	r4, r1
 800694e:	4620      	mov	r0, r4
 8006950:	490a      	ldr	r1, [pc, #40]	; (800697c <setlocale+0x34>)
 8006952:	f000 f849 	bl	80069e8 <strcmp>
 8006956:	b918      	cbnz	r0, 8006960 <setlocale+0x18>
 8006958:	4809      	ldr	r0, [pc, #36]	; (8006980 <setlocale+0x38>)
 800695a:	bd10      	pop	{r4, pc}
 800695c:	4808      	ldr	r0, [pc, #32]	; (8006980 <setlocale+0x38>)
 800695e:	4770      	bx	lr
 8006960:	4907      	ldr	r1, [pc, #28]	; (8006980 <setlocale+0x38>)
 8006962:	4620      	mov	r0, r4
 8006964:	f000 f840 	bl	80069e8 <strcmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	d0f5      	beq.n	8006958 <setlocale+0x10>
 800696c:	4905      	ldr	r1, [pc, #20]	; (8006984 <setlocale+0x3c>)
 800696e:	4620      	mov	r0, r4
 8006970:	f000 f83a 	bl	80069e8 <strcmp>
 8006974:	2800      	cmp	r0, #0
 8006976:	d0ef      	beq.n	8006958 <setlocale+0x10>
 8006978:	2000      	movs	r0, #0
 800697a:	bd10      	pop	{r4, pc}
 800697c:	0801cbe4 	.word	0x0801cbe4
 8006980:	0801cbe0 	.word	0x0801cbe0
 8006984:	0801cbac 	.word	0x0801cbac

08006988 <_mbtowc_r>:
 8006988:	b410      	push	{r4}
 800698a:	4c03      	ldr	r4, [pc, #12]	; (8006998 <_mbtowc_r+0x10>)
 800698c:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8006990:	46a4      	mov	ip, r4
 8006992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006996:	4760      	bx	ip
 8006998:	20000850 	.word	0x20000850

0800699c <__ascii_mbtowc>:
 800699c:	b082      	sub	sp, #8
 800699e:	b149      	cbz	r1, 80069b4 <__ascii_mbtowc+0x18>
 80069a0:	b15a      	cbz	r2, 80069ba <__ascii_mbtowc+0x1e>
 80069a2:	b16b      	cbz	r3, 80069c0 <__ascii_mbtowc+0x24>
 80069a4:	7813      	ldrb	r3, [r2, #0]
 80069a6:	600b      	str	r3, [r1, #0]
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	1e10      	subs	r0, r2, #0
 80069ac:	bf18      	it	ne
 80069ae:	2001      	movne	r0, #1
 80069b0:	b002      	add	sp, #8
 80069b2:	4770      	bx	lr
 80069b4:	a901      	add	r1, sp, #4
 80069b6:	2a00      	cmp	r2, #0
 80069b8:	d1f3      	bne.n	80069a2 <__ascii_mbtowc+0x6>
 80069ba:	4610      	mov	r0, r2
 80069bc:	b002      	add	sp, #8
 80069be:	4770      	bx	lr
 80069c0:	f06f 0001 	mvn.w	r0, #1
 80069c4:	e7f4      	b.n	80069b0 <__ascii_mbtowc+0x14>
 80069c6:	bf00      	nop
	...
 80069e0:	eba2 0003 	sub.w	r0, r2, r3
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop

080069e8 <strcmp>:
 80069e8:	7802      	ldrb	r2, [r0, #0]
 80069ea:	780b      	ldrb	r3, [r1, #0]
 80069ec:	2a01      	cmp	r2, #1
 80069ee:	bf28      	it	cs
 80069f0:	429a      	cmpcs	r2, r3
 80069f2:	d1f5      	bne.n	80069e0 <__ascii_mbtowc+0x44>
 80069f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80069f8:	ea40 0401 	orr.w	r4, r0, r1
 80069fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006a00:	f06f 0c00 	mvn.w	ip, #0
 8006a04:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8006a08:	b312      	cbz	r2, 8006a50 <strcmp+0x68>
 8006a0a:	ea80 0401 	eor.w	r4, r0, r1
 8006a0e:	f014 0f07 	tst.w	r4, #7
 8006a12:	d16a      	bne.n	8006aea <strcmp+0x102>
 8006a14:	f000 0407 	and.w	r4, r0, #7
 8006a18:	f020 0007 	bic.w	r0, r0, #7
 8006a1c:	f004 0503 	and.w	r5, r4, #3
 8006a20:	f021 0107 	bic.w	r1, r1, #7
 8006a24:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8006a28:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8006a2c:	f014 0f04 	tst.w	r4, #4
 8006a30:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8006a34:	fa0c f405 	lsl.w	r4, ip, r5
 8006a38:	ea62 0204 	orn	r2, r2, r4
 8006a3c:	ea66 0604 	orn	r6, r6, r4
 8006a40:	d00a      	beq.n	8006a58 <strcmp+0x70>
 8006a42:	ea63 0304 	orn	r3, r3, r4
 8006a46:	4662      	mov	r2, ip
 8006a48:	ea67 0704 	orn	r7, r7, r4
 8006a4c:	4666      	mov	r6, ip
 8006a4e:	e003      	b.n	8006a58 <strcmp+0x70>
 8006a50:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8006a54:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8006a58:	fa82 f54c 	uadd8	r5, r2, ip
 8006a5c:	ea82 0406 	eor.w	r4, r2, r6
 8006a60:	faa4 f48c 	sel	r4, r4, ip
 8006a64:	bb6c      	cbnz	r4, 8006ac2 <strcmp+0xda>
 8006a66:	fa83 f54c 	uadd8	r5, r3, ip
 8006a6a:	ea83 0507 	eor.w	r5, r3, r7
 8006a6e:	faa5 f58c 	sel	r5, r5, ip
 8006a72:	b995      	cbnz	r5, 8006a9a <strcmp+0xb2>
 8006a74:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8006a78:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8006a7c:	fa82 f54c 	uadd8	r5, r2, ip
 8006a80:	ea82 0406 	eor.w	r4, r2, r6
 8006a84:	faa4 f48c 	sel	r4, r4, ip
 8006a88:	fa83 f54c 	uadd8	r5, r3, ip
 8006a8c:	ea83 0507 	eor.w	r5, r3, r7
 8006a90:	faa5 f58c 	sel	r5, r5, ip
 8006a94:	4325      	orrs	r5, r4
 8006a96:	d0db      	beq.n	8006a50 <strcmp+0x68>
 8006a98:	b99c      	cbnz	r4, 8006ac2 <strcmp+0xda>
 8006a9a:	ba2d      	rev	r5, r5
 8006a9c:	fab5 f485 	clz	r4, r5
 8006aa0:	f024 0407 	bic.w	r4, r4, #7
 8006aa4:	fa27 f104 	lsr.w	r1, r7, r4
 8006aa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006aac:	fa23 f304 	lsr.w	r3, r3, r4
 8006ab0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8006ab4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006ab8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006abc:	eba0 0001 	sub.w	r0, r0, r1
 8006ac0:	4770      	bx	lr
 8006ac2:	ba24      	rev	r4, r4
 8006ac4:	fab4 f484 	clz	r4, r4
 8006ac8:	f024 0407 	bic.w	r4, r4, #7
 8006acc:	fa26 f104 	lsr.w	r1, r6, r4
 8006ad0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ad4:	fa22 f204 	lsr.w	r2, r2, r4
 8006ad8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8006adc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006ae0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006ae4:	eba0 0001 	sub.w	r0, r0, r1
 8006ae8:	4770      	bx	lr
 8006aea:	f014 0f03 	tst.w	r4, #3
 8006aee:	d13c      	bne.n	8006b6a <strcmp+0x182>
 8006af0:	f010 0403 	ands.w	r4, r0, #3
 8006af4:	d128      	bne.n	8006b48 <strcmp+0x160>
 8006af6:	f850 2b08 	ldr.w	r2, [r0], #8
 8006afa:	f851 3b08 	ldr.w	r3, [r1], #8
 8006afe:	fa82 f54c 	uadd8	r5, r2, ip
 8006b02:	ea82 0503 	eor.w	r5, r2, r3
 8006b06:	faa5 f58c 	sel	r5, r5, ip
 8006b0a:	b95d      	cbnz	r5, 8006b24 <strcmp+0x13c>
 8006b0c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b14:	fa82 f54c 	uadd8	r5, r2, ip
 8006b18:	ea82 0503 	eor.w	r5, r2, r3
 8006b1c:	faa5 f58c 	sel	r5, r5, ip
 8006b20:	2d00      	cmp	r5, #0
 8006b22:	d0e8      	beq.n	8006af6 <strcmp+0x10e>
 8006b24:	ba2d      	rev	r5, r5
 8006b26:	fab5 f485 	clz	r4, r5
 8006b2a:	f024 0407 	bic.w	r4, r4, #7
 8006b2e:	fa23 f104 	lsr.w	r1, r3, r4
 8006b32:	fa22 f204 	lsr.w	r2, r2, r4
 8006b36:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8006b3a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006b3e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006b42:	eba0 0001 	sub.w	r0, r0, r1
 8006b46:	4770      	bx	lr
 8006b48:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8006b4c:	f020 0003 	bic.w	r0, r0, #3
 8006b50:	f850 2b08 	ldr.w	r2, [r0], #8
 8006b54:	f021 0103 	bic.w	r1, r1, #3
 8006b58:	f851 3b08 	ldr.w	r3, [r1], #8
 8006b5c:	fa0c f404 	lsl.w	r4, ip, r4
 8006b60:	ea62 0204 	orn	r2, r2, r4
 8006b64:	ea63 0304 	orn	r3, r3, r4
 8006b68:	e7c9      	b.n	8006afe <strcmp+0x116>
 8006b6a:	f010 0403 	ands.w	r4, r0, #3
 8006b6e:	d01a      	beq.n	8006ba6 <strcmp+0x1be>
 8006b70:	eba1 0104 	sub.w	r1, r1, r4
 8006b74:	f020 0003 	bic.w	r0, r0, #3
 8006b78:	07e4      	lsls	r4, r4, #31
 8006b7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b7e:	d006      	beq.n	8006b8e <strcmp+0x1a6>
 8006b80:	d20f      	bcs.n	8006ba2 <strcmp+0x1ba>
 8006b82:	788b      	ldrb	r3, [r1, #2]
 8006b84:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8006b88:	1ae4      	subs	r4, r4, r3
 8006b8a:	d106      	bne.n	8006b9a <strcmp+0x1b2>
 8006b8c:	b12b      	cbz	r3, 8006b9a <strcmp+0x1b2>
 8006b8e:	78cb      	ldrb	r3, [r1, #3]
 8006b90:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8006b94:	1ae4      	subs	r4, r4, r3
 8006b96:	d100      	bne.n	8006b9a <strcmp+0x1b2>
 8006b98:	b91b      	cbnz	r3, 8006ba2 <strcmp+0x1ba>
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8006ba0:	4770      	bx	lr
 8006ba2:	f101 0104 	add.w	r1, r1, #4
 8006ba6:	f850 2b04 	ldr.w	r2, [r0], #4
 8006baa:	07cc      	lsls	r4, r1, #31
 8006bac:	f021 0103 	bic.w	r1, r1, #3
 8006bb0:	f851 3b04 	ldr.w	r3, [r1], #4
 8006bb4:	d848      	bhi.n	8006c48 <strcmp+0x260>
 8006bb6:	d224      	bcs.n	8006c02 <strcmp+0x21a>
 8006bb8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8006bbc:	fa82 f54c 	uadd8	r5, r2, ip
 8006bc0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8006bc4:	faa5 f58c 	sel	r5, r5, ip
 8006bc8:	d10a      	bne.n	8006be0 <strcmp+0x1f8>
 8006bca:	b965      	cbnz	r5, 8006be6 <strcmp+0x1fe>
 8006bcc:	f851 3b04 	ldr.w	r3, [r1], #4
 8006bd0:	ea84 0402 	eor.w	r4, r4, r2
 8006bd4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8006bd8:	d10e      	bne.n	8006bf8 <strcmp+0x210>
 8006bda:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bde:	e7eb      	b.n	8006bb8 <strcmp+0x1d0>
 8006be0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8006be4:	e055      	b.n	8006c92 <strcmp+0x2aa>
 8006be6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8006bea:	d14d      	bne.n	8006c88 <strcmp+0x2a0>
 8006bec:	7808      	ldrb	r0, [r1, #0]
 8006bee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006bf2:	f1c0 0000 	rsb	r0, r0, #0
 8006bf6:	4770      	bx	lr
 8006bf8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8006bfc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006c00:	e047      	b.n	8006c92 <strcmp+0x2aa>
 8006c02:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8006c06:	fa82 f54c 	uadd8	r5, r2, ip
 8006c0a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8006c0e:	faa5 f58c 	sel	r5, r5, ip
 8006c12:	d10a      	bne.n	8006c2a <strcmp+0x242>
 8006c14:	b965      	cbnz	r5, 8006c30 <strcmp+0x248>
 8006c16:	f851 3b04 	ldr.w	r3, [r1], #4
 8006c1a:	ea84 0402 	eor.w	r4, r4, r2
 8006c1e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8006c22:	d10c      	bne.n	8006c3e <strcmp+0x256>
 8006c24:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c28:	e7eb      	b.n	8006c02 <strcmp+0x21a>
 8006c2a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8006c2e:	e030      	b.n	8006c92 <strcmp+0x2aa>
 8006c30:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8006c34:	d128      	bne.n	8006c88 <strcmp+0x2a0>
 8006c36:	880b      	ldrh	r3, [r1, #0]
 8006c38:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8006c3c:	e029      	b.n	8006c92 <strcmp+0x2aa>
 8006c3e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8006c42:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8006c46:	e024      	b.n	8006c92 <strcmp+0x2aa>
 8006c48:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8006c4c:	fa82 f54c 	uadd8	r5, r2, ip
 8006c50:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8006c54:	faa5 f58c 	sel	r5, r5, ip
 8006c58:	d10a      	bne.n	8006c70 <strcmp+0x288>
 8006c5a:	b965      	cbnz	r5, 8006c76 <strcmp+0x28e>
 8006c5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006c60:	ea84 0402 	eor.w	r4, r4, r2
 8006c64:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8006c68:	d109      	bne.n	8006c7e <strcmp+0x296>
 8006c6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c6e:	e7eb      	b.n	8006c48 <strcmp+0x260>
 8006c70:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8006c74:	e00d      	b.n	8006c92 <strcmp+0x2aa>
 8006c76:	f015 0fff 	tst.w	r5, #255	; 0xff
 8006c7a:	d105      	bne.n	8006c88 <strcmp+0x2a0>
 8006c7c:	680b      	ldr	r3, [r1, #0]
 8006c7e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8006c82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c86:	e004      	b.n	8006c92 <strcmp+0x2aa>
 8006c88:	f04f 0000 	mov.w	r0, #0
 8006c8c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006c90:	4770      	bx	lr
 8006c92:	ba12      	rev	r2, r2
 8006c94:	ba1b      	rev	r3, r3
 8006c96:	fa82 f44c 	uadd8	r4, r2, ip
 8006c9a:	ea82 0403 	eor.w	r4, r2, r3
 8006c9e:	faa4 f58c 	sel	r5, r4, ip
 8006ca2:	fab5 f485 	clz	r4, r5
 8006ca6:	fa02 f204 	lsl.w	r2, r2, r4
 8006caa:	fa03 f304 	lsl.w	r3, r3, r4
 8006cae:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8006cb2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006cb6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8006cba:	4770      	bx	lr

08006cbc <_wcrtomb_r>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	461c      	mov	r4, r3
 8006cc4:	b139      	cbz	r1, 8006cd6 <_wcrtomb_r+0x1a>
 8006cc6:	4e0b      	ldr	r6, [pc, #44]	; (8006cf4 <_wcrtomb_r+0x38>)
 8006cc8:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
 8006ccc:	47b0      	blx	r6
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	d009      	beq.n	8006ce6 <_wcrtomb_r+0x2a>
 8006cd2:	b004      	add	sp, #16
 8006cd4:	bd70      	pop	{r4, r5, r6, pc}
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	4906      	ldr	r1, [pc, #24]	; (8006cf4 <_wcrtomb_r+0x38>)
 8006cda:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
 8006cde:	a901      	add	r1, sp, #4
 8006ce0:	47b0      	blx	r6
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	d1f5      	bne.n	8006cd2 <_wcrtomb_r+0x16>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	238a      	movs	r3, #138	; 0x8a
 8006cea:	6022      	str	r2, [r4, #0]
 8006cec:	602b      	str	r3, [r5, #0]
 8006cee:	b004      	add	sp, #16
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000850 	.word	0x20000850

08006cf8 <wcrtomb>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <wcrtomb+0x44>)
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	681d      	ldr	r5, [r3, #0]
 8006d00:	4614      	mov	r4, r2
 8006d02:	b158      	cbz	r0, 8006d1c <wcrtomb+0x24>
 8006d04:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <wcrtomb+0x48>)
 8006d06:	460a      	mov	r2, r1
 8006d08:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8006d0c:	4601      	mov	r1, r0
 8006d0e:	4623      	mov	r3, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b0      	blx	r6
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d00b      	beq.n	8006d30 <wcrtomb+0x38>
 8006d18:	b004      	add	sp, #16
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}
 8006d1c:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <wcrtomb+0x48>)
 8006d1e:	4623      	mov	r3, r4
 8006d20:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
 8006d24:	a901      	add	r1, sp, #4
 8006d26:	4602      	mov	r2, r0
 8006d28:	4628      	mov	r0, r5
 8006d2a:	47b0      	blx	r6
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d1f3      	bne.n	8006d18 <wcrtomb+0x20>
 8006d30:	2200      	movs	r2, #0
 8006d32:	238a      	movs	r3, #138	; 0x8a
 8006d34:	6022      	str	r2, [r4, #0]
 8006d36:	602b      	str	r3, [r5, #0]
 8006d38:	b004      	add	sp, #16
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	20000010 	.word	0x20000010
 8006d40:	20000850 	.word	0x20000850

08006d44 <_wctomb_r>:
 8006d44:	b410      	push	{r4}
 8006d46:	4c03      	ldr	r4, [pc, #12]	; (8006d54 <_wctomb_r+0x10>)
 8006d48:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8006d4c:	46a4      	mov	ip, r4
 8006d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d52:	4760      	bx	ip
 8006d54:	20000850 	.word	0x20000850

08006d58 <__ascii_wctomb>:
 8006d58:	b149      	cbz	r1, 8006d6e <__ascii_wctomb+0x16>
 8006d5a:	2aff      	cmp	r2, #255	; 0xff
 8006d5c:	d802      	bhi.n	8006d64 <__ascii_wctomb+0xc>
 8006d5e:	700a      	strb	r2, [r1, #0]
 8006d60:	2001      	movs	r0, #1
 8006d62:	4770      	bx	lr
 8006d64:	238a      	movs	r3, #138	; 0x8a
 8006d66:	6003      	str	r3, [r0, #0]
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d6c:	4770      	bx	lr
 8006d6e:	4608      	mov	r0, r1
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop

08006d74 <abort>:
 8006d74:	b508      	push	{r3, lr}
 8006d76:	2006      	movs	r0, #6
 8006d78:	f000 f8a0 	bl	8006ebc <raise>
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	f000 ff83 	bl	8007c88 <_exit>
 8006d82:	bf00      	nop

08006d84 <_init_signal_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	f8d0 42dc 	ldr.w	r4, [r0, #732]	; 0x2dc
 8006d8a:	b10c      	cbz	r4, 8006d90 <_init_signal_r+0xc>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	2180      	movs	r1, #128	; 0x80
 8006d92:	4605      	mov	r5, r0
 8006d94:	f7fd f944 	bl	8004020 <_malloc_r>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006d9e:	b130      	cbz	r0, 8006dae <_init_signal_r+0x2a>
 8006da0:	1f03      	subs	r3, r0, #4
 8006da2:	327c      	adds	r2, #124	; 0x7c
 8006da4:	f843 4f04 	str.w	r4, [r3, #4]!
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d1fb      	bne.n	8006da4 <_init_signal_r+0x20>
 8006dac:	e7ee      	b.n	8006d8c <_init_signal_r+0x8>
 8006dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006db2:	bd38      	pop	{r3, r4, r5, pc}

08006db4 <_signal_r>:
 8006db4:	291f      	cmp	r1, #31
 8006db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db8:	4605      	mov	r5, r0
 8006dba:	d809      	bhi.n	8006dd0 <_signal_r+0x1c>
 8006dbc:	f8d0 62dc 	ldr.w	r6, [r0, #732]	; 0x2dc
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	4617      	mov	r7, r2
 8006dc4:	b14e      	cbz	r6, 8006dda <_signal_r+0x26>
 8006dc6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006dca:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8006dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd0:	2316      	movs	r3, #22
 8006dd2:	6003      	str	r3, [r0, #0]
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dda:	2180      	movs	r1, #128	; 0x80
 8006ddc:	f7fd f920 	bl	8004020 <_malloc_r>
 8006de0:	4606      	mov	r6, r0
 8006de2:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006de6:	b140      	cbz	r0, 8006dfa <_signal_r+0x46>
 8006de8:	1f03      	subs	r3, r0, #4
 8006dea:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8006dee:	2100      	movs	r1, #0
 8006df0:	f843 1f04 	str.w	r1, [r3, #4]!
 8006df4:	429d      	cmp	r5, r3
 8006df6:	d1fb      	bne.n	8006df0 <_signal_r+0x3c>
 8006df8:	e7e5      	b.n	8006dc6 <_signal_r+0x12>
 8006dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e00 <_raise_r>:
 8006e00:	291f      	cmp	r1, #31
 8006e02:	b538      	push	{r3, r4, r5, lr}
 8006e04:	4605      	mov	r5, r0
 8006e06:	d821      	bhi.n	8006e4c <_raise_r+0x4c>
 8006e08:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	b16a      	cbz	r2, 8006e2c <_raise_r+0x2c>
 8006e10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e14:	b153      	cbz	r3, 8006e2c <_raise_r+0x2c>
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d016      	beq.n	8006e48 <_raise_r+0x48>
 8006e1a:	1c59      	adds	r1, r3, #1
 8006e1c:	d010      	beq.n	8006e40 <_raise_r+0x40>
 8006e1e:	2500      	movs	r5, #0
 8006e20:	4620      	mov	r0, r4
 8006e22:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8006e26:	4798      	blx	r3
 8006e28:	4628      	mov	r0, r5
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f000 f903 	bl	8007038 <_getpid_r>
 8006e32:	4622      	mov	r2, r4
 8006e34:	4601      	mov	r1, r0
 8006e36:	4628      	mov	r0, r5
 8006e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3c:	f000 b8e6 	b.w	800700c <_kill_r>
 8006e40:	2316      	movs	r3, #22
 8006e42:	6003      	str	r3, [r0, #0]
 8006e44:	2001      	movs	r0, #1
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	2000      	movs	r0, #0
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	2316      	movs	r3, #22
 8006e4e:	6003      	str	r3, [r0, #0]
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e54:	bd38      	pop	{r3, r4, r5, pc}
 8006e56:	bf00      	nop

08006e58 <__sigtramp_r>:
 8006e58:	291f      	cmp	r1, #31
 8006e5a:	d82c      	bhi.n	8006eb6 <__sigtramp_r+0x5e>
 8006e5c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	460c      	mov	r4, r1
 8006e64:	4605      	mov	r5, r0
 8006e66:	b182      	cbz	r2, 8006e8a <__sigtramp_r+0x32>
 8006e68:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8006e6c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006e70:	b14b      	cbz	r3, 8006e86 <__sigtramp_r+0x2e>
 8006e72:	1c59      	adds	r1, r3, #1
 8006e74:	d01a      	beq.n	8006eac <__sigtramp_r+0x54>
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d016      	beq.n	8006ea8 <__sigtramp_r+0x50>
 8006e7a:	2500      	movs	r5, #0
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	6015      	str	r5, [r2, #0]
 8006e80:	4798      	blx	r3
 8006e82:	4628      	mov	r0, r5
 8006e84:	bd38      	pop	{r3, r4, r5, pc}
 8006e86:	2001      	movs	r0, #1
 8006e88:	bd38      	pop	{r3, r4, r5, pc}
 8006e8a:	2180      	movs	r1, #128	; 0x80
 8006e8c:	f7fd f8c8 	bl	8004020 <_malloc_r>
 8006e90:	4602      	mov	r2, r0
 8006e92:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006e96:	b158      	cbz	r0, 8006eb0 <__sigtramp_r+0x58>
 8006e98:	1f03      	subs	r3, r0, #4
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	307c      	adds	r0, #124	; 0x7c
 8006e9e:	f843 1f04 	str.w	r1, [r3, #4]!
 8006ea2:	4298      	cmp	r0, r3
 8006ea4:	d1fb      	bne.n	8006e9e <__sigtramp_r+0x46>
 8006ea6:	e7df      	b.n	8006e68 <__sigtramp_r+0x10>
 8006ea8:	2003      	movs	r0, #3
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	2002      	movs	r0, #2
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eb4:	bd38      	pop	{r3, r4, r5, pc}
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eba:	4770      	bx	lr

08006ebc <raise>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4b15      	ldr	r3, [pc, #84]	; (8006f14 <raise+0x58>)
 8006ec0:	281f      	cmp	r0, #31
 8006ec2:	681d      	ldr	r5, [r3, #0]
 8006ec4:	d820      	bhi.n	8006f08 <raise+0x4c>
 8006ec6:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8006eca:	4604      	mov	r4, r0
 8006ecc:	b162      	cbz	r2, 8006ee8 <raise+0x2c>
 8006ece:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8006ed2:	b14b      	cbz	r3, 8006ee8 <raise+0x2c>
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d015      	beq.n	8006f04 <raise+0x48>
 8006ed8:	1c59      	adds	r1, r3, #1
 8006eda:	d00f      	beq.n	8006efc <raise+0x40>
 8006edc:	2500      	movs	r5, #0
 8006ede:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8006ee2:	4798      	blx	r3
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f000 f8a5 	bl	8007038 <_getpid_r>
 8006eee:	4622      	mov	r2, r4
 8006ef0:	4601      	mov	r1, r0
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ef8:	f000 b888 	b.w	800700c <_kill_r>
 8006efc:	2316      	movs	r3, #22
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	2001      	movs	r0, #1
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	2000      	movs	r0, #0
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	2316      	movs	r3, #22
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f10:	bd38      	pop	{r3, r4, r5, pc}
 8006f12:	bf00      	nop
 8006f14:	20000010 	.word	0x20000010

08006f18 <signal>:
 8006f18:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <signal+0x50>)
 8006f1a:	281f      	cmp	r0, #31
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	681e      	ldr	r6, [r3, #0]
 8006f20:	d809      	bhi.n	8006f36 <signal+0x1e>
 8006f22:	460d      	mov	r5, r1
 8006f24:	f8d6 12dc 	ldr.w	r1, [r6, #732]	; 0x2dc
 8006f28:	4604      	mov	r4, r0
 8006f2a:	b149      	cbz	r1, 8006f40 <signal+0x28>
 8006f2c:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8006f30:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8006f34:	bd70      	pop	{r4, r5, r6, pc}
 8006f36:	2316      	movs	r3, #22
 8006f38:	6033      	str	r3, [r6, #0]
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	2180      	movs	r1, #128	; 0x80
 8006f42:	4630      	mov	r0, r6
 8006f44:	f7fd f86c 	bl	8004020 <_malloc_r>
 8006f48:	4601      	mov	r1, r0
 8006f4a:	f8c6 02dc 	str.w	r0, [r6, #732]	; 0x2dc
 8006f4e:	b140      	cbz	r0, 8006f62 <signal+0x4a>
 8006f50:	1f03      	subs	r3, r0, #4
 8006f52:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 8006f56:	2200      	movs	r2, #0
 8006f58:	f843 2f04 	str.w	r2, [r3, #4]!
 8006f5c:	4563      	cmp	r3, ip
 8006f5e:	d1fb      	bne.n	8006f58 <signal+0x40>
 8006f60:	e7e4      	b.n	8006f2c <signal+0x14>
 8006f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	20000010 	.word	0x20000010

08006f6c <_init_signal>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <_init_signal+0x34>)
 8006f70:	681d      	ldr	r5, [r3, #0]
 8006f72:	f8d5 42dc 	ldr.w	r4, [r5, #732]	; 0x2dc
 8006f76:	b10c      	cbz	r4, 8006f7c <_init_signal+0x10>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	2180      	movs	r1, #128	; 0x80
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f7fd f84e 	bl	8004020 <_malloc_r>
 8006f84:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006f88:	b138      	cbz	r0, 8006f9a <_init_signal+0x2e>
 8006f8a:	1f03      	subs	r3, r0, #4
 8006f8c:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8006f90:	f843 4f04 	str.w	r4, [r3, #4]!
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d1fb      	bne.n	8006f90 <_init_signal+0x24>
 8006f98:	e7ee      	b.n	8006f78 <_init_signal+0xc>
 8006f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	20000010 	.word	0x20000010

08006fa4 <__sigtramp>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4b18      	ldr	r3, [pc, #96]	; (8007008 <__sigtramp+0x64>)
 8006fa8:	281f      	cmp	r0, #31
 8006faa:	681d      	ldr	r5, [r3, #0]
 8006fac:	d828      	bhi.n	8007000 <__sigtramp+0x5c>
 8006fae:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	b182      	cbz	r2, 8006fd8 <__sigtramp+0x34>
 8006fb6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8006fba:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006fbe:	b14b      	cbz	r3, 8006fd4 <__sigtramp+0x30>
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	d01b      	beq.n	8006ffc <__sigtramp+0x58>
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d017      	beq.n	8006ff8 <__sigtramp+0x54>
 8006fc8:	2500      	movs	r5, #0
 8006fca:	4620      	mov	r0, r4
 8006fcc:	6015      	str	r5, [r2, #0]
 8006fce:	4798      	blx	r3
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	2180      	movs	r1, #128	; 0x80
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f7fd f820 	bl	8004020 <_malloc_r>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 8006fe6:	b158      	cbz	r0, 8007000 <__sigtramp+0x5c>
 8006fe8:	1f03      	subs	r3, r0, #4
 8006fea:	2100      	movs	r1, #0
 8006fec:	307c      	adds	r0, #124	; 0x7c
 8006fee:	f843 1f04 	str.w	r1, [r3, #4]!
 8006ff2:	4283      	cmp	r3, r0
 8006ff4:	d1fb      	bne.n	8006fee <__sigtramp+0x4a>
 8006ff6:	e7de      	b.n	8006fb6 <__sigtramp+0x12>
 8006ff8:	2003      	movs	r0, #3
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	2002      	movs	r0, #2
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	20000010 	.word	0x20000010

0800700c <_kill_r>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	460c      	mov	r4, r1
 8007010:	4d08      	ldr	r5, [pc, #32]	; (8007034 <_kill_r+0x28>)
 8007012:	4603      	mov	r3, r0
 8007014:	2600      	movs	r6, #0
 8007016:	4620      	mov	r0, r4
 8007018:	4611      	mov	r1, r2
 800701a:	461c      	mov	r4, r3
 800701c:	602e      	str	r6, [r5, #0]
 800701e:	f000 fe2b 	bl	8007c78 <_kill>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	d000      	beq.n	8007028 <_kill_r+0x1c>
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0fb      	beq.n	8007026 <_kill_r+0x1a>
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	bf00      	nop
 8007034:	20000c7c 	.word	0x20000c7c

08007038 <_getpid_r>:
 8007038:	f000 be16 	b.w	8007c68 <_getpid>

0800703c <__aeabi_drsub>:
 800703c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007040:	e002      	b.n	8007048 <__adddf3>
 8007042:	bf00      	nop

08007044 <__aeabi_dsub>:
 8007044:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007048 <__adddf3>:
 8007048:	b530      	push	{r4, r5, lr}
 800704a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800704e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007052:	ea94 0f05 	teq	r4, r5
 8007056:	bf08      	it	eq
 8007058:	ea90 0f02 	teqeq	r0, r2
 800705c:	bf1f      	itttt	ne
 800705e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007062:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007066:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800706a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800706e:	f000 80e2 	beq.w	8007236 <__adddf3+0x1ee>
 8007072:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007076:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800707a:	bfb8      	it	lt
 800707c:	426d      	neglt	r5, r5
 800707e:	dd0c      	ble.n	800709a <__adddf3+0x52>
 8007080:	442c      	add	r4, r5
 8007082:	ea80 0202 	eor.w	r2, r0, r2
 8007086:	ea81 0303 	eor.w	r3, r1, r3
 800708a:	ea82 0000 	eor.w	r0, r2, r0
 800708e:	ea83 0101 	eor.w	r1, r3, r1
 8007092:	ea80 0202 	eor.w	r2, r0, r2
 8007096:	ea81 0303 	eor.w	r3, r1, r3
 800709a:	2d36      	cmp	r5, #54	; 0x36
 800709c:	bf88      	it	hi
 800709e:	bd30      	pophi	{r4, r5, pc}
 80070a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80070a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80070a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80070ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80070b0:	d002      	beq.n	80070b8 <__adddf3+0x70>
 80070b2:	4240      	negs	r0, r0
 80070b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80070b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80070bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80070c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80070c4:	d002      	beq.n	80070cc <__adddf3+0x84>
 80070c6:	4252      	negs	r2, r2
 80070c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80070cc:	ea94 0f05 	teq	r4, r5
 80070d0:	f000 80a7 	beq.w	8007222 <__adddf3+0x1da>
 80070d4:	f1a4 0401 	sub.w	r4, r4, #1
 80070d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80070dc:	db0d      	blt.n	80070fa <__adddf3+0xb2>
 80070de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80070e2:	fa22 f205 	lsr.w	r2, r2, r5
 80070e6:	1880      	adds	r0, r0, r2
 80070e8:	f141 0100 	adc.w	r1, r1, #0
 80070ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80070f0:	1880      	adds	r0, r0, r2
 80070f2:	fa43 f305 	asr.w	r3, r3, r5
 80070f6:	4159      	adcs	r1, r3
 80070f8:	e00e      	b.n	8007118 <__adddf3+0xd0>
 80070fa:	f1a5 0520 	sub.w	r5, r5, #32
 80070fe:	f10e 0e20 	add.w	lr, lr, #32
 8007102:	2a01      	cmp	r2, #1
 8007104:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007108:	bf28      	it	cs
 800710a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800710e:	fa43 f305 	asr.w	r3, r3, r5
 8007112:	18c0      	adds	r0, r0, r3
 8007114:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007118:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800711c:	d507      	bpl.n	800712e <__adddf3+0xe6>
 800711e:	f04f 0e00 	mov.w	lr, #0
 8007122:	f1dc 0c00 	rsbs	ip, ip, #0
 8007126:	eb7e 0000 	sbcs.w	r0, lr, r0
 800712a:	eb6e 0101 	sbc.w	r1, lr, r1
 800712e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007132:	d31b      	bcc.n	800716c <__adddf3+0x124>
 8007134:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007138:	d30c      	bcc.n	8007154 <__adddf3+0x10c>
 800713a:	0849      	lsrs	r1, r1, #1
 800713c:	ea5f 0030 	movs.w	r0, r0, rrx
 8007140:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007144:	f104 0401 	add.w	r4, r4, #1
 8007148:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800714c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007150:	f080 809a 	bcs.w	8007288 <__adddf3+0x240>
 8007154:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007158:	bf08      	it	eq
 800715a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800715e:	f150 0000 	adcs.w	r0, r0, #0
 8007162:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007166:	ea41 0105 	orr.w	r1, r1, r5
 800716a:	bd30      	pop	{r4, r5, pc}
 800716c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007170:	4140      	adcs	r0, r0
 8007172:	eb41 0101 	adc.w	r1, r1, r1
 8007176:	3c01      	subs	r4, #1
 8007178:	bf28      	it	cs
 800717a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800717e:	d2e9      	bcs.n	8007154 <__adddf3+0x10c>
 8007180:	f091 0f00 	teq	r1, #0
 8007184:	bf04      	itt	eq
 8007186:	4601      	moveq	r1, r0
 8007188:	2000      	moveq	r0, #0
 800718a:	fab1 f381 	clz	r3, r1
 800718e:	bf08      	it	eq
 8007190:	3320      	addeq	r3, #32
 8007192:	f1a3 030b 	sub.w	r3, r3, #11
 8007196:	f1b3 0220 	subs.w	r2, r3, #32
 800719a:	da0c      	bge.n	80071b6 <__adddf3+0x16e>
 800719c:	320c      	adds	r2, #12
 800719e:	dd08      	ble.n	80071b2 <__adddf3+0x16a>
 80071a0:	f102 0c14 	add.w	ip, r2, #20
 80071a4:	f1c2 020c 	rsb	r2, r2, #12
 80071a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80071ac:	fa21 f102 	lsr.w	r1, r1, r2
 80071b0:	e00c      	b.n	80071cc <__adddf3+0x184>
 80071b2:	f102 0214 	add.w	r2, r2, #20
 80071b6:	bfd8      	it	le
 80071b8:	f1c2 0c20 	rsble	ip, r2, #32
 80071bc:	fa01 f102 	lsl.w	r1, r1, r2
 80071c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80071c4:	bfdc      	itt	le
 80071c6:	ea41 010c 	orrle.w	r1, r1, ip
 80071ca:	4090      	lslle	r0, r2
 80071cc:	1ae4      	subs	r4, r4, r3
 80071ce:	bfa2      	ittt	ge
 80071d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80071d4:	4329      	orrge	r1, r5
 80071d6:	bd30      	popge	{r4, r5, pc}
 80071d8:	ea6f 0404 	mvn.w	r4, r4
 80071dc:	3c1f      	subs	r4, #31
 80071de:	da1c      	bge.n	800721a <__adddf3+0x1d2>
 80071e0:	340c      	adds	r4, #12
 80071e2:	dc0e      	bgt.n	8007202 <__adddf3+0x1ba>
 80071e4:	f104 0414 	add.w	r4, r4, #20
 80071e8:	f1c4 0220 	rsb	r2, r4, #32
 80071ec:	fa20 f004 	lsr.w	r0, r0, r4
 80071f0:	fa01 f302 	lsl.w	r3, r1, r2
 80071f4:	ea40 0003 	orr.w	r0, r0, r3
 80071f8:	fa21 f304 	lsr.w	r3, r1, r4
 80071fc:	ea45 0103 	orr.w	r1, r5, r3
 8007200:	bd30      	pop	{r4, r5, pc}
 8007202:	f1c4 040c 	rsb	r4, r4, #12
 8007206:	f1c4 0220 	rsb	r2, r4, #32
 800720a:	fa20 f002 	lsr.w	r0, r0, r2
 800720e:	fa01 f304 	lsl.w	r3, r1, r4
 8007212:	ea40 0003 	orr.w	r0, r0, r3
 8007216:	4629      	mov	r1, r5
 8007218:	bd30      	pop	{r4, r5, pc}
 800721a:	fa21 f004 	lsr.w	r0, r1, r4
 800721e:	4629      	mov	r1, r5
 8007220:	bd30      	pop	{r4, r5, pc}
 8007222:	f094 0f00 	teq	r4, #0
 8007226:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800722a:	bf06      	itte	eq
 800722c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007230:	3401      	addeq	r4, #1
 8007232:	3d01      	subne	r5, #1
 8007234:	e74e      	b.n	80070d4 <__adddf3+0x8c>
 8007236:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800723a:	bf18      	it	ne
 800723c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007240:	d029      	beq.n	8007296 <__adddf3+0x24e>
 8007242:	ea94 0f05 	teq	r4, r5
 8007246:	bf08      	it	eq
 8007248:	ea90 0f02 	teqeq	r0, r2
 800724c:	d005      	beq.n	800725a <__adddf3+0x212>
 800724e:	ea54 0c00 	orrs.w	ip, r4, r0
 8007252:	bf04      	itt	eq
 8007254:	4619      	moveq	r1, r3
 8007256:	4610      	moveq	r0, r2
 8007258:	bd30      	pop	{r4, r5, pc}
 800725a:	ea91 0f03 	teq	r1, r3
 800725e:	bf1e      	ittt	ne
 8007260:	2100      	movne	r1, #0
 8007262:	2000      	movne	r0, #0
 8007264:	bd30      	popne	{r4, r5, pc}
 8007266:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800726a:	d105      	bne.n	8007278 <__adddf3+0x230>
 800726c:	0040      	lsls	r0, r0, #1
 800726e:	4149      	adcs	r1, r1
 8007270:	bf28      	it	cs
 8007272:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007276:	bd30      	pop	{r4, r5, pc}
 8007278:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800727c:	bf3c      	itt	cc
 800727e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007282:	bd30      	popcc	{r4, r5, pc}
 8007284:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007288:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800728c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007290:	f04f 0000 	mov.w	r0, #0
 8007294:	bd30      	pop	{r4, r5, pc}
 8007296:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800729a:	bf1a      	itte	ne
 800729c:	4619      	movne	r1, r3
 800729e:	4610      	movne	r0, r2
 80072a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80072a4:	bf1c      	itt	ne
 80072a6:	460b      	movne	r3, r1
 80072a8:	4602      	movne	r2, r0
 80072aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80072ae:	bf06      	itte	eq
 80072b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80072b4:	ea91 0f03 	teqeq	r1, r3
 80072b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80072bc:	bd30      	pop	{r4, r5, pc}
 80072be:	bf00      	nop

080072c0 <__aeabi_ui2d>:
 80072c0:	f090 0f00 	teq	r0, #0
 80072c4:	bf04      	itt	eq
 80072c6:	2100      	moveq	r1, #0
 80072c8:	4770      	bxeq	lr
 80072ca:	b530      	push	{r4, r5, lr}
 80072cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80072d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80072d4:	f04f 0500 	mov.w	r5, #0
 80072d8:	f04f 0100 	mov.w	r1, #0
 80072dc:	e750      	b.n	8007180 <__adddf3+0x138>
 80072de:	bf00      	nop

080072e0 <__aeabi_i2d>:
 80072e0:	f090 0f00 	teq	r0, #0
 80072e4:	bf04      	itt	eq
 80072e6:	2100      	moveq	r1, #0
 80072e8:	4770      	bxeq	lr
 80072ea:	b530      	push	{r4, r5, lr}
 80072ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80072f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80072f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80072f8:	bf48      	it	mi
 80072fa:	4240      	negmi	r0, r0
 80072fc:	f04f 0100 	mov.w	r1, #0
 8007300:	e73e      	b.n	8007180 <__adddf3+0x138>
 8007302:	bf00      	nop

08007304 <__aeabi_f2d>:
 8007304:	0042      	lsls	r2, r0, #1
 8007306:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800730a:	ea4f 0131 	mov.w	r1, r1, rrx
 800730e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007312:	bf1f      	itttt	ne
 8007314:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007318:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800731c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007320:	4770      	bxne	lr
 8007322:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8007326:	bf08      	it	eq
 8007328:	4770      	bxeq	lr
 800732a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800732e:	bf04      	itt	eq
 8007330:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007334:	4770      	bxeq	lr
 8007336:	b530      	push	{r4, r5, lr}
 8007338:	f44f 7460 	mov.w	r4, #896	; 0x380
 800733c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007344:	e71c      	b.n	8007180 <__adddf3+0x138>
 8007346:	bf00      	nop

08007348 <__aeabi_ul2d>:
 8007348:	ea50 0201 	orrs.w	r2, r0, r1
 800734c:	bf08      	it	eq
 800734e:	4770      	bxeq	lr
 8007350:	b530      	push	{r4, r5, lr}
 8007352:	f04f 0500 	mov.w	r5, #0
 8007356:	e00a      	b.n	800736e <__aeabi_l2d+0x16>

08007358 <__aeabi_l2d>:
 8007358:	ea50 0201 	orrs.w	r2, r0, r1
 800735c:	bf08      	it	eq
 800735e:	4770      	bxeq	lr
 8007360:	b530      	push	{r4, r5, lr}
 8007362:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007366:	d502      	bpl.n	800736e <__aeabi_l2d+0x16>
 8007368:	4240      	negs	r0, r0
 800736a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800736e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007372:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007376:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800737a:	f43f aed8 	beq.w	800712e <__adddf3+0xe6>
 800737e:	f04f 0203 	mov.w	r2, #3
 8007382:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007386:	bf18      	it	ne
 8007388:	3203      	addne	r2, #3
 800738a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800738e:	bf18      	it	ne
 8007390:	3203      	addne	r2, #3
 8007392:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007396:	f1c2 0320 	rsb	r3, r2, #32
 800739a:	fa00 fc03 	lsl.w	ip, r0, r3
 800739e:	fa20 f002 	lsr.w	r0, r0, r2
 80073a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80073a6:	ea40 000e 	orr.w	r0, r0, lr
 80073aa:	fa21 f102 	lsr.w	r1, r1, r2
 80073ae:	4414      	add	r4, r2
 80073b0:	e6bd      	b.n	800712e <__adddf3+0xe6>
 80073b2:	bf00      	nop

080073b4 <__aeabi_dmul>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80073ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80073be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80073c2:	bf1d      	ittte	ne
 80073c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80073c8:	ea94 0f0c 	teqne	r4, ip
 80073cc:	ea95 0f0c 	teqne	r5, ip
 80073d0:	f000 f8de 	bleq	8007590 <__aeabi_dmul+0x1dc>
 80073d4:	442c      	add	r4, r5
 80073d6:	ea81 0603 	eor.w	r6, r1, r3
 80073da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80073de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80073e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80073e6:	bf18      	it	ne
 80073e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80073ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80073f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073f4:	d038      	beq.n	8007468 <__aeabi_dmul+0xb4>
 80073f6:	fba0 ce02 	umull	ip, lr, r0, r2
 80073fa:	f04f 0500 	mov.w	r5, #0
 80073fe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007402:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007406:	fbe0 e503 	umlal	lr, r5, r0, r3
 800740a:	f04f 0600 	mov.w	r6, #0
 800740e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007412:	f09c 0f00 	teq	ip, #0
 8007416:	bf18      	it	ne
 8007418:	f04e 0e01 	orrne.w	lr, lr, #1
 800741c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007420:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007424:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007428:	d204      	bcs.n	8007434 <__aeabi_dmul+0x80>
 800742a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800742e:	416d      	adcs	r5, r5
 8007430:	eb46 0606 	adc.w	r6, r6, r6
 8007434:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007438:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800743c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007440:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007444:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007448:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800744c:	bf88      	it	hi
 800744e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007452:	d81e      	bhi.n	8007492 <__aeabi_dmul+0xde>
 8007454:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007458:	bf08      	it	eq
 800745a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800745e:	f150 0000 	adcs.w	r0, r0, #0
 8007462:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800746c:	ea46 0101 	orr.w	r1, r6, r1
 8007470:	ea40 0002 	orr.w	r0, r0, r2
 8007474:	ea81 0103 	eor.w	r1, r1, r3
 8007478:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800747c:	bfc2      	ittt	gt
 800747e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007482:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007486:	bd70      	popgt	{r4, r5, r6, pc}
 8007488:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800748c:	f04f 0e00 	mov.w	lr, #0
 8007490:	3c01      	subs	r4, #1
 8007492:	f300 80ab 	bgt.w	80075ec <__aeabi_dmul+0x238>
 8007496:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800749a:	bfde      	ittt	le
 800749c:	2000      	movle	r0, #0
 800749e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80074a2:	bd70      	pople	{r4, r5, r6, pc}
 80074a4:	f1c4 0400 	rsb	r4, r4, #0
 80074a8:	3c20      	subs	r4, #32
 80074aa:	da35      	bge.n	8007518 <__aeabi_dmul+0x164>
 80074ac:	340c      	adds	r4, #12
 80074ae:	dc1b      	bgt.n	80074e8 <__aeabi_dmul+0x134>
 80074b0:	f104 0414 	add.w	r4, r4, #20
 80074b4:	f1c4 0520 	rsb	r5, r4, #32
 80074b8:	fa00 f305 	lsl.w	r3, r0, r5
 80074bc:	fa20 f004 	lsr.w	r0, r0, r4
 80074c0:	fa01 f205 	lsl.w	r2, r1, r5
 80074c4:	ea40 0002 	orr.w	r0, r0, r2
 80074c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80074cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80074d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80074d4:	fa21 f604 	lsr.w	r6, r1, r4
 80074d8:	eb42 0106 	adc.w	r1, r2, r6
 80074dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80074e0:	bf08      	it	eq
 80074e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
 80074e8:	f1c4 040c 	rsb	r4, r4, #12
 80074ec:	f1c4 0520 	rsb	r5, r4, #32
 80074f0:	fa00 f304 	lsl.w	r3, r0, r4
 80074f4:	fa20 f005 	lsr.w	r0, r0, r5
 80074f8:	fa01 f204 	lsl.w	r2, r1, r4
 80074fc:	ea40 0002 	orr.w	r0, r0, r2
 8007500:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007504:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007508:	f141 0100 	adc.w	r1, r1, #0
 800750c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007510:	bf08      	it	eq
 8007512:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	f1c4 0520 	rsb	r5, r4, #32
 800751c:	fa00 f205 	lsl.w	r2, r0, r5
 8007520:	ea4e 0e02 	orr.w	lr, lr, r2
 8007524:	fa20 f304 	lsr.w	r3, r0, r4
 8007528:	fa01 f205 	lsl.w	r2, r1, r5
 800752c:	ea43 0302 	orr.w	r3, r3, r2
 8007530:	fa21 f004 	lsr.w	r0, r1, r4
 8007534:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007538:	fa21 f204 	lsr.w	r2, r1, r4
 800753c:	ea20 0002 	bic.w	r0, r0, r2
 8007540:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007544:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007548:	bf08      	it	eq
 800754a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	f094 0f00 	teq	r4, #0
 8007554:	d10f      	bne.n	8007576 <__aeabi_dmul+0x1c2>
 8007556:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800755a:	0040      	lsls	r0, r0, #1
 800755c:	eb41 0101 	adc.w	r1, r1, r1
 8007560:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007564:	bf08      	it	eq
 8007566:	3c01      	subeq	r4, #1
 8007568:	d0f7      	beq.n	800755a <__aeabi_dmul+0x1a6>
 800756a:	ea41 0106 	orr.w	r1, r1, r6
 800756e:	f095 0f00 	teq	r5, #0
 8007572:	bf18      	it	ne
 8007574:	4770      	bxne	lr
 8007576:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800757a:	0052      	lsls	r2, r2, #1
 800757c:	eb43 0303 	adc.w	r3, r3, r3
 8007580:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007584:	bf08      	it	eq
 8007586:	3d01      	subeq	r5, #1
 8007588:	d0f7      	beq.n	800757a <__aeabi_dmul+0x1c6>
 800758a:	ea43 0306 	orr.w	r3, r3, r6
 800758e:	4770      	bx	lr
 8007590:	ea94 0f0c 	teq	r4, ip
 8007594:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007598:	bf18      	it	ne
 800759a:	ea95 0f0c 	teqne	r5, ip
 800759e:	d00c      	beq.n	80075ba <__aeabi_dmul+0x206>
 80075a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80075a4:	bf18      	it	ne
 80075a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80075aa:	d1d1      	bne.n	8007550 <__aeabi_dmul+0x19c>
 80075ac:	ea81 0103 	eor.w	r1, r1, r3
 80075b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80075b4:	f04f 0000 	mov.w	r0, #0
 80075b8:	bd70      	pop	{r4, r5, r6, pc}
 80075ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80075be:	bf06      	itte	eq
 80075c0:	4610      	moveq	r0, r2
 80075c2:	4619      	moveq	r1, r3
 80075c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80075c8:	d019      	beq.n	80075fe <__aeabi_dmul+0x24a>
 80075ca:	ea94 0f0c 	teq	r4, ip
 80075ce:	d102      	bne.n	80075d6 <__aeabi_dmul+0x222>
 80075d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80075d4:	d113      	bne.n	80075fe <__aeabi_dmul+0x24a>
 80075d6:	ea95 0f0c 	teq	r5, ip
 80075da:	d105      	bne.n	80075e8 <__aeabi_dmul+0x234>
 80075dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80075e0:	bf1c      	itt	ne
 80075e2:	4610      	movne	r0, r2
 80075e4:	4619      	movne	r1, r3
 80075e6:	d10a      	bne.n	80075fe <__aeabi_dmul+0x24a>
 80075e8:	ea81 0103 	eor.w	r1, r1, r3
 80075ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80075f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80075f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075f8:	f04f 0000 	mov.w	r0, #0
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007602:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8007606:	bd70      	pop	{r4, r5, r6, pc}

08007608 <__aeabi_ddiv>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800760e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007616:	bf1d      	ittte	ne
 8007618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800761c:	ea94 0f0c 	teqne	r4, ip
 8007620:	ea95 0f0c 	teqne	r5, ip
 8007624:	f000 f8a7 	bleq	8007776 <__aeabi_ddiv+0x16e>
 8007628:	eba4 0405 	sub.w	r4, r4, r5
 800762c:	ea81 0e03 	eor.w	lr, r1, r3
 8007630:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007634:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007638:	f000 8088 	beq.w	800774c <__aeabi_ddiv+0x144>
 800763c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007640:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007644:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007648:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800764c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007650:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007654:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007658:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800765c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007660:	429d      	cmp	r5, r3
 8007662:	bf08      	it	eq
 8007664:	4296      	cmpeq	r6, r2
 8007666:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800766a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800766e:	d202      	bcs.n	8007676 <__aeabi_ddiv+0x6e>
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	ea4f 0232 	mov.w	r2, r2, rrx
 8007676:	1ab6      	subs	r6, r6, r2
 8007678:	eb65 0503 	sbc.w	r5, r5, r3
 800767c:	085b      	lsrs	r3, r3, #1
 800767e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007682:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007686:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800768a:	ebb6 0e02 	subs.w	lr, r6, r2
 800768e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007692:	bf22      	ittt	cs
 8007694:	1ab6      	subcs	r6, r6, r2
 8007696:	4675      	movcs	r5, lr
 8007698:	ea40 000c 	orrcs.w	r0, r0, ip
 800769c:	085b      	lsrs	r3, r3, #1
 800769e:	ea4f 0232 	mov.w	r2, r2, rrx
 80076a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80076a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80076aa:	bf22      	ittt	cs
 80076ac:	1ab6      	subcs	r6, r6, r2
 80076ae:	4675      	movcs	r5, lr
 80076b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80076ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80076be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80076c2:	bf22      	ittt	cs
 80076c4:	1ab6      	subcs	r6, r6, r2
 80076c6:	4675      	movcs	r5, lr
 80076c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80076d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80076d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80076da:	bf22      	ittt	cs
 80076dc:	1ab6      	subcs	r6, r6, r2
 80076de:	4675      	movcs	r5, lr
 80076e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80076e4:	ea55 0e06 	orrs.w	lr, r5, r6
 80076e8:	d018      	beq.n	800771c <__aeabi_ddiv+0x114>
 80076ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80076ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80076f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80076f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80076fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80076fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007702:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007706:	d1c0      	bne.n	800768a <__aeabi_ddiv+0x82>
 8007708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800770c:	d10b      	bne.n	8007726 <__aeabi_ddiv+0x11e>
 800770e:	ea41 0100 	orr.w	r1, r1, r0
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800771a:	e7b6      	b.n	800768a <__aeabi_ddiv+0x82>
 800771c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007720:	bf04      	itt	eq
 8007722:	4301      	orreq	r1, r0
 8007724:	2000      	moveq	r0, #0
 8007726:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800772a:	bf88      	it	hi
 800772c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007730:	f63f aeaf 	bhi.w	8007492 <__aeabi_dmul+0xde>
 8007734:	ebb5 0c03 	subs.w	ip, r5, r3
 8007738:	bf04      	itt	eq
 800773a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800773e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007742:	f150 0000 	adcs.w	r0, r0, #0
 8007746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800774a:	bd70      	pop	{r4, r5, r6, pc}
 800774c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007750:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007754:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007758:	bfc2      	ittt	gt
 800775a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800775e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007762:	bd70      	popgt	{r4, r5, r6, pc}
 8007764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007768:	f04f 0e00 	mov.w	lr, #0
 800776c:	3c01      	subs	r4, #1
 800776e:	e690      	b.n	8007492 <__aeabi_dmul+0xde>
 8007770:	ea45 0e06 	orr.w	lr, r5, r6
 8007774:	e68d      	b.n	8007492 <__aeabi_dmul+0xde>
 8007776:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800777a:	ea94 0f0c 	teq	r4, ip
 800777e:	bf08      	it	eq
 8007780:	ea95 0f0c 	teqeq	r5, ip
 8007784:	f43f af3b 	beq.w	80075fe <__aeabi_dmul+0x24a>
 8007788:	ea94 0f0c 	teq	r4, ip
 800778c:	d10a      	bne.n	80077a4 <__aeabi_ddiv+0x19c>
 800778e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007792:	f47f af34 	bne.w	80075fe <__aeabi_dmul+0x24a>
 8007796:	ea95 0f0c 	teq	r5, ip
 800779a:	f47f af25 	bne.w	80075e8 <__aeabi_dmul+0x234>
 800779e:	4610      	mov	r0, r2
 80077a0:	4619      	mov	r1, r3
 80077a2:	e72c      	b.n	80075fe <__aeabi_dmul+0x24a>
 80077a4:	ea95 0f0c 	teq	r5, ip
 80077a8:	d106      	bne.n	80077b8 <__aeabi_ddiv+0x1b0>
 80077aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80077ae:	f43f aefd 	beq.w	80075ac <__aeabi_dmul+0x1f8>
 80077b2:	4610      	mov	r0, r2
 80077b4:	4619      	mov	r1, r3
 80077b6:	e722      	b.n	80075fe <__aeabi_dmul+0x24a>
 80077b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80077bc:	bf18      	it	ne
 80077be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80077c2:	f47f aec5 	bne.w	8007550 <__aeabi_dmul+0x19c>
 80077c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80077ca:	f47f af0d 	bne.w	80075e8 <__aeabi_dmul+0x234>
 80077ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80077d2:	f47f aeeb 	bne.w	80075ac <__aeabi_dmul+0x1f8>
 80077d6:	e712      	b.n	80075fe <__aeabi_dmul+0x24a>

080077d8 <__gedf2>:
 80077d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80077dc:	e006      	b.n	80077ec <__cmpdf2+0x4>
 80077de:	bf00      	nop

080077e0 <__ledf2>:
 80077e0:	f04f 0c01 	mov.w	ip, #1
 80077e4:	e002      	b.n	80077ec <__cmpdf2+0x4>
 80077e6:	bf00      	nop

080077e8 <__cmpdf2>:
 80077e8:	f04f 0c01 	mov.w	ip, #1
 80077ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80077f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80077f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80077f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80077fc:	bf18      	it	ne
 80077fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007802:	d01b      	beq.n	800783c <__cmpdf2+0x54>
 8007804:	b001      	add	sp, #4
 8007806:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800780a:	bf0c      	ite	eq
 800780c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007810:	ea91 0f03 	teqne	r1, r3
 8007814:	bf02      	ittt	eq
 8007816:	ea90 0f02 	teqeq	r0, r2
 800781a:	2000      	moveq	r0, #0
 800781c:	4770      	bxeq	lr
 800781e:	f110 0f00 	cmn.w	r0, #0
 8007822:	ea91 0f03 	teq	r1, r3
 8007826:	bf58      	it	pl
 8007828:	4299      	cmppl	r1, r3
 800782a:	bf08      	it	eq
 800782c:	4290      	cmpeq	r0, r2
 800782e:	bf2c      	ite	cs
 8007830:	17d8      	asrcs	r0, r3, #31
 8007832:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007836:	f040 0001 	orr.w	r0, r0, #1
 800783a:	4770      	bx	lr
 800783c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007840:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007844:	d102      	bne.n	800784c <__cmpdf2+0x64>
 8007846:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800784a:	d107      	bne.n	800785c <__cmpdf2+0x74>
 800784c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007850:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007854:	d1d6      	bne.n	8007804 <__cmpdf2+0x1c>
 8007856:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800785a:	d0d3      	beq.n	8007804 <__cmpdf2+0x1c>
 800785c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop

08007864 <__aeabi_cdrcmple>:
 8007864:	4684      	mov	ip, r0
 8007866:	4610      	mov	r0, r2
 8007868:	4662      	mov	r2, ip
 800786a:	468c      	mov	ip, r1
 800786c:	4619      	mov	r1, r3
 800786e:	4663      	mov	r3, ip
 8007870:	e000      	b.n	8007874 <__aeabi_cdcmpeq>
 8007872:	bf00      	nop

08007874 <__aeabi_cdcmpeq>:
 8007874:	b501      	push	{r0, lr}
 8007876:	f7ff ffb7 	bl	80077e8 <__cmpdf2>
 800787a:	2800      	cmp	r0, #0
 800787c:	bf48      	it	mi
 800787e:	f110 0f00 	cmnmi.w	r0, #0
 8007882:	bd01      	pop	{r0, pc}

08007884 <__aeabi_dcmpeq>:
 8007884:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007888:	f7ff fff4 	bl	8007874 <__aeabi_cdcmpeq>
 800788c:	bf0c      	ite	eq
 800788e:	2001      	moveq	r0, #1
 8007890:	2000      	movne	r0, #0
 8007892:	f85d fb08 	ldr.w	pc, [sp], #8
 8007896:	bf00      	nop

08007898 <__aeabi_dcmplt>:
 8007898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800789c:	f7ff ffea 	bl	8007874 <__aeabi_cdcmpeq>
 80078a0:	bf34      	ite	cc
 80078a2:	2001      	movcc	r0, #1
 80078a4:	2000      	movcs	r0, #0
 80078a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80078aa:	bf00      	nop

080078ac <__aeabi_dcmple>:
 80078ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80078b0:	f7ff ffe0 	bl	8007874 <__aeabi_cdcmpeq>
 80078b4:	bf94      	ite	ls
 80078b6:	2001      	movls	r0, #1
 80078b8:	2000      	movhi	r0, #0
 80078ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80078be:	bf00      	nop

080078c0 <__aeabi_dcmpge>:
 80078c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80078c4:	f7ff ffce 	bl	8007864 <__aeabi_cdrcmple>
 80078c8:	bf94      	ite	ls
 80078ca:	2001      	movls	r0, #1
 80078cc:	2000      	movhi	r0, #0
 80078ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80078d2:	bf00      	nop

080078d4 <__aeabi_dcmpgt>:
 80078d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80078d8:	f7ff ffc4 	bl	8007864 <__aeabi_cdrcmple>
 80078dc:	bf34      	ite	cc
 80078de:	2001      	movcc	r0, #1
 80078e0:	2000      	movcs	r0, #0
 80078e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80078e6:	bf00      	nop

080078e8 <__aeabi_dcmpun>:
 80078e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80078ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80078f0:	d102      	bne.n	80078f8 <__aeabi_dcmpun+0x10>
 80078f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80078f6:	d10a      	bne.n	800790e <__aeabi_dcmpun+0x26>
 80078f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80078fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007900:	d102      	bne.n	8007908 <__aeabi_dcmpun+0x20>
 8007902:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007906:	d102      	bne.n	800790e <__aeabi_dcmpun+0x26>
 8007908:	f04f 0000 	mov.w	r0, #0
 800790c:	4770      	bx	lr
 800790e:	f04f 0001 	mov.w	r0, #1
 8007912:	4770      	bx	lr

08007914 <__aeabi_d2iz>:
 8007914:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007918:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800791c:	d215      	bcs.n	800794a <__aeabi_d2iz+0x36>
 800791e:	d511      	bpl.n	8007944 <__aeabi_d2iz+0x30>
 8007920:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007924:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007928:	d912      	bls.n	8007950 <__aeabi_d2iz+0x3c>
 800792a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800792e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007932:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007936:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800793a:	fa23 f002 	lsr.w	r0, r3, r2
 800793e:	bf18      	it	ne
 8007940:	4240      	negne	r0, r0
 8007942:	4770      	bx	lr
 8007944:	f04f 0000 	mov.w	r0, #0
 8007948:	4770      	bx	lr
 800794a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800794e:	d105      	bne.n	800795c <__aeabi_d2iz+0x48>
 8007950:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007954:	bf08      	it	eq
 8007956:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800795a:	4770      	bx	lr
 800795c:	f04f 0000 	mov.w	r0, #0
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop

08007964 <__aeabi_uldivmod>:
 8007964:	b953      	cbnz	r3, 800797c <__aeabi_uldivmod+0x18>
 8007966:	b94a      	cbnz	r2, 800797c <__aeabi_uldivmod+0x18>
 8007968:	2900      	cmp	r1, #0
 800796a:	bf08      	it	eq
 800796c:	2800      	cmpeq	r0, #0
 800796e:	bf1c      	itt	ne
 8007970:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007974:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007978:	f000 b974 	b.w	8007c64 <__aeabi_idiv0>
 800797c:	f1ad 0c08 	sub.w	ip, sp, #8
 8007980:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007984:	f000 f806 	bl	8007994 <__udivmoddi4>
 8007988:	f8dd e004 	ldr.w	lr, [sp, #4]
 800798c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007990:	b004      	add	sp, #16
 8007992:	4770      	bx	lr

08007994 <__udivmoddi4>:
 8007994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	9d08      	ldr	r5, [sp, #32]
 800799a:	4604      	mov	r4, r0
 800799c:	468e      	mov	lr, r1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d14d      	bne.n	8007a3e <__udivmoddi4+0xaa>
 80079a2:	428a      	cmp	r2, r1
 80079a4:	4694      	mov	ip, r2
 80079a6:	d969      	bls.n	8007a7c <__udivmoddi4+0xe8>
 80079a8:	fab2 f282 	clz	r2, r2
 80079ac:	b152      	cbz	r2, 80079c4 <__udivmoddi4+0x30>
 80079ae:	fa01 f302 	lsl.w	r3, r1, r2
 80079b2:	f1c2 0120 	rsb	r1, r2, #32
 80079b6:	fa20 f101 	lsr.w	r1, r0, r1
 80079ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80079be:	ea41 0e03 	orr.w	lr, r1, r3
 80079c2:	4094      	lsls	r4, r2
 80079c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80079c8:	0c21      	lsrs	r1, r4, #16
 80079ca:	fbbe f6f8 	udiv	r6, lr, r8
 80079ce:	fa1f f78c 	uxth.w	r7, ip
 80079d2:	fb08 e316 	mls	r3, r8, r6, lr
 80079d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80079da:	fb06 f107 	mul.w	r1, r6, r7
 80079de:	4299      	cmp	r1, r3
 80079e0:	d90a      	bls.n	80079f8 <__udivmoddi4+0x64>
 80079e2:	eb1c 0303 	adds.w	r3, ip, r3
 80079e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80079ea:	f080 811f 	bcs.w	8007c2c <__udivmoddi4+0x298>
 80079ee:	4299      	cmp	r1, r3
 80079f0:	f240 811c 	bls.w	8007c2c <__udivmoddi4+0x298>
 80079f4:	3e02      	subs	r6, #2
 80079f6:	4463      	add	r3, ip
 80079f8:	1a5b      	subs	r3, r3, r1
 80079fa:	b2a4      	uxth	r4, r4
 80079fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8007a00:	fb08 3310 	mls	r3, r8, r0, r3
 8007a04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007a08:	fb00 f707 	mul.w	r7, r0, r7
 8007a0c:	42a7      	cmp	r7, r4
 8007a0e:	d90a      	bls.n	8007a26 <__udivmoddi4+0x92>
 8007a10:	eb1c 0404 	adds.w	r4, ip, r4
 8007a14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007a18:	f080 810a 	bcs.w	8007c30 <__udivmoddi4+0x29c>
 8007a1c:	42a7      	cmp	r7, r4
 8007a1e:	f240 8107 	bls.w	8007c30 <__udivmoddi4+0x29c>
 8007a22:	4464      	add	r4, ip
 8007a24:	3802      	subs	r0, #2
 8007a26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007a2a:	1be4      	subs	r4, r4, r7
 8007a2c:	2600      	movs	r6, #0
 8007a2e:	b11d      	cbz	r5, 8007a38 <__udivmoddi4+0xa4>
 8007a30:	40d4      	lsrs	r4, r2
 8007a32:	2300      	movs	r3, #0
 8007a34:	e9c5 4300 	strd	r4, r3, [r5]
 8007a38:	4631      	mov	r1, r6
 8007a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3e:	428b      	cmp	r3, r1
 8007a40:	d909      	bls.n	8007a56 <__udivmoddi4+0xc2>
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	f000 80ef 	beq.w	8007c26 <__udivmoddi4+0x292>
 8007a48:	2600      	movs	r6, #0
 8007a4a:	e9c5 0100 	strd	r0, r1, [r5]
 8007a4e:	4630      	mov	r0, r6
 8007a50:	4631      	mov	r1, r6
 8007a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a56:	fab3 f683 	clz	r6, r3
 8007a5a:	2e00      	cmp	r6, #0
 8007a5c:	d14a      	bne.n	8007af4 <__udivmoddi4+0x160>
 8007a5e:	428b      	cmp	r3, r1
 8007a60:	d302      	bcc.n	8007a68 <__udivmoddi4+0xd4>
 8007a62:	4282      	cmp	r2, r0
 8007a64:	f200 80f9 	bhi.w	8007c5a <__udivmoddi4+0x2c6>
 8007a68:	1a84      	subs	r4, r0, r2
 8007a6a:	eb61 0303 	sbc.w	r3, r1, r3
 8007a6e:	2001      	movs	r0, #1
 8007a70:	469e      	mov	lr, r3
 8007a72:	2d00      	cmp	r5, #0
 8007a74:	d0e0      	beq.n	8007a38 <__udivmoddi4+0xa4>
 8007a76:	e9c5 4e00 	strd	r4, lr, [r5]
 8007a7a:	e7dd      	b.n	8007a38 <__udivmoddi4+0xa4>
 8007a7c:	b902      	cbnz	r2, 8007a80 <__udivmoddi4+0xec>
 8007a7e:	deff      	udf	#255	; 0xff
 8007a80:	fab2 f282 	clz	r2, r2
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	f040 8092 	bne.w	8007bae <__udivmoddi4+0x21a>
 8007a8a:	eba1 010c 	sub.w	r1, r1, ip
 8007a8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007a92:	fa1f fe8c 	uxth.w	lr, ip
 8007a96:	2601      	movs	r6, #1
 8007a98:	0c20      	lsrs	r0, r4, #16
 8007a9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8007a9e:	fb07 1113 	mls	r1, r7, r3, r1
 8007aa2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007aa6:	fb0e f003 	mul.w	r0, lr, r3
 8007aaa:	4288      	cmp	r0, r1
 8007aac:	d908      	bls.n	8007ac0 <__udivmoddi4+0x12c>
 8007aae:	eb1c 0101 	adds.w	r1, ip, r1
 8007ab2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007ab6:	d202      	bcs.n	8007abe <__udivmoddi4+0x12a>
 8007ab8:	4288      	cmp	r0, r1
 8007aba:	f200 80cb 	bhi.w	8007c54 <__udivmoddi4+0x2c0>
 8007abe:	4643      	mov	r3, r8
 8007ac0:	1a09      	subs	r1, r1, r0
 8007ac2:	b2a4      	uxth	r4, r4
 8007ac4:	fbb1 f0f7 	udiv	r0, r1, r7
 8007ac8:	fb07 1110 	mls	r1, r7, r0, r1
 8007acc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8007ad0:	fb0e fe00 	mul.w	lr, lr, r0
 8007ad4:	45a6      	cmp	lr, r4
 8007ad6:	d908      	bls.n	8007aea <__udivmoddi4+0x156>
 8007ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8007adc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8007ae0:	d202      	bcs.n	8007ae8 <__udivmoddi4+0x154>
 8007ae2:	45a6      	cmp	lr, r4
 8007ae4:	f200 80bb 	bhi.w	8007c5e <__udivmoddi4+0x2ca>
 8007ae8:	4608      	mov	r0, r1
 8007aea:	eba4 040e 	sub.w	r4, r4, lr
 8007aee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007af2:	e79c      	b.n	8007a2e <__udivmoddi4+0x9a>
 8007af4:	f1c6 0720 	rsb	r7, r6, #32
 8007af8:	40b3      	lsls	r3, r6
 8007afa:	fa22 fc07 	lsr.w	ip, r2, r7
 8007afe:	ea4c 0c03 	orr.w	ip, ip, r3
 8007b02:	fa20 f407 	lsr.w	r4, r0, r7
 8007b06:	fa01 f306 	lsl.w	r3, r1, r6
 8007b0a:	431c      	orrs	r4, r3
 8007b0c:	40f9      	lsrs	r1, r7
 8007b0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8007b12:	fa00 f306 	lsl.w	r3, r0, r6
 8007b16:	fbb1 f8f9 	udiv	r8, r1, r9
 8007b1a:	0c20      	lsrs	r0, r4, #16
 8007b1c:	fa1f fe8c 	uxth.w	lr, ip
 8007b20:	fb09 1118 	mls	r1, r9, r8, r1
 8007b24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007b28:	fb08 f00e 	mul.w	r0, r8, lr
 8007b2c:	4288      	cmp	r0, r1
 8007b2e:	fa02 f206 	lsl.w	r2, r2, r6
 8007b32:	d90b      	bls.n	8007b4c <__udivmoddi4+0x1b8>
 8007b34:	eb1c 0101 	adds.w	r1, ip, r1
 8007b38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8007b3c:	f080 8088 	bcs.w	8007c50 <__udivmoddi4+0x2bc>
 8007b40:	4288      	cmp	r0, r1
 8007b42:	f240 8085 	bls.w	8007c50 <__udivmoddi4+0x2bc>
 8007b46:	f1a8 0802 	sub.w	r8, r8, #2
 8007b4a:	4461      	add	r1, ip
 8007b4c:	1a09      	subs	r1, r1, r0
 8007b4e:	b2a4      	uxth	r4, r4
 8007b50:	fbb1 f0f9 	udiv	r0, r1, r9
 8007b54:	fb09 1110 	mls	r1, r9, r0, r1
 8007b58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8007b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8007b60:	458e      	cmp	lr, r1
 8007b62:	d908      	bls.n	8007b76 <__udivmoddi4+0x1e2>
 8007b64:	eb1c 0101 	adds.w	r1, ip, r1
 8007b68:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8007b6c:	d26c      	bcs.n	8007c48 <__udivmoddi4+0x2b4>
 8007b6e:	458e      	cmp	lr, r1
 8007b70:	d96a      	bls.n	8007c48 <__udivmoddi4+0x2b4>
 8007b72:	3802      	subs	r0, #2
 8007b74:	4461      	add	r1, ip
 8007b76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8007b7a:	fba0 9402 	umull	r9, r4, r0, r2
 8007b7e:	eba1 010e 	sub.w	r1, r1, lr
 8007b82:	42a1      	cmp	r1, r4
 8007b84:	46c8      	mov	r8, r9
 8007b86:	46a6      	mov	lr, r4
 8007b88:	d356      	bcc.n	8007c38 <__udivmoddi4+0x2a4>
 8007b8a:	d053      	beq.n	8007c34 <__udivmoddi4+0x2a0>
 8007b8c:	b15d      	cbz	r5, 8007ba6 <__udivmoddi4+0x212>
 8007b8e:	ebb3 0208 	subs.w	r2, r3, r8
 8007b92:	eb61 010e 	sbc.w	r1, r1, lr
 8007b96:	fa01 f707 	lsl.w	r7, r1, r7
 8007b9a:	fa22 f306 	lsr.w	r3, r2, r6
 8007b9e:	40f1      	lsrs	r1, r6
 8007ba0:	431f      	orrs	r7, r3
 8007ba2:	e9c5 7100 	strd	r7, r1, [r5]
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	4631      	mov	r1, r6
 8007baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bae:	f1c2 0320 	rsb	r3, r2, #32
 8007bb2:	40d8      	lsrs	r0, r3
 8007bb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8007bb8:	fa21 f303 	lsr.w	r3, r1, r3
 8007bbc:	4091      	lsls	r1, r2
 8007bbe:	4301      	orrs	r1, r0
 8007bc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007bc4:	fa1f fe8c 	uxth.w	lr, ip
 8007bc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8007bcc:	fb07 3610 	mls	r6, r7, r0, r3
 8007bd0:	0c0b      	lsrs	r3, r1, #16
 8007bd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007bd6:	fb00 f60e 	mul.w	r6, r0, lr
 8007bda:	429e      	cmp	r6, r3
 8007bdc:	fa04 f402 	lsl.w	r4, r4, r2
 8007be0:	d908      	bls.n	8007bf4 <__udivmoddi4+0x260>
 8007be2:	eb1c 0303 	adds.w	r3, ip, r3
 8007be6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8007bea:	d22f      	bcs.n	8007c4c <__udivmoddi4+0x2b8>
 8007bec:	429e      	cmp	r6, r3
 8007bee:	d92d      	bls.n	8007c4c <__udivmoddi4+0x2b8>
 8007bf0:	3802      	subs	r0, #2
 8007bf2:	4463      	add	r3, ip
 8007bf4:	1b9b      	subs	r3, r3, r6
 8007bf6:	b289      	uxth	r1, r1
 8007bf8:	fbb3 f6f7 	udiv	r6, r3, r7
 8007bfc:	fb07 3316 	mls	r3, r7, r6, r3
 8007c00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007c04:	fb06 f30e 	mul.w	r3, r6, lr
 8007c08:	428b      	cmp	r3, r1
 8007c0a:	d908      	bls.n	8007c1e <__udivmoddi4+0x28a>
 8007c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8007c10:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8007c14:	d216      	bcs.n	8007c44 <__udivmoddi4+0x2b0>
 8007c16:	428b      	cmp	r3, r1
 8007c18:	d914      	bls.n	8007c44 <__udivmoddi4+0x2b0>
 8007c1a:	3e02      	subs	r6, #2
 8007c1c:	4461      	add	r1, ip
 8007c1e:	1ac9      	subs	r1, r1, r3
 8007c20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8007c24:	e738      	b.n	8007a98 <__udivmoddi4+0x104>
 8007c26:	462e      	mov	r6, r5
 8007c28:	4628      	mov	r0, r5
 8007c2a:	e705      	b.n	8007a38 <__udivmoddi4+0xa4>
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	e6e3      	b.n	80079f8 <__udivmoddi4+0x64>
 8007c30:	4618      	mov	r0, r3
 8007c32:	e6f8      	b.n	8007a26 <__udivmoddi4+0x92>
 8007c34:	454b      	cmp	r3, r9
 8007c36:	d2a9      	bcs.n	8007b8c <__udivmoddi4+0x1f8>
 8007c38:	ebb9 0802 	subs.w	r8, r9, r2
 8007c3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8007c40:	3801      	subs	r0, #1
 8007c42:	e7a3      	b.n	8007b8c <__udivmoddi4+0x1f8>
 8007c44:	4646      	mov	r6, r8
 8007c46:	e7ea      	b.n	8007c1e <__udivmoddi4+0x28a>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	e794      	b.n	8007b76 <__udivmoddi4+0x1e2>
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	e7d1      	b.n	8007bf4 <__udivmoddi4+0x260>
 8007c50:	46d0      	mov	r8, sl
 8007c52:	e77b      	b.n	8007b4c <__udivmoddi4+0x1b8>
 8007c54:	3b02      	subs	r3, #2
 8007c56:	4461      	add	r1, ip
 8007c58:	e732      	b.n	8007ac0 <__udivmoddi4+0x12c>
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	e709      	b.n	8007a72 <__udivmoddi4+0xde>
 8007c5e:	4464      	add	r4, ip
 8007c60:	3802      	subs	r0, #2
 8007c62:	e742      	b.n	8007aea <__udivmoddi4+0x156>

08007c64 <__aeabi_idiv0>:
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop

08007c68 <_getpid>:
 8007c68:	4b02      	ldr	r3, [pc, #8]	; (8007c74 <_getpid+0xc>)
 8007c6a:	2258      	movs	r2, #88	; 0x58
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c72:	4770      	bx	lr
 8007c74:	20000c7c 	.word	0x20000c7c

08007c78 <_kill>:
 8007c78:	4b02      	ldr	r3, [pc, #8]	; (8007c84 <_kill+0xc>)
 8007c7a:	2258      	movs	r2, #88	; 0x58
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c82:	4770      	bx	lr
 8007c84:	20000c7c 	.word	0x20000c7c

08007c88 <_exit>:
 8007c88:	e7fe      	b.n	8007c88 <_exit>
 8007c8a:	bf00      	nop

08007c8c <CmdLED>:
BSP_LED_Toggle(LED6);
HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
}

void CmdLED(int mode)
{
 8007c8c:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 8007c8e:	b930      	cbnz	r0, 8007c9e <CmdLED+0x12>
    return;
  }

  rc = fetch_uint32_arg(&led);
 8007c90:	4668      	mov	r0, sp
 8007c92:	f000 fb79 	bl	8008388 <fetch_uint32_arg>
  if(rc) {
 8007c96:	b128      	cbz	r0, 8007ca4 <CmdLED+0x18>
    printf("Missing LED index\n");
 8007c98:	480f      	ldr	r0, [pc, #60]	; (8007cd8 <CmdLED+0x4c>)
    return;
  }
    
  rc = fetch_uint32_arg(&val);
  if(rc) {
    printf("Missing state value, 0 for Off, 1 for On\n");
 8007c9a:	f7f8 fdb3 	bl	8000804 <puts>
    BSP_LED_On(LEDs[led]);
  } else {
    BSP_LED_Off(LEDs[led]);
  }

} 
 8007c9e:	b003      	add	sp, #12
 8007ca0:	f85d fb04 	ldr.w	pc, [sp], #4
  rc = fetch_uint32_arg(&val);
 8007ca4:	a801      	add	r0, sp, #4
 8007ca6:	f000 fb6f 	bl	8008388 <fetch_uint32_arg>
  if(rc) {
 8007caa:	b108      	cbz	r0, 8007cb0 <CmdLED+0x24>
    printf("Missing state value, 0 for Off, 1 for On\n");
 8007cac:	480b      	ldr	r0, [pc, #44]	; (8007cdc <CmdLED+0x50>)
 8007cae:	e7f4      	b.n	8007c9a <CmdLED+0xe>
  if((led < 3) || (led > 10)) {
 8007cb0:	9900      	ldr	r1, [sp, #0]
 8007cb2:	1ecb      	subs	r3, r1, #3
 8007cb4:	2b07      	cmp	r3, #7
 8007cb6:	d903      	bls.n	8007cc0 <CmdLED+0x34>
    printf("Led index of %u is out of the range (3..10)\n",
 8007cb8:	4809      	ldr	r0, [pc, #36]	; (8007ce0 <CmdLED+0x54>)
 8007cba:	f7f8 fd4f 	bl	800075c <printf>
    return;
 8007cbe:	e7ee      	b.n	8007c9e <CmdLED+0x12>
    BSP_LED_On(LEDs[led]);
 8007cc0:	4a08      	ldr	r2, [pc, #32]	; (8007ce4 <CmdLED+0x58>)
  led -= 3;
 8007cc2:	9300      	str	r3, [sp, #0]
    BSP_LED_On(LEDs[led]);
 8007cc4:	5cd0      	ldrb	r0, [r2, r3]
  if(val) {
 8007cc6:	9b01      	ldr	r3, [sp, #4]
 8007cc8:	b113      	cbz	r3, 8007cd0 <CmdLED+0x44>
    BSP_LED_On(LEDs[led]);
 8007cca:	f004 f9f3 	bl	800c0b4 <BSP_LED_On>
 8007cce:	e7e6      	b.n	8007c9e <CmdLED+0x12>
    BSP_LED_Off(LEDs[led]);
 8007cd0:	f004 f9fe 	bl	800c0d0 <BSP_LED_Off>
 8007cd4:	e7e3      	b.n	8007c9e <CmdLED+0x12>
 8007cd6:	bf00      	nop
 8007cd8:	0800d520 	.word	0x0800d520
 8007cdc:	0800d532 	.word	0x0800d532
 8007ce0:	0800d55b 	.word	0x0800d55b
 8007ce4:	0800d6f2 	.word	0x0800d6f2

08007ce8 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 8007ce8:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8007cea:	b958      	cbnz	r0, 8007d04 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 8007cec:	4668      	mov	r0, sp
 8007cee:	f004 fb77 	bl	800c3e0 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 8007cf2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8007cf6:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8007cfa:	f9bd 1000 	ldrsh.w	r1, [sp]
 8007cfe:	4803      	ldr	r0, [pc, #12]	; (8007d0c <CmdAccel+0x24>)
 8007d00:	f7f8 fd2c 	bl	800075c <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 8007d04:	b003      	add	sp, #12
 8007d06:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d0a:	bf00      	nop
 8007d0c:	0800d588 	.word	0x0800d588

08007d10 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 8007d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8007d12:	b9e8      	cbnz	r0, 8007d50 <CmdGyro+0x40>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 8007d14:	a801      	add	r0, sp, #4
 8007d16:	f004 fb9f 	bl	800c458 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
 8007d1a:	eddd 7a03 	vldr	s15, [sp, #12]
 8007d1e:	480e      	ldr	r0, [pc, #56]	; (8007d58 <CmdGyro+0x48>)
 8007d20:	eeb0 7a67 	vmov.f32	s14, s15
 8007d24:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8007d28:	eddd 7a02 	vldr	s15, [sp, #8]
 8007d2c:	ee17 3a10 	vmov	r3, s14
 8007d30:	eeb0 7a67 	vmov.f32	s14, s15
 8007d34:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8007d38:	eddd 7a01 	vldr	s15, [sp, #4]
 8007d3c:	ee17 2a10 	vmov	r2, s14
 8007d40:	eeb0 7a67 	vmov.f32	s14, s15
 8007d44:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8007d48:	ee17 1a10 	vmov	r1, s14
 8007d4c:	f7f8 fd06 	bl	800075c <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8007d50:	b005      	add	sp, #20
 8007d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d56:	bf00      	nop
 8007d58:	0800d5bb 	.word	0x0800d5bb

08007d5c <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8007d5c:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8007d5e:	b958      	cbnz	r0, 8007d78 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8007d60:	f004 fa0a 	bl	800c178 <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 8007d64:	4a05      	ldr	r2, [pc, #20]	; (8007d7c <CmdButton+0x20>)
 8007d66:	4906      	ldr	r1, [pc, #24]	; (8007d80 <CmdButton+0x24>)
	 button ? "Pressed" : "Released");

  return;
}
 8007d68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("Button is currently: %s\n",
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	bf18      	it	ne
 8007d70:	4611      	movne	r1, r2
 8007d72:	4804      	ldr	r0, [pc, #16]	; (8007d84 <CmdButton+0x28>)
 8007d74:	f7f8 bcf2 	b.w	800075c <printf>
}
 8007d78:	bd08      	pop	{r3, pc}
 8007d7a:	bf00      	nop
 8007d7c:	0800d5ea 	.word	0x0800d5ea
 8007d80:	0800d5f2 	.word	0x0800d5f2
 8007d84:	0800d5fb 	.word	0x0800d5fb

08007d88 <Error_Handler>:
{
 8007d88:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 8007d8a:	2003      	movs	r0, #3
 8007d8c:	f004 f992 	bl	800c0b4 <BSP_LED_On>
  while(1)
 8007d90:	e7fe      	b.n	8007d90 <Error_Handler+0x8>
	...

08007d94 <main>:
{
 8007d94:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007d96:	2301      	movs	r3, #1
{
 8007d98:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007d9a:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007da2:	2402      	movs	r4, #2
 8007da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007da8:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8007dac:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007dae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007db2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8007db4:	f001 f838 	bl	8008e28 <HAL_RCC_OscConfig>
 8007db8:	b108      	cbz	r0, 8007dbe <main+0x2a>
    Error_Handler();
 8007dba:	f7ff ffe5 	bl	8007d88 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8007dbe:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007dc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8007dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007dc8:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007dcc:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8007dce:	4621      	mov	r1, r4
 8007dd0:	a801      	add	r0, sp, #4
 8007dd2:	f001 fb07 	bl	80093e4 <HAL_RCC_ClockConfig>
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d1ee      	bne.n	8007dba <main+0x26>
  HAL_Init();
 8007ddc:	f001 fcc2 	bl	8009764 <HAL_Init>
  TerminalInit();  /* Initialize UART and USB */
 8007de0:	f000 fc00 	bl	80085e4 <TerminalInit>
  for(i=0; i<numLEDs; i++) {
 8007de4:	4d0f      	ldr	r5, [pc, #60]	; (8007e24 <main+0x90>)
    BSP_LED_Init(LEDs[i]);
 8007de6:	f815 0b01 	ldrb.w	r0, [r5], #1
  for(i=0; i<numLEDs; i++) {
 8007dea:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 8007dec:	f004 f92c 	bl	800c048 <BSP_LED_Init>
  for(i=0; i<numLEDs; i++) {
 8007df0:	2c08      	cmp	r4, #8
 8007df2:	d1f8      	bne.n	8007de6 <main+0x52>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8007df4:	2101      	movs	r1, #1
 8007df6:	2000      	movs	r0, #0
 8007df8:	f004 f984 	bl	800c104 <BSP_PB_Init>
  accelRc = BSP_ACCELERO_Init();
 8007dfc:	f004 fad0 	bl	800c3a0 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 8007e00:	b118      	cbz	r0, 8007e0a <main+0x76>
    printf("Failed to initialize acceleromter\n");
 8007e02:	4809      	ldr	r0, [pc, #36]	; (8007e28 <main+0x94>)
 8007e04:	f7f8 fcfe 	bl	8000804 <puts>
 8007e08:	e7d7      	b.n	8007dba <main+0x26>
  gyroRc = BSP_GYRO_Init();
 8007e0a:	f004 faf1 	bl	800c3f0 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 8007e0e:	b108      	cbz	r0, 8007e14 <main+0x80>
    printf("Failed to initialize Gyroscope\n");
 8007e10:	4806      	ldr	r0, [pc, #24]	; (8007e2c <main+0x98>)
 8007e12:	e7f7      	b.n	8007e04 <main+0x70>
  my_Init();
 8007e14:	f7f8 fbf6 	bl	8000604 <my_Init>
    TaskInput();
 8007e18:	f000 fa18 	bl	800824c <TaskInput>
    my_Loop();
 8007e1c:	f7f8 fbf0 	bl	8000600 <my_Loop>
  while(1) {
 8007e20:	e7fa      	b.n	8007e18 <main+0x84>
 8007e22:	bf00      	nop
 8007e24:	0800d6f2 	.word	0x0800d6f2
 8007e28:	0800d614 	.word	0x0800d614
 8007e2c:	0800d636 	.word	0x0800d636

08007e30 <SysTick_Handler>:
{
 8007e30:	b508      	push	{r3, lr}
    HAL_IncTick();
 8007e32:	f001 fca9 	bl	8009788 <HAL_IncTick>
}
 8007e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    my_Tick();
 8007e3a:	f7f8 bbd7 	b.w	80005ec <my_Tick>

08007e3e <EXTI0_IRQHandler>:
{
 8007e3e:	b508      	push	{r3, lr}
BSP_LED_Toggle(LED6);
 8007e40:	2003      	movs	r0, #3
 8007e42:	f004 f953 	bl	800c0ec <BSP_LED_Toggle>
}
 8007e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	f001 bdf2 	b.w	8009a34 <HAL_GPIO_EXTI_IRQHandler>

08007e50 <getString>:
ADD_CMD("demo", _bc_A2, "Test the _bc_A2 function");

char * get_string(char *destptr);

void getString(int action)
{
 8007e50:	b507      	push	{r0, r1, r2, lr}
    int fetch_status;
    char *destptr;
    fetch_status = fetch_string_arg(&destptr);
 8007e52:	a801      	add	r0, sp, #4
 8007e54:	f000 faac 	bl	80083b0 <fetch_string_arg>

    if(fetch_status) {
        //default logic here
    }
    printf("get_string has been called and it has returned this: %s\n", get_string(destptr));
 8007e58:	9801      	ldr	r0, [sp, #4]
 8007e5a:	f7f8 fa5b 	bl	8000314 <get_string>
 8007e5e:	4601      	mov	r1, r0
 8007e60:	4802      	ldr	r0, [pc, #8]	; (8007e6c <getString+0x1c>)
 8007e62:	f7f8 fc7b 	bl	800075c <printf>
}
 8007e66:	b003      	add	sp, #12
 8007e68:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e6c:	0800d6fa 	.word	0x0800d6fa

08007e70 <bcGame>:


char * bc_Game(int delay, char * pattern, int target);

void bcGame(int action)
{
 8007e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    uint32_t led_delay;
    int fetch_status1;
    fetch_status1 = fetch_uint32_arg(&led_delay);
 8007e72:	a801      	add	r0, sp, #4
 8007e74:	f000 fa88 	bl	8008388 <fetch_uint32_arg>
    if(fetch_status1) {
 8007e78:	b110      	cbz	r0, 8007e80 <bcGame+0x10>
    // Use a default value
    led_delay = 500;
 8007e7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007e7e:	9301      	str	r3, [sp, #4]
    }   


    int fetch_status;
    char *destptr;
    fetch_status = fetch_string_arg(&destptr);
 8007e80:	a802      	add	r0, sp, #8
 8007e82:	f000 fa95 	bl	80083b0 <fetch_string_arg>

    if(fetch_status) {
 8007e86:	b108      	cbz	r0, 8007e8c <bcGame+0x1c>
        destptr = "01357642";
 8007e88:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <bcGame+0x40>)
 8007e8a:	9302      	str	r3, [sp, #8]
    }

    uint32_t target;
    int fetch_status2;
    fetch_status2 = fetch_uint32_arg(&target);
 8007e8c:	a803      	add	r0, sp, #12
 8007e8e:	f000 fa7b 	bl	8008388 <fetch_uint32_arg>
    if(fetch_status2) {
 8007e92:	b108      	cbz	r0, 8007e98 <bcGame+0x28>
    target = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	9303      	str	r3, [sp, #12]
    }
    printf("function has been called and it has returned this: %s\n", bc_Game(led_delay, destptr, target));
 8007e98:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007e9c:	9801      	ldr	r0, [sp, #4]
 8007e9e:	f7f8 fa41 	bl	8000324 <bc_Game>
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	4803      	ldr	r0, [pc, #12]	; (8007eb4 <bcGame+0x44>)
 8007ea6:	f7f8 fc59 	bl	800075c <printf>
}
 8007eaa:	b005      	add	sp, #20
 8007eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8007eb0:	0800d733 	.word	0x0800d733
 8007eb4:	0800d73c 	.word	0x0800d73c

08007eb8 <ticks>:

int _bc_a5_tick_check();

void ticks(int action)
{
if(action==CMD_SHORT_HELP) return;
 8007eb8:	2801      	cmp	r0, #1
 8007eba:	d006      	beq.n	8007eca <ticks+0x12>
if(action==CMD_LONG_HELP) {
 8007ebc:	2802      	cmp	r0, #2
 8007ebe:	d102      	bne.n	8007ec6 <ticks+0xe>
printf("Ticks\n\n"
 8007ec0:	4802      	ldr	r0, [pc, #8]	; (8007ecc <ticks+0x14>)
 8007ec2:	f7f8 bc9f 	b.w	8000804 <puts>
"This command tests the function that is supposed to be inside the interrupt handler\n"
);
return;
}
//creating a variable of type uint32_t called delay and a regular int called fetch_status
    _bc_a5_tick_check();    
 8007ec6:	f7f8 bb63 	b.w	8000590 <_bc_a5_tick_check>
}
 8007eca:	4770      	bx	lr
 8007ecc:	0800d773 	.word	0x0800d773

08007ed0 <AddTest>:
if(action==CMD_SHORT_HELP) return;
 8007ed0:	2801      	cmp	r0, #1
{
 8007ed2:	b507      	push	{r0, r1, r2, lr}
if(action==CMD_SHORT_HELP) return;
 8007ed4:	d018      	beq.n	8007f08 <AddTest+0x38>
if(action==CMD_LONG_HELP) {
 8007ed6:	2802      	cmp	r0, #2
 8007ed8:	d105      	bne.n	8007ee6 <AddTest+0x16>
printf("Addition Test\n\n"
 8007eda:	480d      	ldr	r0, [pc, #52]	; (8007f10 <AddTest+0x40>)
}
 8007edc:	b003      	add	sp, #12
 8007ede:	f85d eb04 	ldr.w	lr, [sp], #4
printf("Addition Test\n\n"
 8007ee2:	f7f8 bc8f 	b.w	8000804 <puts>
fetch_status = fetch_uint32_arg(&delay);
 8007ee6:	a801      	add	r0, sp, #4
 8007ee8:	f000 fa4e 	bl	8008388 <fetch_uint32_arg>
if(fetch_status) {
 8007eec:	b110      	cbz	r0, 8007ef4 <AddTest+0x24>
delay = 0xFFFFFF;
 8007eee:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007ef2:	9301      	str	r3, [sp, #4]
printf("add_test returned: %d\n", add_test(98, 87, delay, 20));
 8007ef4:	2157      	movs	r1, #87	; 0x57
 8007ef6:	9a01      	ldr	r2, [sp, #4]
 8007ef8:	2314      	movs	r3, #20
 8007efa:	2062      	movs	r0, #98	; 0x62
 8007efc:	f7f8 f9a4 	bl	8000248 <add_test>
 8007f00:	4601      	mov	r1, r0
 8007f02:	4804      	ldr	r0, [pc, #16]	; (8007f14 <AddTest+0x44>)
 8007f04:	f7f8 fc2a 	bl	800075c <printf>
}
 8007f08:	b003      	add	sp, #12
 8007f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f0e:	bf00      	nop
 8007f10:	0800d7ce 	.word	0x0800d7ce
 8007f14:	0800d806 	.word	0x0800d806

08007f18 <_bc_A2>:
if(action==CMD_SHORT_HELP) return;
 8007f18:	2801      	cmp	r0, #1
{
 8007f1a:	b507      	push	{r0, r1, r2, lr}
if(action==CMD_SHORT_HELP) return;
 8007f1c:	d01c      	beq.n	8007f58 <_bc_A2+0x40>
if(action==CMD_LONG_HELP) {
 8007f1e:	2802      	cmp	r0, #2
 8007f20:	d105      	bne.n	8007f2e <_bc_A2+0x16>
printf("LED DEMO\n\n"
 8007f22:	480f      	ldr	r0, [pc, #60]	; (8007f60 <_bc_A2+0x48>)
}
 8007f24:	b003      	add	sp, #12
 8007f26:	f85d eb04 	ldr.w	lr, [sp], #4
printf("LED DEMO\n\n"
 8007f2a:	f7f8 bc6b 	b.w	8000804 <puts>
fetch_status2 = fetch_uint32_arg(&count);
 8007f2e:	4668      	mov	r0, sp
 8007f30:	f000 fa2a 	bl	8008388 <fetch_uint32_arg>
if(fetch_status2) {
 8007f34:	b108      	cbz	r0, 8007f3a <_bc_A2+0x22>
count = 1;
 8007f36:	2301      	movs	r3, #1
 8007f38:	9300      	str	r3, [sp, #0]
fetch_status1 = fetch_uint32_arg(&led_delay);
 8007f3a:	a801      	add	r0, sp, #4
 8007f3c:	f000 fa24 	bl	8008388 <fetch_uint32_arg>
if(fetch_status1) {
 8007f40:	b110      	cbz	r0, 8007f48 <_bc_A2+0x30>
led_delay = 0xFFFFFF;
 8007f42:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007f46:	9301      	str	r3, [sp, #4]
printf("bc_led_demo_a2 has finished. Here is register 0:%d \n", bc_led_demo_a2(count, led_delay)); //0 is the counter and delay is the delay from the user
 8007f48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f4c:	f7f8 f9a6 	bl	800029c <bc_led_demo_a2>
 8007f50:	4601      	mov	r1, r0
 8007f52:	4804      	ldr	r0, [pc, #16]	; (8007f64 <_bc_A2+0x4c>)
 8007f54:	f7f8 fc02 	bl	800075c <printf>
}
 8007f58:	b003      	add	sp, #12
 8007f5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f5e:	bf00      	nop
 8007f60:	0800d81d 	.word	0x0800d81d
 8007f64:	0800d862 	.word	0x0800d862

08007f68 <TiltGame>:
if(action==CMD_SHORT_HELP) return;
 8007f68:	2801      	cmp	r0, #1
{
 8007f6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
if(action==CMD_SHORT_HELP) return;
 8007f6c:	d023      	beq.n	8007fb6 <TiltGame+0x4e>
if(action==CMD_LONG_HELP) {
 8007f6e:	2802      	cmp	r0, #2
 8007f70:	d105      	bne.n	8007f7e <TiltGame+0x16>
printf("Tilt Game\n\n"
 8007f72:	4812      	ldr	r0, [pc, #72]	; (8007fbc <TiltGame+0x54>)
}
 8007f74:	b005      	add	sp, #20
 8007f76:	f85d eb04 	ldr.w	lr, [sp], #4
printf("Tilt Game\n\n"
 8007f7a:	f7f8 bc43 	b.w	8000804 <puts>
    fetch_status1 = fetch_uint32_arg(&delay);
 8007f7e:	a801      	add	r0, sp, #4
 8007f80:	f000 fa02 	bl	8008388 <fetch_uint32_arg>
    if(fetch_status1) {
 8007f84:	b110      	cbz	r0, 8007f8c <TiltGame+0x24>
        delay = 1000;
 8007f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f8a:	9301      	str	r3, [sp, #4]
    fetch_status = fetch_uint32_arg(&target);
 8007f8c:	a802      	add	r0, sp, #8
 8007f8e:	f000 f9fb 	bl	8008388 <fetch_uint32_arg>
    if(fetch_status) {
 8007f92:	b108      	cbz	r0, 8007f98 <TiltGame+0x30>
        target = 2;
 8007f94:	2302      	movs	r3, #2
 8007f96:	9302      	str	r3, [sp, #8]
    fetch_status2 = fetch_uint32_arg(&game_time);
 8007f98:	a803      	add	r0, sp, #12
 8007f9a:	f000 f9f5 	bl	8008388 <fetch_uint32_arg>
    if(fetch_status2) {
 8007f9e:	b108      	cbz	r0, 8007fa4 <TiltGame+0x3c>
        game_time = 10;
 8007fa0:	230a      	movs	r3, #10
 8007fa2:	9303      	str	r3, [sp, #12]
    printf("bc_tilt returned: %d\n", bc_tilt(delay, target, game_time));
 8007fa4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007fa8:	9801      	ldr	r0, [sp, #4]
 8007faa:	f7f8 fa49 	bl	8000440 <bc_tilt>
 8007fae:	4601      	mov	r1, r0
 8007fb0:	4803      	ldr	r0, [pc, #12]	; (8007fc0 <TiltGame+0x58>)
 8007fb2:	f7f8 fbd3 	bl	800075c <printf>
}
 8007fb6:	b005      	add	sp, #20
 8007fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fbc:	0800d897 	.word	0x0800d897
 8007fc0:	0800d8c3 	.word	0x0800d8c3

08007fc4 <lab_eight>:
if(action==CMD_SHORT_HELP) return;
 8007fc4:	2801      	cmp	r0, #1
{
 8007fc6:	b508      	push	{r3, lr}
if(action==CMD_SHORT_HELP) return;
 8007fc8:	d00e      	beq.n	8007fe8 <lab_eight+0x24>
if(action==CMD_LONG_HELP) {
 8007fca:	2802      	cmp	r0, #2
 8007fcc:	d104      	bne.n	8007fd8 <lab_eight+0x14>
}
 8007fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
printf("Lab8\n\n"
 8007fd2:	4806      	ldr	r0, [pc, #24]	; (8007fec <lab_eight+0x28>)
 8007fd4:	f7f8 bc16 	b.w	8000804 <puts>
    printf("lab8 is finished: %d\n", lab8());   
 8007fd8:	f7f8 fac8 	bl	800056c <lab8>
}
 8007fdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("lab8 is finished: %d\n", lab8());   
 8007fe0:	4601      	mov	r1, r0
 8007fe2:	4803      	ldr	r0, [pc, #12]	; (8007ff0 <lab_eight+0x2c>)
 8007fe4:	f7f8 bbba 	b.w	800075c <printf>
}
 8007fe8:	bd08      	pop	{r3, pc}
 8007fea:	bf00      	nop
 8007fec:	0800d8d9 	.word	0x0800d8d9
 8007ff0:	0800d910 	.word	0x0800d910

08007ff4 <wdogTest>:
    if(action==CMD_SHORT_HELP) return;
 8007ff4:	2801      	cmp	r0, #1
{
 8007ff6:	b507      	push	{r0, r1, r2, lr}
    if(action==CMD_SHORT_HELP) return;
 8007ff8:	d015      	beq.n	8008026 <wdogTest+0x32>
    if(action==CMD_LONG_HELP)
 8007ffa:	2802      	cmp	r0, #2
 8007ffc:	d105      	bne.n	800800a <wdogTest+0x16>
        printf("Used to test the watchdog\n\n"
 8007ffe:	480b      	ldr	r0, [pc, #44]	; (800802c <wdogTest+0x38>)
}
 8008000:	b003      	add	sp, #12
 8008002:	f85d eb04 	ldr.w	lr, [sp], #4
        printf("Used to test the watchdog\n\n"
 8008006:	f7f8 bbfd 	b.w	8000804 <puts>
    fetch_status1 = fetch_uint32_arg(&refresh);
 800800a:	a801      	add	r0, sp, #4
 800800c:	f000 f9bc 	bl	8008388 <fetch_uint32_arg>
    if(fetch_status1) {
 8008010:	b110      	cbz	r0, 8008018 <wdogTest+0x24>
        refresh = 1000;
 8008012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008016:	9301      	str	r3, [sp, #4]
    mes_InitIWDG(refresh);
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	f000 f82b 	bl	8008074 <mes_InitIWDG>
    mes_IWDGStart();
 800801e:	f000 f843 	bl	80080a8 <mes_IWDGStart>
    mes_IWDGRefresh();
 8008022:	f000 f851 	bl	80080c8 <mes_IWDGRefresh>
}
 8008026:	b003      	add	sp, #12
 8008028:	f85d fb04 	ldr.w	pc, [sp], #4
 800802c:	0800d926 	.word	0x0800d926

08008030 <tickHandler>:
if(action==CMD_SHORT_HELP) return;
 8008030:	2801      	cmp	r0, #1
{
 8008032:	b507      	push	{r0, r1, r2, lr}
if(action==CMD_SHORT_HELP) return;
 8008034:	d018      	beq.n	8008068 <tickHandler+0x38>
if(action==CMD_LONG_HELP) {
 8008036:	2802      	cmp	r0, #2
 8008038:	d105      	bne.n	8008046 <tickHandler+0x16>
printf("Tick Handler\n\n"
 800803a:	480d      	ldr	r0, [pc, #52]	; (8008070 <tickHandler+0x40>)
}
 800803c:	b003      	add	sp, #12
 800803e:	f85d eb04 	ldr.w	lr, [sp], #4
printf("Tick Handler\n\n"
 8008042:	f7f8 bbdf 	b.w	8000804 <puts>
    fetch_status1 = fetch_uint32_arg(&timeout);
 8008046:	4668      	mov	r0, sp
 8008048:	f000 f99e 	bl	8008388 <fetch_uint32_arg>
    if(fetch_status1) {
 800804c:	b110      	cbz	r0, 8008054 <tickHandler+0x24>
        timeout = 1000;
 800804e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008052:	9300      	str	r3, [sp, #0]
    fetch_status = fetch_uint32_arg(&delay);
 8008054:	a801      	add	r0, sp, #4
 8008056:	f000 f997 	bl	8008388 <fetch_uint32_arg>
    if(fetch_status) {
 800805a:	b108      	cbz	r0, 8008060 <tickHandler+0x30>
        delay = 2;
 800805c:	2302      	movs	r3, #2
 800805e:	9301      	str	r3, [sp, #4]
    _bc_a5_tick_handler(10, 10);    
 8008060:	210a      	movs	r1, #10
 8008062:	4608      	mov	r0, r1
 8008064:	f7f8 fa8e 	bl	8000584 <_bc_a5_tick_handler>
}
 8008068:	b003      	add	sp, #12
 800806a:	f85d fb04 	ldr.w	pc, [sp], #4
 800806e:	bf00      	nop
 8008070:	0800d969 	.word	0x0800d969

08008074 <mes_InitIWDG>:
#include <stdlib.h>
#include "stm32f3xx_hal.h"
#include "stm32f3_discovery.h"
static IWDG_HandleTypeDef hiwdg; // IWDG handle
// Initialize the Watchdog structures etc, only called once
void mes_InitIWDG(int reload){
 8008074:	b508      	push	{r3, lr}
hiwdg.Instance = IWDG;
hiwdg.Init.Prescaler = IWDG_PRESCALER_256; // IWDG prescaler 4, 8, 16, 32, 64, 128, 256
 8008076:	4909      	ldr	r1, [pc, #36]	; (800809c <mes_InitIWDG+0x28>)
hiwdg.Instance = IWDG;
 8008078:	4b09      	ldr	r3, [pc, #36]	; (80080a0 <mes_InitIWDG+0x2c>)
hiwdg.Init.Prescaler = IWDG_PRESCALER_256; // IWDG prescaler 4, 8, 16, 32, 64, 128, 256
 800807a:	2206      	movs	r2, #6
 800807c:	e9c3 1200 	strd	r1, r2, [r3]
// This divides the clock for longer
// or shorter watchdog timing
hiwdg.Init.Reload = reload; // The watchdog counts down from this value
 8008080:	6098      	str	r0, [r3, #8]
hiwdg.Init.Window = 0x0FFF; // Window option is disabled
 8008082:	f640 72ff 	movw	r2, #4095	; 0xfff
if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8008086:	4618      	mov	r0, r3
hiwdg.Init.Window = 0x0FFF; // Window option is disabled
 8008088:	60da      	str	r2, [r3, #12]
if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800808a:	f003 f8c2 	bl	800b212 <HAL_IWDG_Init>
 800808e:	b120      	cbz	r0, 800809a <mes_InitIWDG+0x26>
printf("IWDG initialization error\n"); // Initialization Error
}
 8008090:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
printf("IWDG initialization error\n"); // Initialization Error
 8008094:	4803      	ldr	r0, [pc, #12]	; (80080a4 <mes_InitIWDG+0x30>)
 8008096:	f7f8 bbb5 	b.w	8000804 <puts>
}
 800809a:	bd08      	pop	{r3, pc}
 800809c:	40003000 	.word	0x40003000
 80080a0:	20000c80 	.word	0x20000c80
 80080a4:	0800dadd 	.word	0x0800dadd

080080a8 <mes_IWDGStart>:
// Start the watchdog, generally would only be called once
void mes_IWDGStart( void ){
 80080a8:	b508      	push	{r3, lr}
if (HAL_IWDG_Start(&hiwdg) != HAL_OK)
 80080aa:	4805      	ldr	r0, [pc, #20]	; (80080c0 <mes_IWDGStart+0x18>)
 80080ac:	f003 f900 	bl	800b2b0 <HAL_IWDG_Start>
 80080b0:	b120      	cbz	r0, 80080bc <mes_IWDGStart+0x14>
printf("IWDG start error\n"); // Start Error
}
 80080b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
printf("IWDG start error\n"); // Start Error
 80080b6:	4803      	ldr	r0, [pc, #12]	; (80080c4 <mes_IWDGStart+0x1c>)
 80080b8:	f7f8 bba4 	b.w	8000804 <puts>
}
 80080bc:	bd08      	pop	{r3, pc}
 80080be:	bf00      	nop
 80080c0:	20000c80 	.word	0x20000c80
 80080c4:	0800daf7 	.word	0x0800daf7

080080c8 <mes_IWDGRefresh>:
// Refresh the watchdog, this must be called before the
// watchdog timer times out or the board will reset
void mes_IWDGRefresh(void){
 80080c8:	b508      	push	{r3, lr}
if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 80080ca:	4805      	ldr	r0, [pc, #20]	; (80080e0 <mes_IWDGRefresh+0x18>)
 80080cc:	f003 f92a 	bl	800b324 <HAL_IWDG_Refresh>
 80080d0:	b120      	cbz	r0, 80080dc <mes_IWDGRefresh+0x14>
printf("IWDG refresh error\n"); // Refresh Error
 80080d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
printf("IWDG refresh error\n"); // Refresh Error
 80080d6:	4803      	ldr	r0, [pc, #12]	; (80080e4 <mes_IWDGRefresh+0x1c>)
 80080d8:	f7f8 bb94 	b.w	8000804 <puts>
 80080dc:	bd08      	pop	{r3, pc}
 80080de:	bf00      	nop
 80080e0:	20000c80 	.word	0x20000c80
 80080e4:	0800db08 	.word	0x0800db08

080080e8 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 80080e8:	2801      	cmp	r0, #1
{
 80080ea:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return;
 80080ec:	d00f      	beq.n	800810e <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 80080ee:	2802      	cmp	r0, #2
 80080f0:	d104      	bne.n	80080fc <CmdTest+0x14>
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 80080f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("testasm\n\n"
 80080f6:	4806      	ldr	r0, [pc, #24]	; (8008110 <CmdTest+0x28>)
 80080f8:	f7f8 bb84 	b.w	8000804 <puts>
  printf("ret val = %d\n", mytest( 77  ) );
 80080fc:	204d      	movs	r0, #77	; 0x4d
 80080fe:	f7f8 fa69 	bl	80005d4 <mytest>
}
 8008102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("ret val = %d\n", mytest( 77  ) );
 8008106:	4601      	mov	r1, r0
 8008108:	4802      	ldr	r0, [pc, #8]	; (8008114 <CmdTest+0x2c>)
 800810a:	f7f8 bb27 	b.w	800075c <printf>
}
 800810e:	bd08      	pop	{r3, pc}
 8008110:	0800db1b 	.word	0x0800db1b
 8008114:	0800db54 	.word	0x0800db54

08008118 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 8008118:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 800811a:	b940      	cbnz	r0, 800812e <CmdW+0x16>

  fetch_uint32_arg(&addr);
 800811c:	4668      	mov	r0, sp
 800811e:	f000 f933 	bl	8008388 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8008122:	a801      	add	r0, sp, #4
 8008124:	f000 f930 	bl	8008388 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8008128:	e9dd 3200 	ldrd	r3, r2, [sp]
 800812c:	601a      	str	r2, [r3, #0]
}
 800812e:	b003      	add	sp, #12
 8008130:	f85d fb04 	ldr.w	pc, [sp], #4

08008134 <CmdR>:
{
 8008134:	b507      	push	{r0, r1, r2, lr}
  if(mode != CMD_INTERACTIVE) return;
 8008136:	b938      	cbnz	r0, 8008148 <CmdR+0x14>
  fetch_uint32_arg(&addr);
 8008138:	a801      	add	r0, sp, #4
 800813a:	f000 f925 	bl	8008388 <fetch_uint32_arg>
  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 800813e:	9901      	ldr	r1, [sp, #4]
 8008140:	4803      	ldr	r0, [pc, #12]	; (8008150 <CmdR+0x1c>)
 8008142:	680a      	ldr	r2, [r1, #0]
 8008144:	f7f8 fb0a 	bl	800075c <printf>
}
 8008148:	b003      	add	sp, #12
 800814a:	f85d fb04 	ldr.w	pc, [sp], #4
 800814e:	bf00      	nop
 8008150:	0800db78 	.word	0x0800db78

08008154 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 8008154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008156:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 8008158:	b930      	cbnz	r0, 8008168 <parse+0x14>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 800815a:	4931      	ldr	r1, [pc, #196]	; (8008220 <parse+0xcc>)
 800815c:	4831      	ldr	r0, [pc, #196]	; (8008224 <parse+0xd0>)
      t->func(arg);
      return 0;
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 800815e:	f7f8 fafd 	bl	800075c <printf>
    return -1;
 8008162:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008166:	e032      	b.n	80081ce <parse+0x7a>
  if(len==0) {
 8008168:	b911      	cbnz	r1, 8008170 <parse+0x1c>
    printf("len == 0 in %s\n",__FUNCTION__);
 800816a:	492d      	ldr	r1, [pc, #180]	; (8008220 <parse+0xcc>)
 800816c:	482e      	ldr	r0, [pc, #184]	; (8008228 <parse+0xd4>)
 800816e:	e7f6      	b.n	800815e <parse+0xa>
  if(table == NULL) {
 8008170:	b182      	cbz	r2, 8008194 <parse+0x40>
 8008172:	1e4c      	subs	r4, r1, #1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8008174:	492d      	ldr	r1, [pc, #180]	; (800822c <parse+0xd8>)
 8008176:	4603      	mov	r3, r0
 8008178:	1c66      	adds	r6, r4, #1
 800817a:	4618      	mov	r0, r3
 800817c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008180:	d00d      	beq.n	800819e <parse+0x4a>
 8008182:	2a00      	cmp	r2, #0
 8008184:	d0ed      	beq.n	8008162 <parse+0xe>
 8008186:	5c52      	ldrb	r2, [r2, r1]
 8008188:	0712      	lsls	r2, r2, #28
 800818a:	f104 36ff 	add.w	r6, r4, #4294967295	; 0xffffffff
 800818e:	d404      	bmi.n	800819a <parse+0x46>
  if((i==0) || (*buf==0)) {
 8008190:	b934      	cbnz	r4, 80081a0 <parse+0x4c>
 8008192:	e7e6      	b.n	8008162 <parse+0xe>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8008194:	4922      	ldr	r1, [pc, #136]	; (8008220 <parse+0xcc>)
 8008196:	4826      	ldr	r0, [pc, #152]	; (8008230 <parse+0xdc>)
 8008198:	e7e1      	b.n	800815e <parse+0xa>
 800819a:	4634      	mov	r4, r6
 800819c:	e7ec      	b.n	8008178 <parse+0x24>
  if((i==0) || (*buf==0)) {
 800819e:	b1b2      	cbz	r2, 80081ce <parse+0x7a>
  p = strtok(buf,SEPS);
 80081a0:	4924      	ldr	r1, [pc, #144]	; (8008234 <parse+0xe0>)
 80081a2:	f7f8 fcfb 	bl	8000b9c <strtok>
  if(p==NULL) {
 80081a6:	4606      	mov	r6, r0
 80081a8:	b910      	cbnz	r0, 80081b0 <parse+0x5c>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 80081aa:	491d      	ldr	r1, [pc, #116]	; (8008220 <parse+0xcc>)
 80081ac:	4822      	ldr	r0, [pc, #136]	; (8008238 <parse+0xe4>)
 80081ae:	e7d6      	b.n	800815e <parse+0xa>
  if(strcasecmp(p,"help") == 0) {
 80081b0:	4922      	ldr	r1, [pc, #136]	; (800823c <parse+0xe8>)
 80081b2:	f7f8 fbe9 	bl	8000988 <strcasecmp>
 80081b6:	4604      	mov	r4, r0
 80081b8:	b9c8      	cbnz	r0, 80081ee <parse+0x9a>
    p = strtok(NULL,SEPS);
 80081ba:	491e      	ldr	r1, [pc, #120]	; (8008234 <parse+0xe0>)
 80081bc:	f7f8 fcee 	bl	8000b9c <strtok>
    if(p == NULL) {
 80081c0:	4606      	mov	r6, r0
 80081c2:	b9d0      	cbnz	r0, 80081fa <parse+0xa6>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80081c4:	4e1e      	ldr	r6, [pc, #120]	; (8008240 <parse+0xec>)
 80081c6:	350c      	adds	r5, #12
      for(t=table; t->cmdname!=NULL; t++) {
 80081c8:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 80081cc:	b911      	cbnz	r1, 80081d4 <parse+0x80>
  return -1;
}
 80081ce:	4620      	mov	r0, r4
 80081d0:	b003      	add	sp, #12
 80081d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(t->help != NULL) {
 80081d4:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80081d8:	b122      	cbz	r2, 80081e4 <parse+0x90>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80081da:	4630      	mov	r0, r6
 80081dc:	f7f8 fabe 	bl	800075c <printf>
      for(t=table; t->cmdname!=NULL; t++) {
 80081e0:	350c      	adds	r5, #12
 80081e2:	e7f1      	b.n	80081c8 <parse+0x74>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 80081e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80081e8:	2001      	movs	r0, #1
 80081ea:	4798      	blx	r3
 80081ec:	e7f8      	b.n	80081e0 <parse+0x8c>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 80081ee:	2700      	movs	r7, #0
  for(t=table; t->cmdname!=NULL; t++) {
 80081f0:	6829      	ldr	r1, [r5, #0]
 80081f2:	b921      	cbnz	r1, 80081fe <parse+0xaa>
  printf("Command `%s' not found. Type `help' for online help\n",p);
 80081f4:	4813      	ldr	r0, [pc, #76]	; (8008244 <parse+0xf0>)
 80081f6:	4631      	mov	r1, r6
 80081f8:	e7b1      	b.n	800815e <parse+0xa>
      arg = CMD_LONG_HELP;
 80081fa:	2702      	movs	r7, #2
  for(t=table; t->cmdname!=NULL; t++) {
 80081fc:	e7f8      	b.n	80081f0 <parse+0x9c>
    if(strcasecmp(p,t->cmdname) == 0) {
 80081fe:	4630      	mov	r0, r6
 8008200:	9101      	str	r1, [sp, #4]
 8008202:	f7f8 fbc1 	bl	8000988 <strcasecmp>
 8008206:	9901      	ldr	r1, [sp, #4]
 8008208:	4604      	mov	r4, r0
 800820a:	b938      	cbnz	r0, 800821c <parse+0xc8>
      if(arg == CMD_LONG_HELP) {	
 800820c:	b117      	cbz	r7, 8008214 <parse+0xc0>
	printf("%s:\n",t->cmdname);
 800820e:	480e      	ldr	r0, [pc, #56]	; (8008248 <parse+0xf4>)
 8008210:	f7f8 faa4 	bl	800075c <printf>
      t->func(arg);
 8008214:	686b      	ldr	r3, [r5, #4]
 8008216:	4638      	mov	r0, r7
 8008218:	4798      	blx	r3
      return 0;
 800821a:	e7d8      	b.n	80081ce <parse+0x7a>
  for(t=table; t->cmdname!=NULL; t++) {
 800821c:	350c      	adds	r5, #12
 800821e:	e7e7      	b.n	80081f0 <parse+0x9c>
 8008220:	0800dca4 	.word	0x0800dca4
 8008224:	0800dbc3 	.word	0x0800dbc3
 8008228:	0800dbe4 	.word	0x0800dbe4
 800822c:	0800d2ad 	.word	0x0800d2ad
 8008230:	0800dbf4 	.word	0x0800dbf4
 8008234:	0800dc17 	.word	0x0800dc17
 8008238:	0800dc1e 	.word	0x0800dc1e
 800823c:	0800dc4e 	.word	0x0800dc4e
 8008240:	0800dc53 	.word	0x0800dc53
 8008244:	0800dc64 	.word	0x0800dc64
 8008248:	0800dc5f 	.word	0x0800dc5f

0800824c <TaskInput>:
{
 800824c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(printPrompt) {
 800824e:	4d43      	ldr	r5, [pc, #268]	; (800835c <TaskInput+0x110>)
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	b123      	cbz	r3, 800825e <TaskInput+0x12>
    printf("ARMON>");
 8008254:	4842      	ldr	r0, [pc, #264]	; (8008360 <TaskInput+0x114>)
 8008256:	f7f8 fa81 	bl	800075c <printf>
    printPrompt = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	602b      	str	r3, [r5, #0]
  rc = TerminalReadAnyNonBlock(&c);
 800825e:	f10d 0007 	add.w	r0, sp, #7
 8008262:	f000 fa30 	bl	80086c6 <TerminalReadAnyNonBlock>
  if(rc) {
 8008266:	b990      	cbnz	r0, 800828e <TaskInput+0x42>
  if(((c == 010) || (c == 0x7f)) && count) {
 8008268:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800826c:	2b08      	cmp	r3, #8
 800826e:	d001      	beq.n	8008274 <TaskInput+0x28>
 8008270:	2b7f      	cmp	r3, #127	; 0x7f
 8008272:	d10e      	bne.n	8008292 <TaskInput+0x46>
 8008274:	4c3b      	ldr	r4, [pc, #236]	; (8008364 <TaskInput+0x118>)
 8008276:	6822      	ldr	r2, [r4, #0]
 8008278:	b15a      	cbz	r2, 8008292 <TaskInput+0x46>
    printf("\010 \010"); /* Obliterate character */
 800827a:	483b      	ldr	r0, [pc, #236]	; (8008368 <TaskInput+0x11c>)
 800827c:	f7f8 fa6e 	bl	800075c <printf>
    buf--;     /* Then remove it from the buffer */
 8008280:	4a3a      	ldr	r2, [pc, #232]	; (800836c <TaskInput+0x120>)
 8008282:	6813      	ldr	r3, [r2, #0]
 8008284:	3b01      	subs	r3, #1
 8008286:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	3b01      	subs	r3, #1
 800828c:	6023      	str	r3, [r4, #0]
}
 800828e:	b003      	add	sp, #12
 8008290:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if(c == '!') { /* '!' repeats the last command */
 8008292:	2b21      	cmp	r3, #33	; 0x21
 8008294:	d139      	bne.n	800830a <TaskInput+0xbe>
    if(saved) {  /* But only if we have something saved */
 8008296:	4b36      	ldr	r3, [pc, #216]	; (8008370 <TaskInput+0x124>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0f7      	beq.n	800828e <TaskInput+0x42>
      strcpy(input,input_b);  /* Restore the command */
 800829e:	4c35      	ldr	r4, [pc, #212]	; (8008374 <TaskInput+0x128>)
 80082a0:	4935      	ldr	r1, [pc, #212]	; (8008378 <TaskInput+0x12c>)
 80082a2:	4620      	mov	r0, r4
 80082a4:	f7f8 fb96 	bl	80009d4 <strcpy>
      printf("%s",input);
 80082a8:	4621      	mov	r1, r4
 80082aa:	4834      	ldr	r0, [pc, #208]	; (800837c <TaskInput+0x130>)
 80082ac:	f7f8 fa56 	bl	800075c <printf>
      count = strlen(input);
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7f8 fc05 	bl	8000ac0 <strlen>
 80082b6:	4b2b      	ldr	r3, [pc, #172]	; (8008364 <TaskInput+0x118>)
 80082b8:	6018      	str	r0, [r3, #0]
      buf = input+count;
 80082ba:	4b2c      	ldr	r3, [pc, #176]	; (800836c <TaskInput+0x120>)
 80082bc:	4404      	add	r4, r0
 80082be:	601c      	str	r4, [r3, #0]
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 80082c0:	4e28      	ldr	r6, [pc, #160]	; (8008364 <TaskInput+0x118>)
 80082c2:	4c2a      	ldr	r4, [pc, #168]	; (800836c <TaskInput+0x120>)
    printf("\n");
 80082c4:	200a      	movs	r0, #10
 80082c6:	f7f8 fa61 	bl	800078c <putchar>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	6830      	ldr	r0, [r6, #0]
 80082ce:	2200      	movs	r2, #0
 80082d0:	4619      	mov	r1, r3
 80082d2:	eba0 0c03 	sub.w	ip, r0, r3
 80082d6:	4696      	mov	lr, r2
 80082d8:	eb01 070c 	add.w	r7, r1, ip
 80082dc:	2f4f      	cmp	r7, #79	; 0x4f
 80082de:	d938      	bls.n	8008352 <TaskInput+0x106>
 80082e0:	2850      	cmp	r0, #80	; 0x50
 80082e2:	f1c0 0150 	rsb	r1, r0, #80	; 0x50
 80082e6:	bf88      	it	hi
 80082e8:	2100      	movhi	r1, #0
 80082ea:	440b      	add	r3, r1
 80082ec:	b102      	cbz	r2, 80082f0 <TaskInput+0xa4>
 80082ee:	6023      	str	r3, [r4, #0]
    count = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	6033      	str	r3, [r6, #0]
    parse(input, sizeof(input), Commands);
 80082f4:	4b22      	ldr	r3, [pc, #136]	; (8008380 <TaskInput+0x134>)
 80082f6:	4e1f      	ldr	r6, [pc, #124]	; (8008374 <TaskInput+0x128>)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	2150      	movs	r1, #80	; 0x50
 80082fc:	4630      	mov	r0, r6
 80082fe:	f7ff ff29 	bl	8008154 <parse>
    printPrompt = 1;
 8008302:	2301      	movs	r3, #1
    buf = input;
 8008304:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8008306:	602b      	str	r3, [r5, #0]
 8008308:	e7c1      	b.n	800828e <TaskInput+0x42>
  } else if(isprint((unsigned int)c)) {
 800830a:	4a1e      	ldr	r2, [pc, #120]	; (8008384 <TaskInput+0x138>)
 800830c:	5c9a      	ldrb	r2, [r3, r2]
 800830e:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 8008312:	d011      	beq.n	8008338 <TaskInput+0xec>
    if(count >= sizeof(input)) {
 8008314:	4913      	ldr	r1, [pc, #76]	; (8008364 <TaskInput+0x118>)
 8008316:	680a      	ldr	r2, [r1, #0]
 8008318:	2a4f      	cmp	r2, #79	; 0x4f
 800831a:	d903      	bls.n	8008324 <TaskInput+0xd8>
      printf("\x07"); /* Beep */
 800831c:	2007      	movs	r0, #7
      printf("%c",c);
 800831e:	f7f8 fa35 	bl	800078c <putchar>
 8008322:	e7b4      	b.n	800828e <TaskInput+0x42>
      *buf++ = c;
 8008324:	4c11      	ldr	r4, [pc, #68]	; (800836c <TaskInput+0x120>)
 8008326:	6820      	ldr	r0, [r4, #0]
      count++;
 8008328:	3201      	adds	r2, #1
      *buf++ = c;
 800832a:	1c45      	adds	r5, r0, #1
 800832c:	7003      	strb	r3, [r0, #0]
      printf("%c",c);
 800832e:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 8008332:	6025      	str	r5, [r4, #0]
      count++;
 8008334:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8008336:	e7f2      	b.n	800831e <TaskInput+0xd2>
  } else if(c == '\r') {
 8008338:	2b0d      	cmp	r3, #13
 800833a:	d1a8      	bne.n	800828e <TaskInput+0x42>
    *buf = '\0';
 800833c:	4b0b      	ldr	r3, [pc, #44]	; (800836c <TaskInput+0x120>)
    strcpy(input_b,input);
 800833e:	490d      	ldr	r1, [pc, #52]	; (8008374 <TaskInput+0x128>)
    *buf = '\0';
 8008340:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 8008342:	480d      	ldr	r0, [pc, #52]	; (8008378 <TaskInput+0x12c>)
    *buf = '\0';
 8008344:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8008346:	f7f8 fb45 	bl	80009d4 <strcpy>
    saved = 1;
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <TaskInput+0x124>)
 800834c:	2201      	movs	r2, #1
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	e7b6      	b.n	80082c0 <TaskInput+0x74>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8008352:	f801 eb01 	strb.w	lr, [r1], #1
 8008356:	2201      	movs	r2, #1
 8008358:	e7be      	b.n	80082d8 <TaskInput+0x8c>
 800835a:	bf00      	nop
 800835c:	200009c4 	.word	0x200009c4
 8008360:	0800dc99 	.word	0x0800dc99
 8008364:	20000c94 	.word	0x20000c94
 8008368:	0800dca0 	.word	0x0800dca0
 800836c:	200009c0 	.word	0x200009c0
 8008370:	20000d38 	.word	0x20000d38
 8008374:	20000c98 	.word	0x20000c98
 8008378:	20000ce8 	.word	0x20000ce8
 800837c:	0800df95 	.word	0x0800df95
 8008380:	200009bc 	.word	0x200009bc
 8008384:	0800d2ad 	.word	0x0800d2ad

08008388 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8008388:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800838a:	4908      	ldr	r1, [pc, #32]	; (80083ac <fetch_uint32_arg+0x24>)
{
 800838c:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 800838e:	2000      	movs	r0, #0
 8008390:	f7f8 fc04 	bl	8000b9c <strtok>
  if(p == NULL) {
 8008394:	b130      	cbz	r0, 80083a4 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8008396:	2200      	movs	r2, #0
 8008398:	4611      	mov	r1, r2
 800839a:	f7f8 fce9 	bl	8000d70 <strtoul>
 800839e:	6020      	str	r0, [r4, #0]
  return 0;
 80083a0:	2000      	movs	r0, #0
}     
 80083a2:	bd10      	pop	{r4, pc}
    return -1;
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083a8:	e7fb      	b.n	80083a2 <fetch_uint32_arg+0x1a>
 80083aa:	bf00      	nop
 80083ac:	0800dc17 	.word	0x0800dc17

080083b0 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80083b0:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80083b2:	4906      	ldr	r1, [pc, #24]	; (80083cc <fetch_string_arg+0x1c>)
{
 80083b4:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 80083b6:	2000      	movs	r0, #0
 80083b8:	f7f8 fbf0 	bl	8000b9c <strtok>
  if(p == NULL) {
 80083bc:	b110      	cbz	r0, 80083c4 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 80083be:	6020      	str	r0, [r4, #0]
  return 0;
 80083c0:	2000      	movs	r0, #0
}
 80083c2:	bd10      	pop	{r4, pc}
    return -1;
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083c8:	e7fb      	b.n	80083c2 <fetch_string_arg+0x12>
 80083ca:	bf00      	nop
 80083cc:	0800dc17 	.word	0x0800dc17

080083d0 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	b089      	sub	sp, #36	; 0x24
 80083d6:	e9cd 0200 	strd	r0, r2, [sp]
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 80083da:	460c      	mov	r4, r1
 80083dc:	2900      	cmp	r1, #0
 80083de:	d040      	beq.n	8008462 <DumpBuffer+0x92>

  p = buffer;
  bufp = buf;
 80083e0:	af03      	add	r7, sp, #12
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
 80083e2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8008478 <DumpBuffer+0xa8>
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 80083e6:	f8df a094 	ldr.w	sl, [pc, #148]	; 800847c <DumpBuffer+0xac>
  for(i=0; i<count; i++) {
 80083ea:	2500      	movs	r5, #0
 80083ec:	463e      	mov	r6, r7
 80083ee:	9b01      	ldr	r3, [sp, #4]
    if((i% BYTES_PER_LINE) == 0) {
 80083f0:	f015 0b0f 	ands.w	fp, r5, #15
 80083f4:	eb03 0105 	add.w	r1, r3, r5
 80083f8:	d136      	bne.n	8008468 <DumpBuffer+0x98>
      printf("%08x:",(unsigned int)address);
 80083fa:	4648      	mov	r0, r9
 80083fc:	f7f8 f9ae 	bl	800075c <printf>
      bufp = buf;
 8008400:	46b0      	mov	r8, r6
    c = *p++;
 8008402:	9b00      	ldr	r3, [sp, #0]
 8008404:	5d58      	ldrb	r0, [r3, r5]
    if(isprint(c)) {
 8008406:	4b19      	ldr	r3, [pc, #100]	; (800846c <DumpBuffer+0x9c>)
 8008408:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 800840c:	4647      	mov	r7, r8
      *bufp++ = '.';
 800840e:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 8008412:	4601      	mov	r1, r0
      *bufp++ = '.';
 8008414:	bf08      	it	eq
 8008416:	202e      	moveq	r0, #46	; 0x2e
 8008418:	f807 0b01 	strb.w	r0, [r7], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 800841c:	4650      	mov	r0, sl
 800841e:	f7f8 f99d 	bl	800075c <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8008422:	f1bb 0f0f 	cmp.w	fp, #15
 8008426:	d106      	bne.n	8008436 <DumpBuffer+0x66>
      *bufp = '\0';  /* NULL terminate buffer */
 8008428:	2100      	movs	r1, #0
 800842a:	f888 1001 	strb.w	r1, [r8, #1]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 800842e:	4810      	ldr	r0, [pc, #64]	; (8008470 <DumpBuffer+0xa0>)
 8008430:	4631      	mov	r1, r6
 8008432:	f7f8 f993 	bl	800075c <printf>
  for(i=0; i<count; i++) {
 8008436:	3501      	adds	r5, #1
 8008438:	42ac      	cmp	r4, r5
 800843a:	d1d8      	bne.n	80083ee <DumpBuffer+0x1e>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 800843c:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 800843e:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 8008442:	f888 5001 	strb.w	r5, [r8, #1]
  if(count % BYTES_PER_LINE) {
 8008446:	d00c      	beq.n	8008462 <DumpBuffer+0x92>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
      printf("   ");
 8008448:	4f0a      	ldr	r7, [pc, #40]	; (8008474 <DumpBuffer+0xa4>)
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800844a:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 800844e:	4638      	mov	r0, r7
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8008450:	3501      	adds	r5, #1
      printf("   ");
 8008452:	f7f8 f983 	bl	800075c <printf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8008456:	42a5      	cmp	r5, r4
 8008458:	d3f9      	bcc.n	800844e <DumpBuffer+0x7e>
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 800845a:	4805      	ldr	r0, [pc, #20]	; (8008470 <DumpBuffer+0xa0>)
 800845c:	4631      	mov	r1, r6
 800845e:	f7f8 f97d 	bl	800075c <printf>
  }



}
 8008462:	b009      	add	sp, #36	; 0x24
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	46b8      	mov	r8, r7
 800846a:	e7ca      	b.n	8008402 <DumpBuffer+0x32>
 800846c:	0800d2ad 	.word	0x0800d2ad
 8008470:	0800dcb6 	.word	0x0800dcb6
 8008474:	0800dcbc 	.word	0x0800dcbc
 8008478:	0800dcaa 	.word	0x0800dcaa
 800847c:	0800dcb0 	.word	0x0800dcb0

08008480 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8008480:	2801      	cmp	r0, #1
{
 8008482:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return;
 8008484:	d01d      	beq.n	80084c2 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8008486:	2802      	cmp	r0, #2
 8008488:	4d0e      	ldr	r5, [pc, #56]	; (80084c4 <CmdDump+0x44>)
 800848a:	4c0f      	ldr	r4, [pc, #60]	; (80084c8 <CmdDump+0x48>)
 800848c:	d109      	bne.n	80084a2 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 800848e:	480f      	ldr	r0, [pc, #60]	; (80084cc <CmdDump+0x4c>)
 8008490:	f7f8 f9b8 	bl	8000804 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8008494:	682a      	ldr	r2, [r5, #0]
 8008496:	6821      	ldr	r1, [r4, #0]
 8008498:	480d      	ldr	r0, [pc, #52]	; (80084d0 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 800849a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("Current address is 0x%08x, current count is 0x%x\n",
 800849e:	f7f8 b95d 	b.w	800075c <printf>
  rc = fetch_uint32_arg(&address);
 80084a2:	4620      	mov	r0, r4
 80084a4:	f7ff ff70 	bl	8008388 <fetch_uint32_arg>
  if(rc == 0) {
 80084a8:	b910      	cbnz	r0, 80084b0 <CmdDump+0x30>
    fetch_uint32_arg(&count);
 80084aa:	4628      	mov	r0, r5
 80084ac:	f7ff ff6c 	bl	8008388 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 80084b0:	6822      	ldr	r2, [r4, #0]
 80084b2:	6829      	ldr	r1, [r5, #0]
 80084b4:	4610      	mov	r0, r2
 80084b6:	f7ff ff8b 	bl	80083d0 <DumpBuffer>
  address = address+count;
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	682a      	ldr	r2, [r5, #0]
 80084be:	4413      	add	r3, r2
 80084c0:	6023      	str	r3, [r4, #0]
}
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	200009c8 	.word	0x200009c8
 80084c8:	20000d3c 	.word	0x20000d3c
 80084cc:	0800dcc0 	.word	0x0800dcc0
 80084d0:	0800de58 	.word	0x0800de58

080084d4 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 80084d4:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 80084d6:	4b09      	ldr	r3, [pc, #36]	; (80084fc <_sbrk_r+0x28>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	b90a      	cbnz	r2, 80084e0 <_sbrk_r+0xc>
                heap_end = &end;
 80084dc:	4a08      	ldr	r2, [pc, #32]	; (8008500 <_sbrk_r+0x2c>)
 80084de:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 80084e0:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 80084e2:	466a      	mov	r2, sp
 80084e4:	4401      	add	r1, r0
 80084e6:	4291      	cmp	r1, r2
 80084e8:	d906      	bls.n	80084f8 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 80084ea:	f7f8 f895 	bl	8000618 <__errno>
 80084ee:	230c      	movs	r3, #12
 80084f0:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 80084f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }

        heap_end += incr;

        return (caddr_t) prev_heap_end;
}
 80084f6:	bd08      	pop	{r3, pc}
        heap_end += incr;
 80084f8:	6019      	str	r1, [r3, #0]
        return (caddr_t) prev_heap_end;
 80084fa:	e7fc      	b.n	80084f6 <_sbrk_r+0x22>
 80084fc:	20000d40 	.word	0x20000d40
 8008500:	20001df4 	.word	0x20001df4

08008504 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8008504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008508:	4770      	bx	lr

0800850a <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 800850a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800850e:	6053      	str	r3, [r2, #4]
        return 0;
}
 8008510:	2000      	movs	r0, #0
 8008512:	4770      	bx	lr

08008514 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8008514:	2001      	movs	r0, #1
 8008516:	4770      	bx	lr

08008518 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8008518:	2000      	movs	r0, #0
 800851a:	4770      	bx	lr

0800851c <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 800851c:	4b1b      	ldr	r3, [pc, #108]	; (800858c <USBD_CDC_DataIn+0x70>)
{
 800851e:	b570      	push	{r4, r5, r6, lr}
  rc = (*USBDDataIn)(pdev,epnum);
 8008520:	681b      	ldr	r3, [r3, #0]
{
 8008522:	4604      	mov	r4, r0
  rc = (*USBDDataIn)(pdev,epnum);
 8008524:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 8008526:	4b1a      	ldr	r3, [pc, #104]	; (8008590 <USBD_CDC_DataIn+0x74>)
 8008528:	429c      	cmp	r4, r3
  rc = (*USBDDataIn)(pdev,epnum);
 800852a:	4606      	mov	r6, r0
  if(pdev == &hUSBDDevice) {
 800852c:	d12c      	bne.n	8008588 <USBD_CDC_DataIn+0x6c>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 800852e:	4c19      	ldr	r4, [pc, #100]	; (8008594 <USBD_CDC_DataIn+0x78>)
 8008530:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
    count = TerminalState[index].outSending;
 8008534:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 8008538:	b299      	uxth	r1, r3
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 800853a:	fa11 f282 	uxtah	r2, r1, r2
 800853e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008542:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
    TerminalState[index].outCount -= count;
 8008546:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 800854a:	1a5b      	subs	r3, r3, r1
 800854c:	b29b      	uxth	r3, r3
 800854e:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8008558:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
    count = TerminalState[index].outCount;
 800855c:	f8b4 210a 	ldrh.w	r2, [r4, #266]	; 0x10a
 8008560:	b292      	uxth	r2, r2
    tail = TerminalState[index].outTail;
 8008562:	b289      	uxth	r1, r1
    if(count != 0) {
 8008564:	b182      	cbz	r2, 8008588 <USBD_CDC_DataIn+0x6c>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 8008566:	188b      	adds	r3, r1, r2
 8008568:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 800856a:	bf88      	it	hi
 800856c:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008570:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8008572:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008574:	462a      	mov	r2, r5
 8008576:	4421      	add	r1, r4
 8008578:	4805      	ldr	r0, [pc, #20]	; (8008590 <USBD_CDC_DataIn+0x74>)
 800857a:	f003 fac5 	bl	800bb08 <USBD_CDC_SetTxBuffer>
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 800857e:	4804      	ldr	r0, [pc, #16]	; (8008590 <USBD_CDC_DataIn+0x74>)
 8008580:	f003 fad0 	bl	800bb24 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 8008584:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 8008588:	4630      	mov	r0, r6
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	20000e68 	.word	0x20000e68
 8008590:	20000e6c 	.word	0x20000e6c
 8008594:	20000d44 	.word	0x20000d44

08008598 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8008598:	e92d 41e0 	stmdb	sp!, {r5, r6, r7, r8, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 800859c:	4601      	mov	r1, r0
{
 800859e:	b087      	sub	sp, #28
  if(mode != CMD_INTERACTIVE) return;
 80085a0:	b9c0      	cbnz	r0, 80085d4 <CmdStats+0x3c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80085a2:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 80085a4:	480d      	ldr	r0, [pc, #52]	; (80085dc <CmdStats+0x44>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80085a6:	9104      	str	r1, [sp, #16]
    s[i] = TerminalState[i].stats;
 80085a8:	e9d0 5344 	ldrd	r5, r3, [r0, #272]	; 0x110
 80085ac:	e9d0 6746 	ldrd	r6, r7, [r0, #280]	; 0x118
 80085b0:	f8d0 8120 	ldr.w	r8, [r0, #288]	; 0x120
 80085b4:	9305      	str	r3, [sp, #20]
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80085b6:	2214      	movs	r2, #20
 80085b8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80085bc:	f7f8 f86c 	bl	8000698 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 80085c0:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 80085c2:	4807      	ldr	r0, [pc, #28]	; (80085e0 <CmdStats+0x48>)
 80085c4:	9b05      	ldr	r3, [sp, #20]
 80085c6:	9904      	ldr	r1, [sp, #16]
 80085c8:	9600      	str	r6, [sp, #0]
 80085ca:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80085ce:	462a      	mov	r2, r5
 80085d0:	f7f8 f8c4 	bl	800075c <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 80085d4:	b007      	add	sp, #28
 80085d6:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}
 80085da:	bf00      	nop
 80085dc:	20000d44 	.word	0x20000d44
 80085e0:	0800dea6 	.word	0x0800dea6

080085e4 <TerminalInit>:
{
 80085e4:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 80085e6:	4c17      	ldr	r4, [pc, #92]	; (8008644 <TerminalInit+0x60>)
 80085e8:	6820      	ldr	r0, [r4, #0]
 80085ea:	2300      	movs	r3, #0
 80085ec:	4619      	mov	r1, r3
 80085ee:	2202      	movs	r2, #2
 80085f0:	6840      	ldr	r0, [r0, #4]
 80085f2:	f7f8 f90f 	bl	8000814 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80085f6:	6820      	ldr	r0, [r4, #0]
 80085f8:	2300      	movs	r3, #0
 80085fa:	4619      	mov	r1, r3
 80085fc:	2202      	movs	r2, #2
 80085fe:	6880      	ldr	r0, [r0, #8]
 8008600:	f7f8 f908 	bl	8000814 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8008604:	6820      	ldr	r0, [r4, #0]
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8008606:	4c10      	ldr	r4, [pc, #64]	; (8008648 <TerminalInit+0x64>)
  setvbuf(stderr, NULL, _IONBF, 0);
 8008608:	68c0      	ldr	r0, [r0, #12]
 800860a:	2300      	movs	r3, #0
 800860c:	4619      	mov	r1, r3
 800860e:	2202      	movs	r2, #2
 8008610:	f7f8 f900 	bl	8000814 <setvbuf>
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8008614:	490d      	ldr	r1, [pc, #52]	; (800864c <TerminalInit+0x68>)
 8008616:	2200      	movs	r2, #0
 8008618:	4620      	mov	r0, r4
 800861a:	f002 feab 	bl	800b374 <USBD_Init>
  USBDDataIn = USBD_CDC.DataIn;
 800861e:	490c      	ldr	r1, [pc, #48]	; (8008650 <TerminalInit+0x6c>)
 8008620:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <TerminalInit+0x70>)
 8008622:	694a      	ldr	r2, [r1, #20]
 8008624:	601a      	str	r2, [r3, #0]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8008626:	4620      	mov	r0, r4
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8008628:	4b0b      	ldr	r3, [pc, #44]	; (8008658 <TerminalInit+0x74>)
 800862a:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 800862c:	f002 feb7 	bl	800b39e <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 8008630:	4620      	mov	r0, r4
 8008632:	490a      	ldr	r1, [pc, #40]	; (800865c <TerminalInit+0x78>)
 8008634:	f003 fa61 	bl	800bafa <USBD_CDC_RegisterInterface>
  USBD_Start(&hUSBDDevice);
 8008638:	4620      	mov	r0, r4
}
 800863a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUSBDDevice);
 800863e:	f002 beb5 	b.w	800b3ac <USBD_Start>
 8008642:	bf00      	nop
 8008644:	20000010 	.word	0x20000010
 8008648:	20000e6c 	.word	0x20000e6c
 800864c:	20000afc 	.word	0x20000afc
 8008650:	200009d0 	.word	0x200009d0
 8008654:	20000e68 	.word	0x20000e68
 8008658:	0800851d 	.word	0x0800851d
 800865c:	20000b20 	.word	0x20000b20

08008660 <TerminalRead>:
{
 8008660:	b530      	push	{r4, r5, lr}
 8008662:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8008664:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 8008666:	4c10      	ldr	r4, [pc, #64]	; (80086a8 <TerminalRead+0x48>)
 8008668:	f44f 7592 	mov.w	r5, #292	; 0x124
  count = 0;
 800866c:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 800866e:	fb05 4303 	mla	r3, r5, r3, r4
 8008672:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 8008676:	b2a4      	uxth	r4, r4
 8008678:	b10c      	cbz	r4, 800867e <TerminalRead+0x1e>
 800867a:	4290      	cmp	r0, r2
 800867c:	d101      	bne.n	8008682 <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 800867e:	b662      	cpsie	i
}
 8008680:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 8008682:	f8b3 4082 	ldrh.w	r4, [r3, #130]	; 0x82
 8008686:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8008688:	5d1d      	ldrb	r5, [r3, r4]
 800868a:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 800868c:	3401      	adds	r4, #1
 800868e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8008692:	f8a3 4082 	strh.w	r4, [r3, #130]	; 0x82
    TerminalState[index].inCount--;
 8008696:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 800869a:	3c01      	subs	r4, #1
 800869c:	b2a4      	uxth	r4, r4
 800869e:	f8a3 4084 	strh.w	r4, [r3, #132]	; 0x84
    count++;
 80086a2:	3001      	adds	r0, #1
 80086a4:	e7e5      	b.n	8008672 <TerminalRead+0x12>
 80086a6:	bf00      	nop
 80086a8:	20000d44 	.word	0x20000d44

080086ac <_read_r>:
{
 80086ac:	4611      	mov	r1, r2
  count = TerminalRead(0, (uint8_t *)ptr, len);
 80086ae:	2000      	movs	r0, #0
 80086b0:	461a      	mov	r2, r3
 80086b2:	f7ff bfd5 	b.w	8008660 <TerminalRead>

080086b6 <TerminalReadNonBlock>:
{
 80086b6:	b508      	push	{r3, lr}
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 80086b8:	2201      	movs	r2, #1
 80086ba:	f7ff ffd1 	bl	8008660 <TerminalRead>
}
 80086be:	fab0 f080 	clz	r0, r0
 80086c2:	0940      	lsrs	r0, r0, #5
 80086c4:	bd08      	pop	{r3, pc}

080086c6 <TerminalReadAnyNonBlock>:
{
 80086c6:	4601      	mov	r1, r0
 80086c8:	b508      	push	{r3, lr}
    rc = TerminalReadNonBlock(i, c);
 80086ca:	2000      	movs	r0, #0
 80086cc:	f7ff fff3 	bl	80086b6 <TerminalReadNonBlock>
}
 80086d0:	3800      	subs	r0, #0
 80086d2:	bf18      	it	ne
 80086d4:	2001      	movne	r0, #1
 80086d6:	bd08      	pop	{r3, pc}

080086d8 <TerminalOutputBufferWrite>:
{
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	4d37      	ldr	r5, [pc, #220]	; (80087b8 <TerminalOutputBufferWrite+0xe0>)
 80086dc:	f44f 7392 	mov.w	r3, #292	; 0x124
  if(len >= TERMINALBUFFERSIZE) {
 80086e0:	2a7f      	cmp	r2, #127	; 0x7f
    TerminalState[index].stats.writeTooBig++;
 80086e2:	fb03 5300 	mla	r3, r3, r0, r5
  if(len >= TERMINALBUFFERSIZE) {
 80086e6:	d906      	bls.n	80086f6 <TerminalOutputBufferWrite+0x1e>
    TerminalState[index].stats.writeTooBig++;
 80086e8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80086ec:	3201      	adds	r2, #1
 80086ee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 80086f2:	2001      	movs	r0, #1
}
 80086f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80086f6:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 80086fa:	fa12 f484 	uxtah	r4, r2, r4
 80086fe:	2c7f      	cmp	r4, #127	; 0x7f
    TerminalState[index].stats.writeBlocked++;
 8008700:	bf82      	ittt	hi
 8008702:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8008706:	3401      	addhi	r4, #1
 8008708:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 800870c:	f44f 7392 	mov.w	r3, #292	; 0x124
 8008710:	fb03 5300 	mla	r3, r3, r0, r5
 8008714:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8008718:	fa12 f484 	uxtah	r4, r2, r4
 800871c:	2c7f      	cmp	r4, #127	; 0x7f
 800871e:	d8f9      	bhi.n	8008714 <TerminalOutputBufferWrite+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 8008720:	b672      	cpsid	i
  TerminalState[index].stats.written += len;  /* gather statistics */
 8008722:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8008726:	4414      	add	r4, r2
 8008728:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800872c:	f44f 7492 	mov.w	r4, #292	; 0x124
 8008730:	440a      	add	r2, r1
 8008732:	fb04 5400 	mla	r4, r4, r0, r5
  while((len != 0) 
 8008736:	4291      	cmp	r1, r2
 8008738:	d004      	beq.n	8008744 <TerminalOutputBufferWrite+0x6c>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800873a:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 800873e:	b29b      	uxth	r3, r3
 8008740:	2b7f      	cmp	r3, #127	; 0x7f
 8008742:	d925      	bls.n	8008790 <TerminalOutputBufferWrite+0xb8>
  tail = TerminalState[index].outTail;
 8008744:	f44f 7292 	mov.w	r2, #292	; 0x124
 8008748:	fb02 5200 	mla	r2, r2, r0, r5
 800874c:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
  count = TerminalState[index].outCount;
 8008750:	f8b2 210a 	ldrh.w	r2, [r2, #266]	; 0x10a
 8008754:	b292      	uxth	r2, r2
  tail = TerminalState[index].outTail;
 8008756:	b299      	uxth	r1, r3
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8008758:	fa12 f383 	uxtah	r3, r2, r3
 800875c:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 800875e:	bf88      	it	hi
 8008760:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
  switch(index) {
 8008764:	b988      	cbnz	r0, 800878a <TerminalOutputBufferWrite+0xb2>
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8008766:	4e15      	ldr	r6, [pc, #84]	; (80087bc <TerminalOutputBufferWrite+0xe4>)
 8008768:	f896 31fc 	ldrb.w	r3, [r6, #508]	; 0x1fc
 800876c:	2b03      	cmp	r3, #3
 800876e:	d10c      	bne.n	800878a <TerminalOutputBufferWrite+0xb2>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008770:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8008772:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008774:	4622      	mov	r2, r4
 8008776:	4429      	add	r1, r5
 8008778:	4630      	mov	r0, r6
 800877a:	f003 f9c5 	bl	800bb08 <USBD_CDC_SetTxBuffer>
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 800877e:	4630      	mov	r0, r6
 8008780:	f003 f9d0 	bl	800bb24 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8008784:	b908      	cbnz	r0, 800878a <TerminalOutputBufferWrite+0xb2>
	TerminalState[index].outSending = count;
 8008786:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
 800878a:	b662      	cpsie	i
 800878c:	2000      	movs	r0, #0
 800878e:	e7b1      	b.n	80086f4 <TerminalOutputBufferWrite+0x1c>
    head = TerminalState[index].outHead;
 8008790:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8008794:	f811 7b01 	ldrb.w	r7, [r1], #1
 8008798:	fa14 f683 	uxtah	r6, r4, r3
    TerminalState[index].outHead = TERMINALINCR(head);
 800879c:	3301      	adds	r3, #1
 800879e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a2:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
    TerminalState[index].outCount++;
 80087a6:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
    TerminalState[index].outBuffer[head] = *p++;
 80087aa:	f886 7086 	strb.w	r7, [r6, #134]	; 0x86
    TerminalState[index].outCount++;
 80087ae:	3301      	adds	r3, #1
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    len--;
 80087b6:	e7be      	b.n	8008736 <TerminalOutputBufferWrite+0x5e>
 80087b8:	20000d44 	.word	0x20000d44
 80087bc:	20000e6c 	.word	0x20000e6c

080087c0 <_write_r>:
{
 80087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 80087c4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80087fc <_write_r+0x3c>
{
 80087c8:	461d      	mov	r5, r3
 80087ca:	4614      	mov	r4, r2
 80087cc:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 80087ce:	42bc      	cmp	r4, r7
 80087d0:	4626      	mov	r6, r4
 80087d2:	d102      	bne.n	80087da <_write_r+0x1a>
}
 80087d4:	4628      	mov	r0, r5
 80087d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*ptr == '\n') {
 80087da:	7833      	ldrb	r3, [r6, #0]
 80087dc:	2b0a      	cmp	r3, #10
 80087de:	f104 0401 	add.w	r4, r4, #1
 80087e2:	d104      	bne.n	80087ee <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 80087e4:	2201      	movs	r2, #1
 80087e6:	4641      	mov	r1, r8
 80087e8:	2000      	movs	r0, #0
 80087ea:	f7ff ff75 	bl	80086d8 <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 80087ee:	2201      	movs	r2, #1
 80087f0:	4631      	mov	r1, r6
 80087f2:	2000      	movs	r0, #0
 80087f4:	f7ff ff70 	bl	80086d8 <TerminalOutputBufferWrite>
    count--;
 80087f8:	e7e9      	b.n	80087ce <_write_r+0xe>
 80087fa:	bf00      	nop
 80087fc:	0800dc1c 	.word	0x0800dc1c

08008800 <TerminalInputBufferWrite>:
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8008800:	4b17      	ldr	r3, [pc, #92]	; (8008860 <TerminalInputBufferWrite+0x60>)
{
 8008802:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8008804:	f44f 7492 	mov.w	r4, #292	; 0x124
 8008808:	fb04 3000 	mla	r0, r4, r0, r3
 800880c:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8008810:	fa12 f383 	uxtah	r3, r2, r3
 8008814:	2b7f      	cmp	r3, #127	; 0x7f
 8008816:	d906      	bls.n	8008826 <TerminalInputBufferWrite+0x26>
    TerminalState[index].stats.receiveTooBig++;
 8008818:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 800881c:	3301      	adds	r3, #1
 800881e:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    return 1;
 8008822:	2001      	movs	r0, #1
}
 8008824:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8008826:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800882a:	4413      	add	r3, r2
 800882c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
  while(len != 0) {
 8008830:	440a      	add	r2, r1
 8008832:	4291      	cmp	r1, r2
 8008834:	d101      	bne.n	800883a <TerminalInputBufferWrite+0x3a>
  return 0;
 8008836:	2000      	movs	r0, #0
 8008838:	e7f4      	b.n	8008824 <TerminalInputBufferWrite+0x24>
    head = TerminalState[index].inHead;
 800883a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inBuffer[head] = *p++;
 800883e:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 8008842:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8008844:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 8008846:	3301      	adds	r3, #1
 8008848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800884c:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inCount++;
 8008850:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8008854:	3301      	adds	r3, #1
 8008856:	b29b      	uxth	r3, r3
 8008858:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
    len--;
 800885c:	e7e9      	b.n	8008832 <TerminalInputBufferWrite+0x32>
 800885e:	bf00      	nop
 8008860:	20000d44 	.word	0x20000d44

08008864 <USB_LP_CAN_RX0_IRQHandler>:
  HAL_PCD_IRQHandler(&hpcd);
 8008864:	4801      	ldr	r0, [pc, #4]	; (800886c <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8008866:	f001 bc9d 	b.w	800a1a4 <HAL_PCD_IRQHandler>
 800886a:	bf00      	nop
 800886c:	200010ac 	.word	0x200010ac

08008870 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8008870:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8008872:	4a1c      	ldr	r2, [pc, #112]	; (80088e4 <Uncompress+0x74>)
{
 8008874:	b08a      	sub	sp, #40	; 0x28
 8008876:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8008878:	466c      	mov	r4, sp
 800887a:	f102 0620 	add.w	r6, r2, #32
 800887e:	6810      	ldr	r0, [r2, #0]
 8008880:	6851      	ldr	r1, [r2, #4]
 8008882:	4625      	mov	r5, r4
 8008884:	c503      	stmia	r5!, {r0, r1}
 8008886:	3208      	adds	r2, #8
 8008888:	42b2      	cmp	r2, r6
 800888a:	462c      	mov	r4, r5
 800888c:	d1f7      	bne.n	800887e <Uncompress+0xe>
 800888e:	6810      	ldr	r0, [r2, #0]
 8008890:	6028      	str	r0, [r5, #0]
 8008892:	8892      	ldrh	r2, [r2, #4]
 8008894:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 8008896:	4618      	mov	r0, r3
 8008898:	4d13      	ldr	r5, [pc, #76]	; (80088e8 <Uncompress+0x78>)
 800889a:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 800889e:	2100      	movs	r1, #0
 80088a0:	ba5b      	rev16	r3, r3
 80088a2:	b29b      	uxth	r3, r3
  i = 0;
 80088a4:	460c      	mov	r4, r1
 80088a6:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 80088a8:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 80088ac:	d103      	bne.n	80088b6 <Uncompress+0x46>
      data |= ((uint32_t)(*str++)) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 80088ae:	480e      	ldr	r0, [pc, #56]	; (80088e8 <Uncompress+0x78>)
  buf[i]='\0';
 80088b0:	5532      	strb	r2, [r6, r4]
}
 80088b2:	b00a      	add	sp, #40	; 0x28
 80088b4:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 80088b6:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 80088b8:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 80088bc:	f3c2 4205 	ubfx	r2, r2, #16, #6
 80088c0:	3228      	adds	r2, #40	; 0x28
 80088c2:	446a      	add	r2, sp
    buf[i++] = c;
 80088c4:	3401      	adds	r4, #1
 80088c6:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 80088ca:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 80088ce:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 80088d0:	2a07      	cmp	r2, #7
      bits -= 8;
 80088d2:	bf81      	itttt	hi
 80088d4:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++)) << bits; 
 80088d6:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 80088da:	4091      	lslhi	r1, r2
 80088dc:	430b      	orrhi	r3, r1
 80088de:	4611      	mov	r1, r2
 80088e0:	e7e2      	b.n	80088a8 <Uncompress+0x38>
 80088e2:	bf00      	nop
 80088e4:	0800df50 	.word	0x0800df50
 80088e8:	20001090 	.word	0x20001090

080088ec <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 80088ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 80088ee:	4604      	mov	r4, r0
 80088f0:	b1f0      	cbz	r0, 8008930 <DecodeReadRegister+0x44>
  if(r == NULL) return 0;
 80088f2:	b1f9      	cbz	r1, 8008934 <DecodeReadRegister+0x48>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 80088f4:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 80088f6:	888a      	ldrh	r2, [r1, #4]
 80088f8:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 80088fa:	2d10      	cmp	r5, #16
 80088fc:	d005      	beq.n	800890a <DecodeReadRegister+0x1e>
 80088fe:	2d20      	cmp	r5, #32
 8008900:	d005      	beq.n	800890e <DecodeReadRegister+0x22>
 8008902:	2d08      	cmp	r5, #8
 8008904:	d105      	bne.n	8008912 <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8008906:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8008908:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 800890a:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 800890c:	e7fc      	b.n	8008908 <DecodeReadRegister+0x1c>
    val = *(uint32_t *)address;
 800890e:	58d0      	ldr	r0, [r2, r3]
    break;
 8008910:	e7fa      	b.n	8008908 <DecodeReadRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8008912:	6808      	ldr	r0, [r1, #0]
 8008914:	f7ff ffac 	bl	8008870 <Uncompress>
 8008918:	4629      	mov	r1, r5
 800891a:	4602      	mov	r2, r0
 800891c:	4806      	ldr	r0, [pc, #24]	; (8008938 <DecodeReadRegister+0x4c>)
 800891e:	f7f7 ff1d 	bl	800075c <printf>
    printf(" in periphral %s!\n",
 8008922:	6820      	ldr	r0, [r4, #0]
 8008924:	f7ff ffa4 	bl	8008870 <Uncompress>
 8008928:	4601      	mov	r1, r0
 800892a:	4804      	ldr	r0, [pc, #16]	; (800893c <DecodeReadRegister+0x50>)
 800892c:	f7f7 ff16 	bl	800075c <printf>
    return 0;
 8008930:	2000      	movs	r0, #0
 8008932:	e7e9      	b.n	8008908 <DecodeReadRegister+0x1c>
  if(p == NULL) return 0;
 8008934:	4608      	mov	r0, r1
 8008936:	e7e7      	b.n	8008908 <DecodeReadRegister+0x1c>
 8008938:	0800df76 	.word	0x0800df76
 800893c:	0800df98 	.word	0x0800df98

08008940 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8008940:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 8008942:	4604      	mov	r4, r0
 8008944:	b1f8      	cbz	r0, 8008986 <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 8008946:	b1f1      	cbz	r1, 8008986 <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8008948:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 800894a:	8888      	ldrh	r0, [r1, #4]
 800894c:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 800894e:	2d10      	cmp	r5, #16
 8008950:	d006      	beq.n	8008960 <DecodeWriteRegister+0x20>
 8008952:	2d20      	cmp	r5, #32
 8008954:	d006      	beq.n	8008964 <DecodeWriteRegister+0x24>
 8008956:	2d08      	cmp	r5, #8
 8008958:	d106      	bne.n	8008968 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 800895a:	54c2      	strb	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 800895c:	2000      	movs	r0, #0
}
 800895e:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8008960:	52c2      	strh	r2, [r0, r3]
    break;  
 8008962:	e7fb      	b.n	800895c <DecodeWriteRegister+0x1c>
    *(uint32_t *)address = val;
 8008964:	50c2      	str	r2, [r0, r3]
 8008966:	e7f9      	b.n	800895c <DecodeWriteRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8008968:	6808      	ldr	r0, [r1, #0]
 800896a:	f7ff ff81 	bl	8008870 <Uncompress>
 800896e:	4629      	mov	r1, r5
 8008970:	4602      	mov	r2, r0
 8008972:	4806      	ldr	r0, [pc, #24]	; (800898c <DecodeWriteRegister+0x4c>)
 8008974:	f7f7 fef2 	bl	800075c <printf>
    printf(" in periphral %s!\n",
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	f7ff ff79 	bl	8008870 <Uncompress>
 800897e:	4601      	mov	r1, r0
 8008980:	4803      	ldr	r0, [pc, #12]	; (8008990 <DecodeWriteRegister+0x50>)
 8008982:	f7f7 feeb 	bl	800075c <printf>
  if(p == NULL) return 1;
 8008986:	2001      	movs	r0, #1
 8008988:	e7e9      	b.n	800895e <DecodeWriteRegister+0x1e>
 800898a:	bf00      	nop
 800898c:	0800df76 	.word	0x0800df76
 8008990:	0800df98 	.word	0x0800df98

08008994 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8008994:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 8008996:	4604      	mov	r4, r0
{
 8008998:	b087      	sub	sp, #28
  if(f == NULL) return;
 800899a:	b1d0      	cbz	r0, 80089d2 <DecodeField+0x3e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800899c:	7942      	ldrb	r2, [r0, #5]
 800899e:	2301      	movs	r3, #1
 80089a0:	4093      	lsls	r3, r2
 80089a2:	7902      	ldrb	r2, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80089a4:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 80089a6:	40d1      	lsrs	r1, r2
 80089a8:	3b01      	subs	r3, #1
 80089aa:	400b      	ands	r3, r1
 80089ac:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80089ae:	f7ff ff5f 	bl	8008870 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 80089b2:	7965      	ldrb	r5, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80089b4:	4a08      	ldr	r2, [pc, #32]	; (80089d8 <DecodeField+0x44>)
 80089b6:	9b05      	ldr	r3, [sp, #20]
 80089b8:	4601      	mov	r1, r0
 80089ba:	4808      	ldr	r0, [pc, #32]	; (80089dc <DecodeField+0x48>)
 80089bc:	2d01      	cmp	r5, #1
 80089be:	bf98      	it	ls
 80089c0:	4602      	movls	r2, r0
 80089c2:	7920      	ldrb	r0, [r4, #4]
 80089c4:	9500      	str	r5, [sp, #0]
 80089c6:	e9cd 2001 	strd	r2, r0, [sp, #4]
 80089ca:	4805      	ldr	r0, [pc, #20]	; (80089e0 <DecodeField+0x4c>)
 80089cc:	461a      	mov	r2, r3
 80089ce:	f7f7 fec5 	bl	800075c <printf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 80089d2:	b007      	add	sp, #28
 80089d4:	bd30      	pop	{r4, r5, pc}
 80089d6:	bf00      	nop
 80089d8:	0800dfab 	.word	0x0800dfab
 80089dc:	0800dfb1 	.word	0x0800dfb1
 80089e0:	0800dfb7 	.word	0x0800dfb7

080089e4 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 80089e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089e6:	460f      	mov	r7, r1
 80089e8:	4615      	mov	r5, r2
 80089ea:	461e      	mov	r6, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 80089ec:	4604      	mov	r4, r0
 80089ee:	b180      	cbz	r0, 8008a12 <DecodeRegister+0x2e>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 80089f0:	6800      	ldr	r0, [r0, #0]
 80089f2:	f7ff ff3d 	bl	8008870 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 80089f6:	88a2      	ldrh	r2, [r4, #4]
 80089f8:	443a      	add	r2, r7
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 80089fa:	9201      	str	r2, [sp, #4]
 80089fc:	79a3      	ldrb	r3, [r4, #6]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	4601      	mov	r1, r0
 8008a02:	462b      	mov	r3, r5
 8008a04:	480e      	ldr	r0, [pc, #56]	; (8008a40 <DecodeRegister+0x5c>)
 8008a06:	462a      	mov	r2, r5
 8008a08:	f7f7 fea8 	bl	800075c <printf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8008a0c:	68a7      	ldr	r7, [r4, #8]
 8008a0e:	b19f      	cbz	r7, 8008a38 <DecodeRegister+0x54>
 8008a10:	b986      	cbnz	r6, 8008a34 <DecodeRegister+0x50>
  }
  if(decodeFields) {
    printf("\n");
  }

}
 8008a12:	b003      	add	sp, #12
 8008a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      DecodeField(f,val);
 8008a16:	4629      	mov	r1, r5
 8008a18:	f7ff ffbc 	bl	8008994 <DecodeField>
    for(i=0; i<r->numFields; i++) {
 8008a1c:	3601      	adds	r6, #1
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	429e      	cmp	r6, r3
 8008a22:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 8008a26:	d3f6      	bcc.n	8008a16 <DecodeRegister+0x32>
    printf("\n");
 8008a28:	200a      	movs	r0, #10
}
 8008a2a:	b003      	add	sp, #12
 8008a2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("\n");
 8008a30:	f7f7 beac 	b.w	800078c <putchar>
    for(i=0; i<r->numFields; i++) {
 8008a34:	2600      	movs	r6, #0
 8008a36:	e7f2      	b.n	8008a1e <DecodeRegister+0x3a>
  if(decodeFields) {
 8008a38:	2e00      	cmp	r6, #0
 8008a3a:	d0ea      	beq.n	8008a12 <DecodeRegister+0x2e>
 8008a3c:	e7f4      	b.n	8008a28 <DecodeRegister+0x44>
 8008a3e:	bf00      	nop
 8008a40:	0800dfe0 	.word	0x0800dfe0

08008a44 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8008a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a48:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	b160      	cbz	r0, 8008a68 <DecodePeripheral+0x24>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8008a4e:	6800      	ldr	r0, [r0, #0]
 8008a50:	f7ff ff0e 	bl	8008870 <Uncompress>
 8008a54:	6862      	ldr	r2, [r4, #4]
 8008a56:	4601      	mov	r1, r0
 8008a58:	480e      	ldr	r0, [pc, #56]	; (8008a94 <DecodePeripheral+0x50>)
 8008a5a:	f7f7 fe7f 	bl	800075c <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8008a5e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008a62:	f1b8 0f00 	cmp.w	r8, #0
 8008a66:	d112      	bne.n	8008a8e <DecodePeripheral+0x4a>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 8008a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f7ff ff3c 	bl	80088ec <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 8008a74:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 8008a76:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 8008a78:	4633      	mov	r3, r6
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	f7ff ffb2 	bl	80089e4 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8008a80:	3501      	adds	r5, #1
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	429d      	cmp	r5, r3
 8008a86:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8008a8a:	d3ef      	bcc.n	8008a6c <DecodePeripheral+0x28>
 8008a8c:	e7ec      	b.n	8008a68 <DecodePeripheral+0x24>
 8008a8e:	2500      	movs	r5, #0
 8008a90:	e7f7      	b.n	8008a82 <DecodePeripheral+0x3e>
 8008a92:	bf00      	nop
 8008a94:	0800e01b 	.word	0x0800e01b

08008a98 <DecodePrintPeripherals>:

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8008a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9c:	4604      	mov	r4, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8008a9e:	2009      	movs	r0, #9
 8008aa0:	f7f7 fe74 	bl	800078c <putchar>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8008aa4:	4e0e      	ldr	r6, [pc, #56]	; (8008ae0 <DecodePrintPeripherals+0x48>)
    if((p+1)->name != NULL) {
      col += printf(", ");
 8008aa6:	4f0f      	ldr	r7, [pc, #60]	; (8008ae4 <DecodePrintPeripherals+0x4c>)
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8008aa8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8008ae8 <DecodePrintPeripherals+0x50>
  col = 8;
 8008aac:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8008aae:	6820      	ldr	r0, [r4, #0]
 8008ab0:	b908      	cbnz	r0, 8008ab6 <DecodePrintPeripherals+0x1e>
      }
    }
  }
}
 8008ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8008ab6:	f7ff fedb 	bl	8008870 <Uncompress>
 8008aba:	4601      	mov	r1, r0
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7f7 fe4d 	bl	800075c <printf>
    if((p+1)->name != NULL) {
 8008ac2:	6923      	ldr	r3, [r4, #16]
    col += printf("%s",Uncompress(p->name));
 8008ac4:	4405      	add	r5, r0
    if((p+1)->name != NULL) {
 8008ac6:	b14b      	cbz	r3, 8008adc <DecodePrintPeripherals+0x44>
      col += printf(", ");
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7f7 fe47 	bl	800075c <printf>
 8008ace:	4405      	add	r5, r0
      if(col > 70) {
 8008ad0:	2d46      	cmp	r5, #70	; 0x46
 8008ad2:	d903      	bls.n	8008adc <DecodePrintPeripherals+0x44>
	printf("\n\t");
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	f7f7 fe41 	bl	800075c <printf>
	col = 8;
 8008ada:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8008adc:	3410      	adds	r4, #16
 8008ade:	e7e6      	b.n	8008aae <DecodePrintPeripherals+0x16>
 8008ae0:	0800df95 	.word	0x0800df95
 8008ae4:	0800dfb4 	.word	0x0800dfb4
 8008ae8:	0800e043 	.word	0x0800e043

08008aec <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8008aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af0:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8008af2:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8008af4:	460d      	mov	r5, r1
  printf("\t");
 8008af6:	f7f7 fe49 	bl	800078c <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8008afa:	4f12      	ldr	r7, [pc, #72]	; (8008b44 <DecodePrintRegisters+0x58>)
    if(count) {
      col += printf(", ");
 8008afc:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8008b48 <DecodePrintRegisters+0x5c>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8008b00:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8008b4c <DecodePrintRegisters+0x60>
 8008b04:	3d01      	subs	r5, #1
 8008b06:	3610      	adds	r6, #16
  col = 8;
 8008b08:	2408      	movs	r4, #8
  while(count--) {
 8008b0a:	1c6b      	adds	r3, r5, #1
 8008b0c:	d101      	bne.n	8008b12 <DecodePrintRegisters+0x26>
      }
    }
    r++;
  }
}
 8008b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8008b12:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8008b16:	f7ff feab 	bl	8008870 <Uncompress>
 8008b1a:	4601      	mov	r1, r0
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	f7f7 fe1d 	bl	800075c <printf>
 8008b22:	4420      	add	r0, r4
 8008b24:	b2c4      	uxtb	r4, r0
    if(count) {
 8008b26:	b155      	cbz	r5, 8008b3e <DecodePrintRegisters+0x52>
      col += printf(", ");
 8008b28:	4640      	mov	r0, r8
 8008b2a:	f7f7 fe17 	bl	800075c <printf>
 8008b2e:	4420      	add	r0, r4
 8008b30:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8008b32:	2c46      	cmp	r4, #70	; 0x46
 8008b34:	d903      	bls.n	8008b3e <DecodePrintRegisters+0x52>
	printf("\n\t");
 8008b36:	4648      	mov	r0, r9
 8008b38:	f7f7 fe10 	bl	800075c <printf>
	col = 8;
 8008b3c:	2408      	movs	r4, #8
    r++;
 8008b3e:	3d01      	subs	r5, #1
 8008b40:	3610      	adds	r6, #16
 8008b42:	e7e2      	b.n	8008b0a <DecodePrintRegisters+0x1e>
 8008b44:	0800df95 	.word	0x0800df95
 8008b48:	0800dfb4 	.word	0x0800dfb4
 8008b4c:	0800e043 	.word	0x0800e043

08008b50 <CmdDecode>:

void CmdDecode(int mode)
{
 8008b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8008b52:	2802      	cmp	r0, #2
{
 8008b54:	b085      	sub	sp, #20
  if(mode == CMD_LONG_HELP) {
 8008b56:	d132      	bne.n	8008bbe <CmdDecode+0x6e>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8008b58:	a803      	add	r0, sp, #12
 8008b5a:	f7ff fc29 	bl	80083b0 <fetch_string_arg>
    if(rc) {
 8008b5e:	b148      	cbz	r0, 8008b74 <CmdDecode+0x24>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8008b60:	4886      	ldr	r0, [pc, #536]	; (8008d7c <CmdDecode+0x22c>)
 8008b62:	f7f7 fe4f 	bl	8000804 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8008b66:	4886      	ldr	r0, [pc, #536]	; (8008d80 <CmdDecode+0x230>)
 8008b68:	f7ff ff96 	bl	8008a98 <DecodePrintPeripherals>
      printf("\n\n"
 8008b6c:	4885      	ldr	r0, [pc, #532]	; (8008d84 <CmdDecode+0x234>)
      }
      printf("Valid registers for peripheral %s:\n"
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
 8008b6e:	f7f7 fe49 	bl	8000804 <puts>
 8008b72:	e016      	b.n	8008ba2 <CmdDecode+0x52>
      p = Peripherals;
 8008b74:	4c82      	ldr	r4, [pc, #520]	; (8008d80 <CmdDecode+0x230>)
 8008b76:	e008      	b.n	8008b8a <CmdDecode+0x3a>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8008b78:	9d03      	ldr	r5, [sp, #12]
 8008b7a:	f7ff fe79 	bl	8008870 <Uncompress>
 8008b7e:	4601      	mov	r1, r0
 8008b80:	4628      	mov	r0, r5
 8008b82:	f7f7 ff01 	bl	8000988 <strcasecmp>
 8008b86:	b118      	cbz	r0, 8008b90 <CmdDecode+0x40>
	p++;
 8008b88:	3410      	adds	r4, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8008b8a:	6820      	ldr	r0, [r4, #0]
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d1f3      	bne.n	8008b78 <CmdDecode+0x28>
      if(p->name == NULL) {
 8008b90:	6820      	ldr	r0, [r4, #0]
 8008b92:	b940      	cbnz	r0, 8008ba6 <CmdDecode+0x56>
	printf("%s is not a valid peripheral name\n"
 8008b94:	9903      	ldr	r1, [sp, #12]
 8008b96:	487c      	ldr	r0, [pc, #496]	; (8008d88 <CmdDecode+0x238>)
 8008b98:	f7f7 fde0 	bl	800075c <printf>
	DecodePrintPeripherals(Peripherals);
 8008b9c:	4878      	ldr	r0, [pc, #480]	; (8008d80 <CmdDecode+0x230>)
 8008b9e:	f7ff ff7b 	bl	8008a98 <DecodePrintPeripherals>
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return;
}
 8008ba2:	b005      	add	sp, #20
 8008ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      printf("Valid registers for peripheral %s:\n"
 8008ba6:	f7ff fe63 	bl	8008870 <Uncompress>
 8008baa:	4601      	mov	r1, r0
 8008bac:	4877      	ldr	r0, [pc, #476]	; (8008d8c <CmdDecode+0x23c>)
 8008bae:	f7f7 fdd5 	bl	800075c <printf>
      DecodePrintRegisters(p->registers,p->numRegisters);
 8008bb2:	89a1      	ldrh	r1, [r4, #12]
 8008bb4:	68a0      	ldr	r0, [r4, #8]
 8008bb6:	f7ff ff99 	bl	8008aec <DecodePrintRegisters>
      printf("\n\n");
 8008bba:	4875      	ldr	r0, [pc, #468]	; (8008d90 <CmdDecode+0x240>)
 8008bbc:	e7d7      	b.n	8008b6e <CmdDecode+0x1e>
  rc = fetch_string_arg(&pname);
 8008bbe:	4668      	mov	r0, sp
 8008bc0:	f7ff fbf6 	bl	80083b0 <fetch_string_arg>
  if(rc) {
 8008bc4:	b178      	cbz	r0, 8008be6 <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 8008bc6:	4873      	ldr	r0, [pc, #460]	; (8008d94 <CmdDecode+0x244>)
 8008bc8:	f7f7 fe1c 	bl	8000804 <puts>
    DecodePrintPeripherals(Peripherals);
 8008bcc:	486c      	ldr	r0, [pc, #432]	; (8008d80 <CmdDecode+0x230>)
 8008bce:	f7ff ff63 	bl	8008a98 <DecodePrintPeripherals>
    printf("\n\n");
 8008bd2:	e7f2      	b.n	8008bba <CmdDecode+0x6a>
    p++;
 8008bd4:	3410      	adds	r4, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8008bd6:	6820      	ldr	r0, [r4, #0]
 8008bd8:	9d00      	ldr	r5, [sp, #0]
 8008bda:	b930      	cbnz	r0, 8008bea <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8008bdc:	9900      	ldr	r1, [sp, #0]
 8008bde:	486e      	ldr	r0, [pc, #440]	; (8008d98 <CmdDecode+0x248>)
 8008be0:	f7f7 fdbc 	bl	800075c <printf>
 8008be4:	e7f2      	b.n	8008bcc <CmdDecode+0x7c>
  p = Peripherals;
 8008be6:	4c66      	ldr	r4, [pc, #408]	; (8008d80 <CmdDecode+0x230>)
 8008be8:	e7f5      	b.n	8008bd6 <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8008bea:	f7ff fe41 	bl	8008870 <Uncompress>
 8008bee:	4601      	mov	r1, r0
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f7f7 fec9 	bl	8000988 <strcasecmp>
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d1eb      	bne.n	8008bd4 <CmdDecode+0x84>
  if(p->name == NULL) {
 8008bfc:	6823      	ldr	r3, [r4, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0ec      	beq.n	8008bdc <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 8008c02:	a801      	add	r0, sp, #4
 8008c04:	f7ff fbd4 	bl	80083b0 <fetch_string_arg>
  if(rc) {
 8008c08:	b120      	cbz	r0, 8008c14 <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 8008c0a:	4629      	mov	r1, r5
      DecodePeripheral(p,1);
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f7ff ff19 	bl	8008a44 <DecodePeripheral>
      return;
 8008c12:	e7c6      	b.n	8008ba2 <CmdDecode+0x52>
  r = p->registers;
 8008c14:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 8008c16:	89a7      	ldrh	r7, [r4, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8008c18:	9e01      	ldr	r6, [sp, #4]
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	f000 809e 	beq.w	8008d5c <CmdDecode+0x20c>
 8008c20:	6828      	ldr	r0, [r5, #0]
 8008c22:	f7ff fe25 	bl	8008870 <Uncompress>
 8008c26:	4601      	mov	r1, r0
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7f7 fead 	bl	8000988 <strcasecmp>
 8008c2e:	3f01      	subs	r7, #1
 8008c30:	b958      	cbnz	r0, 8008c4a <CmdDecode+0xfa>
  rc = fetch_string_arg(&fname);
 8008c32:	a802      	add	r0, sp, #8
 8008c34:	f7ff fbbc 	bl	80083b0 <fetch_string_arg>
  if(rc == 0) {
 8008c38:	b158      	cbz	r0, 8008c52 <CmdDecode+0x102>
  val = DecodeReadRegister(p,r);
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f7ff fe55 	bl	80088ec <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8008c42:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 8008c44:	4602      	mov	r2, r0
 8008c46:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 8008c48:	e010      	b.n	8008c6c <CmdDecode+0x11c>
    r++;
 8008c4a:	3510      	adds	r5, #16
 8008c4c:	e7e4      	b.n	8008c18 <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 8008c4e:	2101      	movs	r1, #1
 8008c50:	e7dc      	b.n	8008c0c <CmdDecode+0xbc>
    if(strcasecmp(fname,"val") == 0) {
 8008c52:	4952      	ldr	r1, [pc, #328]	; (8008d9c <CmdDecode+0x24c>)
 8008c54:	9802      	ldr	r0, [sp, #8]
 8008c56:	f7f7 fe97 	bl	8000988 <strcasecmp>
 8008c5a:	b960      	cbnz	r0, 8008c76 <CmdDecode+0x126>
      rc = fetch_uint32_arg(&val);
 8008c5c:	a803      	add	r0, sp, #12
 8008c5e:	f7ff fb93 	bl	8008388 <fetch_uint32_arg>
      if(rc) {
 8008c62:	b108      	cbz	r0, 8008c68 <CmdDecode+0x118>
	printf("Missing value to use in decode\n");
 8008c64:	484e      	ldr	r0, [pc, #312]	; (8008da0 <CmdDecode+0x250>)
 8008c66:	e782      	b.n	8008b6e <CmdDecode+0x1e>
      DecodeRegister(r,p->base,val,1);
 8008c68:	9a03      	ldr	r2, [sp, #12]
 8008c6a:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8008c6c:	6861      	ldr	r1, [r4, #4]
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f7ff feb8 	bl	80089e4 <DecodeRegister>
  return;
 8008c74:	e795      	b.n	8008ba2 <CmdDecode+0x52>
    f = r->fields;
 8008c76:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8008c78:	6830      	ldr	r0, [r6, #0]
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d049      	beq.n	8008d12 <CmdDecode+0x1c2>
 8008c7e:	9f02      	ldr	r7, [sp, #8]
 8008c80:	f7ff fdf6 	bl	8008870 <Uncompress>
 8008c84:	4601      	mov	r1, r0
 8008c86:	4638      	mov	r0, r7
 8008c88:	f7f7 fe7e 	bl	8000988 <strcasecmp>
 8008c8c:	b970      	cbnz	r0, 8008cac <CmdDecode+0x15c>
    if(f->name != NULL) {
 8008c8e:	6833      	ldr	r3, [r6, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d03e      	beq.n	8008d12 <CmdDecode+0x1c2>
      rc = fetch_uint32_arg(&val);
 8008c94:	a803      	add	r0, sp, #12
 8008c96:	f7ff fb77 	bl	8008388 <fetch_uint32_arg>
      if(rc) {
 8008c9a:	b148      	cbz	r0, 8008cb0 <CmdDecode+0x160>
	printf("Missing Value to program into register %s\n",
 8008c9c:	6828      	ldr	r0, [r5, #0]
 8008c9e:	f7ff fde7 	bl	8008870 <Uncompress>
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	483f      	ldr	r0, [pc, #252]	; (8008da4 <CmdDecode+0x254>)
      printf("Invalid number '%s' entered.\n",
 8008ca6:	f7f7 fd59 	bl	800075c <printf>
      return;
 8008caa:	e77a      	b.n	8008ba2 <CmdDecode+0x52>
      f++;
 8008cac:	3608      	adds	r6, #8
 8008cae:	e7e3      	b.n	8008c78 <CmdDecode+0x128>
      t = DecodeReadRegister(p,r);
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7ff fe1a 	bl	80088ec <DecodeReadRegister>
      m = (1<<f->width)-1;
 8008cb8:	7972      	ldrb	r2, [r6, #5]
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4093      	lsls	r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 8008cbe:	7932      	ldrb	r2, [r6, #4]
      m = (1<<f->width)-1;
 8008cc0:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8008cc2:	fa03 f102 	lsl.w	r1, r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 8008cc6:	fa20 f702 	lsr.w	r7, r0, r2
      t &= ~(m << f->offset);
 8008cca:	ea20 0001 	bic.w	r0, r0, r1
      t |= (val & m) << f->offset;
 8008cce:	9903      	ldr	r1, [sp, #12]
      oval = (t >> f->offset) & m; /* Save old value */
 8008cd0:	401f      	ands	r7, r3
      t |= (val & m) << f->offset;
 8008cd2:	400b      	ands	r3, r1
 8008cd4:	fa03 f202 	lsl.w	r2, r3, r2
      DecodeWriteRegister(p,r,t);
 8008cd8:	4302      	orrs	r2, r0
 8008cda:	4629      	mov	r1, r5
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f7ff fe2f 	bl	8008940 <DecodeWriteRegister>
      printf("%s.",
 8008ce2:	6820      	ldr	r0, [r4, #0]
 8008ce4:	f7ff fdc4 	bl	8008870 <Uncompress>
 8008ce8:	4601      	mov	r1, r0
 8008cea:	482f      	ldr	r0, [pc, #188]	; (8008da8 <CmdDecode+0x258>)
 8008cec:	f7f7 fd36 	bl	800075c <printf>
      printf("%s.",
 8008cf0:	6828      	ldr	r0, [r5, #0]
 8008cf2:	f7ff fdbd 	bl	8008870 <Uncompress>
 8008cf6:	4601      	mov	r1, r0
 8008cf8:	482b      	ldr	r0, [pc, #172]	; (8008da8 <CmdDecode+0x258>)
 8008cfa:	f7f7 fd2f 	bl	800075c <printf>
      printf("%s (%d) -> (%d)\n",
 8008cfe:	6830      	ldr	r0, [r6, #0]
 8008d00:	f7ff fdb6 	bl	8008870 <Uncompress>
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	4601      	mov	r1, r0
 8008d08:	463a      	mov	r2, r7
 8008d0a:	4828      	ldr	r0, [pc, #160]	; (8008dac <CmdDecode+0x25c>)
 8008d0c:	f7f7 fd26 	bl	800075c <printf>
      return;
 8008d10:	e747      	b.n	8008ba2 <CmdDecode+0x52>
    errno = 0;
 8008d12:	f7f7 fc81 	bl	8000618 <__errno>
 8008d16:	2200      	movs	r2, #0
 8008d18:	6002      	str	r2, [r0, #0]
    val = strtoul(fname,NULL,0);
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	9802      	ldr	r0, [sp, #8]
 8008d1e:	f7f8 f827 	bl	8000d70 <strtoul>
 8008d22:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 8008d24:	f7f7 fc78 	bl	8000618 <__errno>
 8008d28:	6803      	ldr	r3, [r0, #0]
 8008d2a:	b113      	cbz	r3, 8008d32 <CmdDecode+0x1e2>
      printf("Invalid number '%s' entered.\n",
 8008d2c:	9902      	ldr	r1, [sp, #8]
 8008d2e:	4820      	ldr	r0, [pc, #128]	; (8008db0 <CmdDecode+0x260>)
 8008d30:	e7b9      	b.n	8008ca6 <CmdDecode+0x156>
    DecodeWriteRegister(p,r,val);
 8008d32:	9a03      	ldr	r2, [sp, #12]
 8008d34:	4629      	mov	r1, r5
 8008d36:	4620      	mov	r0, r4
 8008d38:	f7ff fe02 	bl	8008940 <DecodeWriteRegister>
    printf("%s.",
 8008d3c:	6820      	ldr	r0, [r4, #0]
 8008d3e:	f7ff fd97 	bl	8008870 <Uncompress>
 8008d42:	4601      	mov	r1, r0
 8008d44:	4818      	ldr	r0, [pc, #96]	; (8008da8 <CmdDecode+0x258>)
 8008d46:	f7f7 fd09 	bl	800075c <printf>
    printf("%s = 0x%08x\n",
 8008d4a:	6828      	ldr	r0, [r5, #0]
 8008d4c:	f7ff fd90 	bl	8008870 <Uncompress>
 8008d50:	9a03      	ldr	r2, [sp, #12]
 8008d52:	4601      	mov	r1, r0
 8008d54:	4817      	ldr	r0, [pc, #92]	; (8008db4 <CmdDecode+0x264>)
 8008d56:	f7f7 fd01 	bl	800075c <printf>
    return;
 8008d5a:	e722      	b.n	8008ba2 <CmdDecode+0x52>
    if(strcasecmp(rname,"full") == 0) {
 8008d5c:	4916      	ldr	r1, [pc, #88]	; (8008db8 <CmdDecode+0x268>)
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7f7 fe12 	bl	8000988 <strcasecmp>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f43f af72 	beq.w	8008c4e <CmdDecode+0xfe>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8008d6a:	6820      	ldr	r0, [r4, #0]
 8008d6c:	f7ff fd80 	bl	8008870 <Uncompress>
 8008d70:	4631      	mov	r1, r6
 8008d72:	4602      	mov	r2, r0
 8008d74:	4811      	ldr	r0, [pc, #68]	; (8008dbc <CmdDecode+0x26c>)
 8008d76:	f7f7 fcf1 	bl	800075c <printf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 8008d7a:	e71a      	b.n	8008bb2 <CmdDecode+0x62>
 8008d7c:	0800e046 	.word	0x0800e046
 8008d80:	080188f8 	.word	0x080188f8
 8008d84:	0800e259 	.word	0x0800e259
 8008d88:	0800e2ae 	.word	0x0800e2ae
 8008d8c:	0800e2e9 	.word	0x0800e2e9
 8008d90:	0800e377 	.word	0x0800e377
 8008d94:	0800e30e 	.word	0x0800e30e
 8008d98:	0800e33d 	.word	0x0800e33d
 8008d9c:	0800e3b6 	.word	0x0800e3b6
 8008da0:	0800e3ba 	.word	0x0800e3ba
 8008da4:	0800e3d9 	.word	0x0800e3d9
 8008da8:	0800e404 	.word	0x0800e404
 8008dac:	0800e408 	.word	0x0800e408
 8008db0:	0800e419 	.word	0x0800e419
 8008db4:	0800e437 	.word	0x0800e437
 8008db8:	0800e444 	.word	0x0800e444
 8008dbc:	0800e379 	.word	0x0800e379

08008dc0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008dc0:	4915      	ldr	r1, [pc, #84]	; (8008e18 <SystemInit+0x58>)
 8008dc2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008dc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008dce:	4b13      	ldr	r3, [pc, #76]	; (8008e1c <SystemInit+0x5c>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	f042 0201 	orr.w	r2, r2, #1
 8008dd6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8008dd8:	6858      	ldr	r0, [r3, #4]
 8008dda:	4a11      	ldr	r2, [pc, #68]	; (8008e20 <SystemInit+0x60>)
 8008ddc:	4002      	ands	r2, r0
 8008dde:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008de6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008dea:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008df2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8008dfa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8008dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfe:	f022 020f 	bic.w	r2, r2, #15
 8008e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8008e04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e06:	4a07      	ldr	r2, [pc, #28]	; (8008e24 <SystemInit+0x64>)
 8008e08:	4002      	ands	r2, r0
 8008e0a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e14:	608b      	str	r3, [r1, #8]
#endif
}
 8008e16:	4770      	bx	lr
 8008e18:	e000ed00 	.word	0xe000ed00
 8008e1c:	40021000 	.word	0x40021000
 8008e20:	f87fc00c 	.word	0xf87fc00c
 8008e24:	ff00fccc 	.word	0xff00fccc

08008e28 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e2c:	6803      	ldr	r3, [r0, #0]
 8008e2e:	07db      	lsls	r3, r3, #31
{
 8008e30:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e32:	d46c      	bmi.n	8008f0e <HAL_RCC_OscConfig+0xe6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	079f      	lsls	r7, r3, #30
 8008e38:	f100 8128 	bmi.w	800908c <HAL_RCC_OscConfig+0x264>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	0719      	lsls	r1, r3, #28
 8008e40:	f100 81b6 	bmi.w	80091b0 <HAL_RCC_OscConfig+0x388>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	075a      	lsls	r2, r3, #29
 8008e48:	d55b      	bpl.n	8008f02 <HAL_RCC_OscConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8008e4a:	4dae      	ldr	r5, [pc, #696]	; (8009104 <HAL_RCC_OscConfig+0x2dc>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e4c:	4eae      	ldr	r6, [pc, #696]	; (8009108 <HAL_RCC_OscConfig+0x2e0>)
    __PWR_CLK_ENABLE();
 8008e4e:	69eb      	ldr	r3, [r5, #28]
 8008e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e54:	61eb      	str	r3, [r5, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e56:	6833      	ldr	r3, [r6, #0]
 8008e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e5c:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e5e:	f000 fc9b 	bl	8009798 <HAL_GetTick>
 8008e62:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e64:	6833      	ldr	r3, [r6, #0]
 8008e66:	05db      	lsls	r3, r3, #23
 8008e68:	f140 81ea 	bpl.w	8009240 <HAL_RCC_OscConfig+0x418>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8008e6c:	6a2b      	ldr	r3, [r5, #32]
 8008e6e:	f023 0305 	bic.w	r3, r3, #5
 8008e72:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008e74:	f000 fc90 	bl	8009798 <HAL_GetTick>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e78:	2602      	movs	r6, #2
 8008e7a:	4607      	mov	r7, r0
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e7c:	f04f 0801 	mov.w	r8, #1
 8008e80:	fa96 f3a6 	rbit	r3, r6
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e84:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e88:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e8c:	fab3 f383 	clz	r3, r3
 8008e90:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008e94:	f033 0302 	bics.w	r3, r3, #2
 8008e98:	bf0c      	ite	eq
 8008e9a:	6a2a      	ldreq	r2, [r5, #32]
 8008e9c:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e9e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ea2:	fab3 f383 	clz	r3, r3
 8008ea6:	f003 031f 	and.w	r3, r3, #31
 8008eaa:	fa08 f303 	lsl.w	r3, r8, r3
 8008eae:	4213      	tst	r3, r2
 8008eb0:	f040 81cd 	bne.w	800924e <HAL_RCC_OscConfig+0x426>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eb4:	6a2b      	ldr	r3, [r5, #32]
 8008eb6:	68e6      	ldr	r6, [r4, #12]
 8008eb8:	f023 0305 	bic.w	r3, r3, #5
 8008ebc:	4333      	orrs	r3, r6
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008ebe:	2e01      	cmp	r6, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ec0:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008ec2:	f040 81d7 	bne.w	8009274 <HAL_RCC_OscConfig+0x44c>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8008ec6:	f000 fc67 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eca:	2702      	movs	r7, #2
 8008ecc:	4680      	mov	r8, r0
 8008ece:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ed2:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ed6:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008eda:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ede:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008ee2:	f033 0302 	bics.w	r3, r3, #2
 8008ee6:	bf0c      	ite	eq
 8008ee8:	6a2a      	ldreq	r2, [r5, #32]
 8008eea:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eec:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ef0:	fab3 f383 	clz	r3, r3
 8008ef4:	f003 031f 	and.w	r3, r3, #31
 8008ef8:	fa06 f303 	lsl.w	r3, r6, r3
 8008efc:	4213      	tst	r3, r2
 8008efe:	f000 81af 	beq.w	8009260 <HAL_RCC_OscConfig+0x438>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f02:	69e2      	ldr	r2, [r4, #28]
 8008f04:	2a00      	cmp	r2, #0
 8008f06:	f040 81dd 	bne.w	80092c4 <HAL_RCC_OscConfig+0x49c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e02c      	b.n	8008f68 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008f0e:	4d7d      	ldr	r5, [pc, #500]	; (8009104 <HAL_RCC_OscConfig+0x2dc>)
 8008f10:	686b      	ldr	r3, [r5, #4]
 8008f12:	f003 030c 	and.w	r3, r3, #12
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d007      	beq.n	8008f2a <HAL_RCC_OscConfig+0x102>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008f1a:	686b      	ldr	r3, [r5, #4]
 8008f1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d129      	bne.n	8008f78 <HAL_RCC_OscConfig+0x150>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008f24:	686b      	ldr	r3, [r5, #4]
 8008f26:	03de      	lsls	r6, r3, #15
 8008f28:	d526      	bpl.n	8008f78 <HAL_RCC_OscConfig+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f2e:	fa93 f2a3 	rbit	r2, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f32:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8008f36:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8008f3a:	f032 0201 	bics.w	r2, r2, #1
 8008f3e:	d115      	bne.n	8008f6c <HAL_RCC_OscConfig+0x144>
 8008f40:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f46:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f4a:	fab3 f383 	clz	r3, r3
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f003 031f 	and.w	r3, r3, #31
 8008f54:	fa02 f303 	lsl.w	r3, r2, r3
 8008f58:	420b      	tst	r3, r1
 8008f5a:	f43f af6b 	beq.w	8008e34 <HAL_RCC_OscConfig+0xc>
 8008f5e:	6863      	ldr	r3, [r4, #4]
 8008f60:	4293      	cmp	r3, r2
 8008f62:	f43f af67 	beq.w	8008e34 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8008f66:	2001      	movs	r0, #1
}
 8008f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f6c:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f70:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8008f74:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008f76:	e7e4      	b.n	8008f42 <HAL_RCC_OscConfig+0x11a>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8008f78:	2300      	movs	r3, #0
 8008f7a:	70ab      	strb	r3, [r5, #2]
      tickstart = HAL_GetTick();
 8008f7c:	f000 fc0c 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f80:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8008f84:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f86:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008f8a:	f241 3988 	movw	r9, #5000	; 0x1388
 8008f8e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f92:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f96:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008f9a:	f033 0301 	bics.w	r3, r3, #1
 8008f9e:	d13f      	bne.n	8009020 <HAL_RCC_OscConfig+0x1f8>
 8008fa0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fa2:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008fa6:	fab3 f383 	clz	r3, r3
 8008faa:	f003 031f 	and.w	r3, r3, #31
 8008fae:	fa08 f303 	lsl.w	r3, r8, r3
 8008fb2:	4213      	tst	r3, r2
 8008fb4:	d12d      	bne.n	8009012 <HAL_RCC_OscConfig+0x1ea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fb6:	7923      	ldrb	r3, [r4, #4]
 8008fb8:	70ab      	strb	r3, [r5, #2]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008fba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008fbc:	68a2      	ldr	r2, [r4, #8]
 8008fbe:	f023 030f 	bic.w	r3, r3, #15
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	62eb      	str	r3, [r5, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8008fc6:	6866      	ldr	r6, [r4, #4]
 8008fc8:	2e01      	cmp	r6, #1
 8008fca:	d135      	bne.n	8009038 <HAL_RCC_OscConfig+0x210>
        tickstart = HAL_GetTick();
 8008fcc:	f000 fbe4 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fd0:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8008fd4:	4680      	mov	r8, r0
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008fd6:	f241 3988 	movw	r9, #5000	; 0x1388
 8008fda:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008fde:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fe2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008fe6:	f033 0301 	bics.w	r3, r3, #1
 8008fea:	d11f      	bne.n	800902c <HAL_RCC_OscConfig+0x204>
 8008fec:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fee:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ff2:	fab3 f383 	clz	r3, r3
 8008ff6:	f003 031f 	and.w	r3, r3, #31
 8008ffa:	fa06 f303 	lsl.w	r3, r6, r3
 8008ffe:	4213      	tst	r3, r2
 8009000:	f47f af18 	bne.w	8008e34 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8009004:	f000 fbc8 	bl	8009798 <HAL_GetTick>
 8009008:	eba0 0008 	sub.w	r0, r0, r8
 800900c:	4548      	cmp	r0, r9
 800900e:	d9e4      	bls.n	8008fda <HAL_RCC_OscConfig+0x1b2>
 8009010:	e004      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8009012:	f000 fbc1 	bl	8009798 <HAL_GetTick>
 8009016:	1bc0      	subs	r0, r0, r7
 8009018:	4548      	cmp	r0, r9
 800901a:	d9b8      	bls.n	8008f8e <HAL_RCC_OscConfig+0x166>
          return HAL_TIMEOUT;
 800901c:	2003      	movs	r0, #3
 800901e:	e7a3      	b.n	8008f68 <HAL_RCC_OscConfig+0x140>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009020:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009024:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009028:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800902a:	e7ba      	b.n	8008fa2 <HAL_RCC_OscConfig+0x17a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800902c:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009030:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009034:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009036:	e7da      	b.n	8008fee <HAL_RCC_OscConfig+0x1c6>
        tickstart = HAL_GetTick();
 8009038:	f000 fbae 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800903c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8009040:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009042:	f04f 0801 	mov.w	r8, #1
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8009046:	f241 3988 	movw	r9, #5000	; 0x1388
 800904a:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800904e:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009052:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009056:	f033 0301 	bics.w	r3, r3, #1
 800905a:	d111      	bne.n	8009080 <HAL_RCC_OscConfig+0x258>
 800905c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800905e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009062:	fab3 f383 	clz	r3, r3
 8009066:	f003 031f 	and.w	r3, r3, #31
 800906a:	fa08 f303 	lsl.w	r3, r8, r3
 800906e:	4213      	tst	r3, r2
 8009070:	f43f aee0 	beq.w	8008e34 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8009074:	f000 fb90 	bl	8009798 <HAL_GetTick>
 8009078:	1bc0      	subs	r0, r0, r7
 800907a:	4548      	cmp	r0, r9
 800907c:	d9e5      	bls.n	800904a <HAL_RCC_OscConfig+0x222>
 800907e:	e7cd      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009080:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009084:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009088:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800908a:	e7e8      	b.n	800905e <HAL_RCC_OscConfig+0x236>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800908c:	4d1d      	ldr	r5, [pc, #116]	; (8009104 <HAL_RCC_OscConfig+0x2dc>)
 800908e:	686b      	ldr	r3, [r5, #4]
 8009090:	f013 0f0c 	tst.w	r3, #12
 8009094:	d007      	beq.n	80090a6 <HAL_RCC_OscConfig+0x27e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009096:	686b      	ldr	r3, [r5, #4]
 8009098:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800909c:	2b08      	cmp	r3, #8
 800909e:	d135      	bne.n	800910c <HAL_RCC_OscConfig+0x2e4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80090a0:	686b      	ldr	r3, [r5, #4]
 80090a2:	03d8      	lsls	r0, r3, #15
 80090a4:	d432      	bmi.n	800910c <HAL_RCC_OscConfig+0x2e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090a6:	2302      	movs	r3, #2
 80090a8:	fa93 f2a3 	rbit	r2, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090ac:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090b0:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80090b4:	f032 0201 	bics.w	r2, r2, #1
 80090b8:	d11e      	bne.n	80090f8 <HAL_RCC_OscConfig+0x2d0>
 80090ba:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090bc:	2302      	movs	r3, #2
 80090be:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090c2:	fab3 f383 	clz	r3, r3
 80090c6:	2201      	movs	r2, #1
 80090c8:	f003 031f 	and.w	r3, r3, #31
 80090cc:	fa02 f303 	lsl.w	r3, r2, r3
 80090d0:	420b      	tst	r3, r1
 80090d2:	d003      	beq.n	80090dc <HAL_RCC_OscConfig+0x2b4>
 80090d4:	6923      	ldr	r3, [r4, #16]
 80090d6:	4293      	cmp	r3, r2
 80090d8:	f47f af45 	bne.w	8008f66 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090dc:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090de:	23f8      	movs	r3, #248	; 0xf8
 80090e0:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090e4:	fab3 f383 	clz	r3, r3
 80090e8:	6962      	ldr	r2, [r4, #20]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	409a      	lsls	r2, r3
 80090ee:	f021 03f8 	bic.w	r3, r1, #248	; 0xf8
 80090f2:	431a      	orrs	r2, r3
 80090f4:	602a      	str	r2, [r5, #0]
 80090f6:	e6a1      	b.n	8008e3c <HAL_RCC_OscConfig+0x14>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090f8:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090fc:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009100:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009102:	e7db      	b.n	80090bc <HAL_RCC_OscConfig+0x294>
 8009104:	40021000 	.word	0x40021000
 8009108:	40007000 	.word	0x40007000
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800910c:	6922      	ldr	r2, [r4, #16]
 800910e:	4bb3      	ldr	r3, [pc, #716]	; (80093dc <HAL_RCC_OscConfig+0x5b4>)
 8009110:	b332      	cbz	r2, 8009160 <HAL_RCC_OscConfig+0x338>
        __HAL_RCC_HSI_ENABLE();
 8009112:	2601      	movs	r6, #1
 8009114:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8009116:	f000 fb3f 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800911a:	2702      	movs	r7, #2
 800911c:	4680      	mov	r8, r0
 800911e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009122:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009126:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800912a:	f033 0301 	bics.w	r3, r3, #1
 800912e:	d111      	bne.n	8009154 <HAL_RCC_OscConfig+0x32c>
 8009130:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009132:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009136:	fab3 f383 	clz	r3, r3
 800913a:	f003 031f 	and.w	r3, r3, #31
 800913e:	fa06 f303 	lsl.w	r3, r6, r3
 8009142:	4213      	tst	r3, r2
 8009144:	d1ca      	bne.n	80090dc <HAL_RCC_OscConfig+0x2b4>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8009146:	f000 fb27 	bl	8009798 <HAL_GetTick>
 800914a:	eba0 0008 	sub.w	r0, r0, r8
 800914e:	2864      	cmp	r0, #100	; 0x64
 8009150:	d9e5      	bls.n	800911e <HAL_RCC_OscConfig+0x2f6>
 8009152:	e763      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009154:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009158:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800915c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800915e:	e7e8      	b.n	8009132 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSI_DISABLE();
 8009160:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009162:	f000 fb19 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009166:	2602      	movs	r6, #2
 8009168:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800916a:	f04f 0801 	mov.w	r8, #1
 800916e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009172:	fab3 f383 	clz	r3, r3
 8009176:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800917a:	f033 0301 	bics.w	r3, r3, #1
 800917e:	d111      	bne.n	80091a4 <HAL_RCC_OscConfig+0x37c>
 8009180:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009182:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009186:	fab3 f383 	clz	r3, r3
 800918a:	f003 031f 	and.w	r3, r3, #31
 800918e:	fa08 f303 	lsl.w	r3, r8, r3
 8009192:	4213      	tst	r3, r2
 8009194:	f43f ae52 	beq.w	8008e3c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8009198:	f000 fafe 	bl	8009798 <HAL_GetTick>
 800919c:	1bc0      	subs	r0, r0, r7
 800919e:	2864      	cmp	r0, #100	; 0x64
 80091a0:	d9e5      	bls.n	800916e <HAL_RCC_OscConfig+0x346>
 80091a2:	e73b      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80091a8:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091ac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80091ae:	e7e8      	b.n	8009182 <HAL_RCC_OscConfig+0x35a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80091b0:	69a2      	ldr	r2, [r4, #24]
 80091b2:	4d8b      	ldr	r5, [pc, #556]	; (80093e0 <HAL_RCC_OscConfig+0x5b8>)
 80091b4:	4b89      	ldr	r3, [pc, #548]	; (80093dc <HAL_RCC_OscConfig+0x5b4>)
 80091b6:	b30a      	cbz	r2, 80091fc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_LSI_ENABLE();
 80091b8:	2701      	movs	r7, #1
 80091ba:	f8c3 7480 	str.w	r7, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80091be:	f000 faeb 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091c2:	2602      	movs	r6, #2
 80091c4:	4680      	mov	r8, r0
 80091c6:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80091ca:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ce:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80091d2:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091d8:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80091dc:	fab3 f383 	clz	r3, r3
 80091e0:	f003 031f 	and.w	r3, r3, #31
 80091e4:	fa07 f303 	lsl.w	r3, r7, r3
 80091e8:	4213      	tst	r3, r2
 80091ea:	f47f ae2b 	bne.w	8008e44 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80091ee:	f000 fad3 	bl	8009798 <HAL_GetTick>
 80091f2:	eba0 0008 	sub.w	r0, r0, r8
 80091f6:	2864      	cmp	r0, #100	; 0x64
 80091f8:	d9e5      	bls.n	80091c6 <HAL_RCC_OscConfig+0x39e>
 80091fa:	e70f      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_DISABLE();
 80091fc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8009200:	f000 faca 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009204:	2602      	movs	r6, #2
 8009206:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009208:	f04f 0801 	mov.w	r8, #1
 800920c:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009210:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009214:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009218:	fab3 f383 	clz	r3, r3
 800921c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800921e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009222:	fab3 f383 	clz	r3, r3
 8009226:	f003 031f 	and.w	r3, r3, #31
 800922a:	fa08 f303 	lsl.w	r3, r8, r3
 800922e:	4213      	tst	r3, r2
 8009230:	f43f ae08 	beq.w	8008e44 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8009234:	f000 fab0 	bl	8009798 <HAL_GetTick>
 8009238:	1bc0      	subs	r0, r0, r7
 800923a:	2864      	cmp	r0, #100	; 0x64
 800923c:	d9e6      	bls.n	800920c <HAL_RCC_OscConfig+0x3e4>
 800923e:	e6ed      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 8009240:	f000 faaa 	bl	8009798 <HAL_GetTick>
 8009244:	1bc0      	subs	r0, r0, r7
 8009246:	2864      	cmp	r0, #100	; 0x64
 8009248:	f67f ae0c 	bls.w	8008e64 <HAL_RCC_OscConfig+0x3c>
 800924c:	e6e6      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 800924e:	f000 faa3 	bl	8009798 <HAL_GetTick>
 8009252:	f241 3388 	movw	r3, #5000	; 0x1388
 8009256:	1bc0      	subs	r0, r0, r7
 8009258:	4298      	cmp	r0, r3
 800925a:	f67f ae11 	bls.w	8008e80 <HAL_RCC_OscConfig+0x58>
 800925e:	e6dd      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8009260:	f000 fa9a 	bl	8009798 <HAL_GetTick>
 8009264:	f241 3388 	movw	r3, #5000	; 0x1388
 8009268:	eba0 0008 	sub.w	r0, r0, r8
 800926c:	4298      	cmp	r0, r3
 800926e:	f67f ae2e 	bls.w	8008ece <HAL_RCC_OscConfig+0xa6>
 8009272:	e6d3      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
      tickstart = HAL_GetTick();
 8009274:	f000 fa90 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009278:	2602      	movs	r6, #2
 800927a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800927c:	f04f 0801 	mov.w	r8, #1
 8009280:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009284:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009288:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800928c:	fab3 f383 	clz	r3, r3
 8009290:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009294:	f033 0302 	bics.w	r3, r3, #2
 8009298:	bf0c      	ite	eq
 800929a:	6a2a      	ldreq	r2, [r5, #32]
 800929c:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800929e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80092a2:	fab3 f383 	clz	r3, r3
 80092a6:	f003 031f 	and.w	r3, r3, #31
 80092aa:	fa08 f303 	lsl.w	r3, r8, r3
 80092ae:	4213      	tst	r3, r2
 80092b0:	f43f ae27 	beq.w	8008f02 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80092b4:	f000 fa70 	bl	8009798 <HAL_GetTick>
 80092b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80092bc:	1bc0      	subs	r0, r0, r7
 80092be:	4298      	cmp	r0, r3
 80092c0:	d9de      	bls.n	8009280 <HAL_RCC_OscConfig+0x458>
 80092c2:	e6ab      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092c4:	4d46      	ldr	r5, [pc, #280]	; (80093e0 <HAL_RCC_OscConfig+0x5b8>)
 80092c6:	686b      	ldr	r3, [r5, #4]
 80092c8:	f003 030c 	and.w	r3, r3, #12
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	f43f ae4a 	beq.w	8008f66 <HAL_RCC_OscConfig+0x13e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092d2:	4b42      	ldr	r3, [pc, #264]	; (80093dc <HAL_RCC_OscConfig+0x5b4>)
 80092d4:	2a02      	cmp	r2, #2
 80092d6:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80092da:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092dc:	d157      	bne.n	800938e <HAL_RCC_OscConfig+0x566>
        tickstart = HAL_GetTick();
 80092de:	f000 fa5b 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092e2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80092e6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092e8:	2601      	movs	r6, #1
 80092ea:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80092ee:	fab3 f383 	clz	r3, r3
 80092f2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80092f6:	f033 0301 	bics.w	r3, r3, #1
 80092fa:	d13c      	bne.n	8009376 <HAL_RCC_OscConfig+0x54e>
 80092fc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092fe:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009302:	fab3 f383 	clz	r3, r3
 8009306:	f003 031f 	and.w	r3, r3, #31
 800930a:	fa06 f303 	lsl.w	r3, r6, r3
 800930e:	4213      	tst	r3, r2
 8009310:	d12a      	bne.n	8009368 <HAL_RCC_OscConfig+0x540>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009312:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8009316:	686a      	ldr	r2, [r5, #4]
 8009318:	430b      	orrs	r3, r1
 800931a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800931e:	4313      	orrs	r3, r2
 8009320:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8009322:	4b2e      	ldr	r3, [pc, #184]	; (80093dc <HAL_RCC_OscConfig+0x5b4>)
 8009324:	661e      	str	r6, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009326:	f000 fa37 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800932a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800932e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009330:	2701      	movs	r7, #1
 8009332:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009336:	fab3 f383 	clz	r3, r3
 800933a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800933e:	f033 0301 	bics.w	r3, r3, #1
 8009342:	d11e      	bne.n	8009382 <HAL_RCC_OscConfig+0x55a>
 8009344:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009346:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800934a:	fab3 f383 	clz	r3, r3
 800934e:	f003 031f 	and.w	r3, r3, #31
 8009352:	fa07 f303 	lsl.w	r3, r7, r3
 8009356:	4213      	tst	r3, r2
 8009358:	f47f add7 	bne.w	8008f0a <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800935c:	f000 fa1c 	bl	8009798 <HAL_GetTick>
 8009360:	1b80      	subs	r0, r0, r6
 8009362:	2864      	cmp	r0, #100	; 0x64
 8009364:	d9e5      	bls.n	8009332 <HAL_RCC_OscConfig+0x50a>
 8009366:	e659      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8009368:	f000 fa16 	bl	8009798 <HAL_GetTick>
 800936c:	eba0 0008 	sub.w	r0, r0, r8
 8009370:	2864      	cmp	r0, #100	; 0x64
 8009372:	d9ba      	bls.n	80092ea <HAL_RCC_OscConfig+0x4c2>
 8009374:	e652      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009376:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800937a:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800937e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009380:	e7bd      	b.n	80092fe <HAL_RCC_OscConfig+0x4d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009382:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009386:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800938a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800938c:	e7db      	b.n	8009346 <HAL_RCC_OscConfig+0x51e>
        tickstart = HAL_GetTick();
 800938e:	f000 fa03 	bl	8009798 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009392:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8009396:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009398:	2701      	movs	r7, #1
 800939a:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800939e:	fab3 f383 	clz	r3, r3
 80093a2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80093a6:	f033 0301 	bics.w	r3, r3, #1
 80093aa:	d111      	bne.n	80093d0 <HAL_RCC_OscConfig+0x5a8>
 80093ac:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ae:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80093b2:	fab3 f383 	clz	r3, r3
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	fa07 f303 	lsl.w	r3, r7, r3
 80093be:	4213      	tst	r3, r2
 80093c0:	f43f ada3 	beq.w	8008f0a <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 80093c4:	f000 f9e8 	bl	8009798 <HAL_GetTick>
 80093c8:	1b80      	subs	r0, r0, r6
 80093ca:	2864      	cmp	r0, #100	; 0x64
 80093cc:	d9e5      	bls.n	800939a <HAL_RCC_OscConfig+0x572>
 80093ce:	e625      	b.n	800901c <HAL_RCC_OscConfig+0x1f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093d0:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80093d4:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093d8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80093da:	e7e8      	b.n	80093ae <HAL_RCC_OscConfig+0x586>
 80093dc:	42420000 	.word	0x42420000
 80093e0:	40021000 	.word	0x40021000

080093e4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80093e4:	4aa9      	ldr	r2, [pc, #676]	; (800968c <HAL_RCC_ClockConfig+0x2a8>)
 80093e6:	6813      	ldr	r3, [r2, #0]
 80093e8:	f003 0307 	and.w	r3, r3, #7
 80093ec:	428b      	cmp	r3, r1
{
 80093ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f2:	4604      	mov	r4, r0
 80093f4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80093f6:	f080 80aa 	bcs.w	800954e <HAL_RCC_ClockConfig+0x16a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093fa:	6813      	ldr	r3, [r2, #0]
 80093fc:	f023 0307 	bic.w	r3, r3, #7
 8009400:	430b      	orrs	r3, r1
 8009402:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009404:	6813      	ldr	r3, [r2, #0]
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	428b      	cmp	r3, r1
 800940c:	d002      	beq.n	8009414 <HAL_RCC_ClockConfig+0x30>
    {
      return HAL_ERROR;
 800940e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8009410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009414:	6802      	ldr	r2, [r0, #0]
 8009416:	0796      	lsls	r6, r2, #30
 8009418:	d506      	bpl.n	8009428 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800941a:	499d      	ldr	r1, [pc, #628]	; (8009690 <HAL_RCC_ClockConfig+0x2ac>)
 800941c:	6880      	ldr	r0, [r0, #8]
 800941e:	684b      	ldr	r3, [r1, #4]
 8009420:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009424:	4303      	orrs	r3, r0
 8009426:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009428:	07d5      	lsls	r5, r2, #31
 800942a:	d412      	bmi.n	8009452 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	0750      	lsls	r0, r2, #29
 8009430:	f100 8124 	bmi.w	800967c <HAL_RCC_ClockConfig+0x298>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009434:	0713      	lsls	r3, r2, #28
 8009436:	d507      	bpl.n	8009448 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009438:	4a95      	ldr	r2, [pc, #596]	; (8009690 <HAL_RCC_ClockConfig+0x2ac>)
 800943a:	6921      	ldr	r1, [r4, #16]
 800943c:	6853      	ldr	r3, [r2, #4]
 800943e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009442:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009446:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8009448:	200f      	movs	r0, #15
 800944a:	f000 f976 	bl	800973a <HAL_InitTick>
  return HAL_OK;
 800944e:	2000      	movs	r0, #0
 8009450:	e7de      	b.n	8009410 <HAL_RCC_ClockConfig+0x2c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009452:	6862      	ldr	r2, [r4, #4]
 8009454:	4d8e      	ldr	r5, [pc, #568]	; (8009690 <HAL_RCC_ClockConfig+0x2ac>)
 8009456:	2a01      	cmp	r2, #1
 8009458:	d137      	bne.n	80094ca <HAL_RCC_ClockConfig+0xe6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800945a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800945e:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009462:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009466:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800946a:	f031 0101 	bics.w	r1, r1, #1
 800946e:	d126      	bne.n	80094be <HAL_RCC_ClockConfig+0xda>
 8009470:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009476:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800947a:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800947e:	2101      	movs	r1, #1
 8009480:	f003 031f 	and.w	r3, r3, #31
 8009484:	fa01 f303 	lsl.w	r3, r1, r3
 8009488:	4203      	tst	r3, r0
 800948a:	d0c0      	beq.n	800940e <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800948c:	686b      	ldr	r3, [r5, #4]
 800948e:	f023 0303 	bic.w	r3, r3, #3
 8009492:	431a      	orrs	r2, r3
 8009494:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 8009496:	f000 f97f 	bl	8009798 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 800949e:	4606      	mov	r6, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094a0:	f241 3788 	movw	r7, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094a4:	d13b      	bne.n	800951e <HAL_RCC_ClockConfig+0x13a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80094a6:	686b      	ldr	r3, [r5, #4]
 80094a8:	f003 030c 	and.w	r3, r3, #12
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d0bd      	beq.n	800942c <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094b0:	f000 f972 	bl	8009798 <HAL_GetTick>
 80094b4:	1b80      	subs	r0, r0, r6
 80094b6:	42b8      	cmp	r0, r7
 80094b8:	d9f5      	bls.n	80094a6 <HAL_RCC_ClockConfig+0xc2>
            return HAL_TIMEOUT;
 80094ba:	2003      	movs	r0, #3
 80094bc:	e7a8      	b.n	8009410 <HAL_RCC_ClockConfig+0x2c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094be:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80094c2:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80094c8:	e7d3      	b.n	8009472 <HAL_RCC_ClockConfig+0x8e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094ca:	2a02      	cmp	r2, #2
 80094cc:	d114      	bne.n	80094f8 <HAL_RCC_ClockConfig+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094d2:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80094d6:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094da:	f3c1 1142 	ubfx	r1, r1, #5, #3
 80094de:	f031 0101 	bics.w	r1, r1, #1
 80094e2:	d103      	bne.n	80094ec <HAL_RCC_ClockConfig+0x108>
 80094e4:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094ea:	e7c4      	b.n	8009476 <HAL_RCC_ClockConfig+0x92>
 80094ec:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80094f0:	fab3 f383 	clz	r3, r3
 80094f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80094f6:	e7f6      	b.n	80094e6 <HAL_RCC_ClockConfig+0x102>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094f8:	2302      	movs	r3, #2
 80094fa:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80094fe:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009502:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8009506:	f031 0101 	bics.w	r1, r1, #1
 800950a:	d102      	bne.n	8009512 <HAL_RCC_ClockConfig+0x12e>
 800950c:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800950e:	2302      	movs	r3, #2
 8009510:	e7b1      	b.n	8009476 <HAL_RCC_ClockConfig+0x92>
 8009512:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009516:	fab3 f383 	clz	r3, r3
 800951a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800951c:	e7f7      	b.n	800950e <HAL_RCC_ClockConfig+0x12a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800951e:	2b02      	cmp	r3, #2
 8009520:	d110      	bne.n	8009544 <HAL_RCC_ClockConfig+0x160>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009522:	686b      	ldr	r3, [r5, #4]
 8009524:	f003 030c 	and.w	r3, r3, #12
 8009528:	2b08      	cmp	r3, #8
 800952a:	f43f af7f 	beq.w	800942c <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800952e:	f000 f933 	bl	8009798 <HAL_GetTick>
 8009532:	1b80      	subs	r0, r0, r6
 8009534:	42b8      	cmp	r0, r7
 8009536:	d9f4      	bls.n	8009522 <HAL_RCC_ClockConfig+0x13e>
 8009538:	e7bf      	b.n	80094ba <HAL_RCC_ClockConfig+0xd6>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800953a:	f000 f92d 	bl	8009798 <HAL_GetTick>
 800953e:	1b80      	subs	r0, r0, r6
 8009540:	42b8      	cmp	r0, r7
 8009542:	d8ba      	bhi.n	80094ba <HAL_RCC_ClockConfig+0xd6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009544:	686b      	ldr	r3, [r5, #4]
 8009546:	f013 0f0c 	tst.w	r3, #12
 800954a:	d1f6      	bne.n	800953a <HAL_RCC_ClockConfig+0x156>
 800954c:	e76e      	b.n	800942c <HAL_RCC_ClockConfig+0x48>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800954e:	6802      	ldr	r2, [r0, #0]
 8009550:	0791      	lsls	r1, r2, #30
 8009552:	d506      	bpl.n	8009562 <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009554:	494e      	ldr	r1, [pc, #312]	; (8009690 <HAL_RCC_ClockConfig+0x2ac>)
 8009556:	6880      	ldr	r0, [r0, #8]
 8009558:	684b      	ldr	r3, [r1, #4]
 800955a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800955e:	4303      	orrs	r3, r0
 8009560:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009562:	07d2      	lsls	r2, r2, #31
 8009564:	d40c      	bmi.n	8009580 <HAL_RCC_ClockConfig+0x19c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009566:	4a49      	ldr	r2, [pc, #292]	; (800968c <HAL_RCC_ClockConfig+0x2a8>)
 8009568:	6813      	ldr	r3, [r2, #0]
 800956a:	f023 0307 	bic.w	r3, r3, #7
 800956e:	4333      	orrs	r3, r6
 8009570:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009572:	6813      	ldr	r3, [r2, #0]
 8009574:	f003 0307 	and.w	r3, r3, #7
 8009578:	42b3      	cmp	r3, r6
 800957a:	f47f af48 	bne.w	800940e <HAL_RCC_ClockConfig+0x2a>
 800957e:	e755      	b.n	800942c <HAL_RCC_ClockConfig+0x48>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009580:	6862      	ldr	r2, [r4, #4]
 8009582:	4d43      	ldr	r5, [pc, #268]	; (8009690 <HAL_RCC_ClockConfig+0x2ac>)
 8009584:	2a01      	cmp	r2, #1
 8009586:	d137      	bne.n	80095f8 <HAL_RCC_ClockConfig+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800958c:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009590:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009594:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8009598:	f031 0101 	bics.w	r1, r1, #1
 800959c:	d126      	bne.n	80095ec <HAL_RCC_ClockConfig+0x208>
 800959e:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095a4:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80095a8:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095ac:	2101      	movs	r1, #1
 80095ae:	f003 031f 	and.w	r3, r3, #31
 80095b2:	fa01 f303 	lsl.w	r3, r1, r3
 80095b6:	4203      	tst	r3, r0
 80095b8:	f43f af29 	beq.w	800940e <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095bc:	686b      	ldr	r3, [r5, #4]
 80095be:	f023 0303 	bic.w	r3, r3, #3
 80095c2:	431a      	orrs	r2, r3
 80095c4:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 80095c6:	f000 f8e7 	bl	8009798 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095ca:	6863      	ldr	r3, [r4, #4]
 80095cc:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 80095ce:	4607      	mov	r7, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095d0:	f241 3888 	movw	r8, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095d4:	d13a      	bne.n	800964c <HAL_RCC_ClockConfig+0x268>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80095d6:	686b      	ldr	r3, [r5, #4]
 80095d8:	f003 030c 	and.w	r3, r3, #12
 80095dc:	2b04      	cmp	r3, #4
 80095de:	d0c2      	beq.n	8009566 <HAL_RCC_ClockConfig+0x182>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095e0:	f000 f8da 	bl	8009798 <HAL_GetTick>
 80095e4:	1bc0      	subs	r0, r0, r7
 80095e6:	4540      	cmp	r0, r8
 80095e8:	d9f5      	bls.n	80095d6 <HAL_RCC_ClockConfig+0x1f2>
 80095ea:	e766      	b.n	80094ba <HAL_RCC_ClockConfig+0xd6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ec:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80095f0:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80095f6:	e7d3      	b.n	80095a0 <HAL_RCC_ClockConfig+0x1bc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095f8:	2a02      	cmp	r2, #2
 80095fa:	d114      	bne.n	8009626 <HAL_RCC_ClockConfig+0x242>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009600:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009604:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009608:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800960c:	f031 0101 	bics.w	r1, r1, #1
 8009610:	d103      	bne.n	800961a <HAL_RCC_ClockConfig+0x236>
 8009612:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009618:	e7c4      	b.n	80095a4 <HAL_RCC_ClockConfig+0x1c0>
 800961a:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800961e:	fab3 f383 	clz	r3, r3
 8009622:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009624:	e7f6      	b.n	8009614 <HAL_RCC_ClockConfig+0x230>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009626:	2302      	movs	r3, #2
 8009628:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800962c:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009630:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8009634:	f031 0101 	bics.w	r1, r1, #1
 8009638:	d102      	bne.n	8009640 <HAL_RCC_ClockConfig+0x25c>
 800963a:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800963c:	2302      	movs	r3, #2
 800963e:	e7b1      	b.n	80095a4 <HAL_RCC_ClockConfig+0x1c0>
 8009640:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009644:	fab3 f383 	clz	r3, r3
 8009648:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800964a:	e7f7      	b.n	800963c <HAL_RCC_ClockConfig+0x258>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800964c:	2b02      	cmp	r3, #2
 800964e:	d110      	bne.n	8009672 <HAL_RCC_ClockConfig+0x28e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009650:	686b      	ldr	r3, [r5, #4]
 8009652:	f003 030c 	and.w	r3, r3, #12
 8009656:	2b08      	cmp	r3, #8
 8009658:	d085      	beq.n	8009566 <HAL_RCC_ClockConfig+0x182>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800965a:	f000 f89d 	bl	8009798 <HAL_GetTick>
 800965e:	1bc0      	subs	r0, r0, r7
 8009660:	4540      	cmp	r0, r8
 8009662:	d9f5      	bls.n	8009650 <HAL_RCC_ClockConfig+0x26c>
 8009664:	e729      	b.n	80094ba <HAL_RCC_ClockConfig+0xd6>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009666:	f000 f897 	bl	8009798 <HAL_GetTick>
 800966a:	1bc0      	subs	r0, r0, r7
 800966c:	4540      	cmp	r0, r8
 800966e:	f63f af24 	bhi.w	80094ba <HAL_RCC_ClockConfig+0xd6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009672:	686b      	ldr	r3, [r5, #4]
 8009674:	f013 0f0c 	tst.w	r3, #12
 8009678:	d1f5      	bne.n	8009666 <HAL_RCC_ClockConfig+0x282>
 800967a:	e774      	b.n	8009566 <HAL_RCC_ClockConfig+0x182>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800967c:	4904      	ldr	r1, [pc, #16]	; (8009690 <HAL_RCC_ClockConfig+0x2ac>)
 800967e:	68e0      	ldr	r0, [r4, #12]
 8009680:	684b      	ldr	r3, [r1, #4]
 8009682:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009686:	4303      	orrs	r3, r0
 8009688:	604b      	str	r3, [r1, #4]
 800968a:	e6d3      	b.n	8009434 <HAL_RCC_ClockConfig+0x50>
 800968c:	40022000 	.word	0x40022000
 8009690:	40021000 	.word	0x40021000

08009694 <HAL_RCC_GetSysClockFreq>:
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009694:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8009696:	4c15      	ldr	r4, [pc, #84]	; (80096ec <HAL_RCC_GetSysClockFreq+0x58>)
 8009698:	6861      	ldr	r1, [r4, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800969a:	f001 030c 	and.w	r3, r1, #12
 800969e:	2b08      	cmp	r3, #8
 80096a0:	d121      	bne.n	80096e6 <HAL_RCC_GetSysClockFreq+0x52>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096a2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80096a6:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80096aa:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80096ae:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	fa22 f303 	lsr.w	r3, r2, r3
 80096b8:	4a0d      	ldr	r2, [pc, #52]	; (80096f0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80096ba:	5cd0      	ldrb	r0, [r2, r3]
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80096bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096be:	230f      	movs	r3, #15
 80096c0:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80096c4:	fab3 f383 	clz	r3, r3
 80096c8:	f002 020f 	and.w	r2, r2, #15
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	fa22 f303 	lsr.w	r3, r2, r3
 80096d2:	4a08      	ldr	r2, [pc, #32]	; (80096f4 <HAL_RCC_GetSysClockFreq+0x60>)
 80096d4:	5cd2      	ldrb	r2, [r2, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80096d6:	03cb      	lsls	r3, r1, #15
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 80096d8:	bf4a      	itet	mi
 80096da:	4b07      	ldrmi	r3, [pc, #28]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x64>)
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 80096dc:	4b07      	ldrpl	r3, [pc, #28]	; (80096fc <HAL_RCC_GetSysClockFreq+0x68>)
      pllclk = (HSE_VALUE/prediv) * pllmul;
 80096de:	fbb3 f3f2 	udivmi	r3, r3, r2
      pllclk = (HSI_VALUE >> 1) * pllmul;
 80096e2:	4358      	muls	r0, r3
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 80096e4:	bd10      	pop	{r4, pc}
    sysclockfreq = HSE_VALUE;
 80096e6:	4804      	ldr	r0, [pc, #16]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x64>)
  return sysclockfreq;
 80096e8:	e7fc      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0x50>
 80096ea:	bf00      	nop
 80096ec:	40021000 	.word	0x40021000
 80096f0:	0801ca38 	.word	0x0801ca38
 80096f4:	0801ca48 	.word	0x0801ca48
 80096f8:	007a1200 	.word	0x007a1200
 80096fc:	003d0900 	.word	0x003d0900

08009700 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009700:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009702:	f7ff ffc7 	bl	8009694 <HAL_RCC_GetSysClockFreq>
 8009706:	4b09      	ldr	r3, [pc, #36]	; (800972c <HAL_RCC_GetHCLKFreq+0x2c>)
 8009708:	685a      	ldr	r2, [r3, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800970a:	23f0      	movs	r3, #240	; 0xf0
 800970c:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009710:	fab3 f383 	clz	r3, r3
 8009714:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009718:	b2db      	uxtb	r3, r3
 800971a:	fa22 f303 	lsr.w	r3, r2, r3
 800971e:	4a04      	ldr	r2, [pc, #16]	; (8009730 <HAL_RCC_GetHCLKFreq+0x30>)
 8009720:	5cd3      	ldrb	r3, [r2, r3]
 8009722:	40d8      	lsrs	r0, r3
 8009724:	4b03      	ldr	r3, [pc, #12]	; (8009734 <HAL_RCC_GetHCLKFreq+0x34>)
 8009726:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8009728:	bd08      	pop	{r3, pc}
 800972a:	bf00      	nop
 800972c:	40021000 	.word	0x40021000
 8009730:	0801ca28 	.word	0x0801ca28
 8009734:	200009cc 	.word	0x200009cc

08009738 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8009738:	4770      	bx	lr

0800973a <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 800973a:	b507      	push	{r0, r1, r2, lr}
 800973c:	9001      	str	r0, [sp, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800973e:	f7ff ffdf 	bl	8009700 <HAL_RCC_GetHCLKFreq>
 8009742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009746:	fbb0 f0f3 	udiv	r0, r0, r3
 800974a:	f000 f88b 	bl	8009864 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800974e:	9901      	ldr	r1, [sp, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009756:	f000 f845 	bl	80097e4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800975a:	2000      	movs	r0, #0
 800975c:	b003      	add	sp, #12
 800975e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009764 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009764:	4a07      	ldr	r2, [pc, #28]	; (8009784 <HAL_Init+0x20>)
{
 8009766:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009768:	6813      	ldr	r3, [r2, #0]
 800976a:	f043 0310 	orr.w	r3, r3, #16
 800976e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009770:	2003      	movs	r0, #3
 8009772:	f000 f825 	bl	80097c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8009776:	200f      	movs	r0, #15
 8009778:	f7ff ffdf 	bl	800973a <HAL_InitTick>
  HAL_MspInit();
 800977c:	f7ff ffdc 	bl	8009738 <HAL_MspInit>
}
 8009780:	2000      	movs	r0, #0
 8009782:	bd08      	pop	{r3, pc}
 8009784:	40022000 	.word	0x40022000

08009788 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8009788:	4a02      	ldr	r2, [pc, #8]	; (8009794 <HAL_IncTick+0xc>)
 800978a:	6813      	ldr	r3, [r2, #0]
 800978c:	3301      	adds	r3, #1
 800978e:	6013      	str	r3, [r2, #0]
}
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	200010a4 	.word	0x200010a4

08009798 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8009798:	4b01      	ldr	r3, [pc, #4]	; (80097a0 <HAL_GetTick+0x8>)
 800979a:	6818      	ldr	r0, [r3, #0]
}
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	200010a4 	.word	0x200010a4

080097a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80097a4:	b513      	push	{r0, r1, r4, lr}
 80097a6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80097a8:	f7ff fff6 	bl	8009798 <HAL_GetTick>
 80097ac:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80097ae:	f7ff fff3 	bl	8009798 <HAL_GetTick>
 80097b2:	9a01      	ldr	r2, [sp, #4]
 80097b4:	1b03      	subs	r3, r0, r4
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d3f9      	bcc.n	80097ae <HAL_Delay+0xa>
  {
  }
}
 80097ba:	b002      	add	sp, #8
 80097bc:	bd10      	pop	{r4, pc}
	...

080097c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097c0:	4907      	ldr	r1, [pc, #28]	; (80097e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80097c2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80097c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80097c8:	0203      	lsls	r3, r0, #8
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80097ca:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80097cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80097d0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80097d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80097d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80097d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80097dc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80097de:	4770      	bx	lr
 80097e0:	e000ed00 	.word	0xe000ed00

080097e4 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 80097e4:	4b17      	ldr	r3, [pc, #92]	; (8009844 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80097e6:	b570      	push	{r4, r5, r6, lr}
 80097e8:	68dd      	ldr	r5, [r3, #12]
 80097ea:	f3c5 2502 	ubfx	r5, r5, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80097ee:	f1c5 0307 	rsb	r3, r5, #7
 80097f2:	2b04      	cmp	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80097f4:	f105 0404 	add.w	r4, r5, #4
  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80097f8:	bf28      	it	cs
 80097fa:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80097fc:	2601      	movs	r6, #1
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80097fe:	2c06      	cmp	r4, #6
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8009800:	fa06 f403 	lsl.w	r4, r6, r3
 8009804:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8009808:	bf8c      	ite	hi
 800980a:	3d03      	subhi	r5, #3
 800980c:	2500      	movls	r5, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800980e:	4021      	ands	r1, r4
 8009810:	40a9      	lsls	r1, r5
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8009812:	fa06 f505 	lsl.w	r5, r6, r5
 8009816:	3d01      	subs	r5, #1
 8009818:	ea05 0302 	and.w	r3, r5, r2
  if(IRQn < 0) {
 800981c:	2800      	cmp	r0, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800981e:	ea43 0301 	orr.w	r3, r3, r1
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8009822:	bfac      	ite	ge
 8009824:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009828:	4a07      	ldrlt	r2, [pc, #28]	; (8009848 <HAL_NVIC_SetPriority+0x64>)
 800982a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800982e:	bfb8      	it	lt
 8009830:	f000 000f 	andlt.w	r0, r0, #15
 8009834:	b2db      	uxtb	r3, r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8009836:	bfaa      	itet	ge
 8009838:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800983c:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800983e:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009842:	bd70      	pop	{r4, r5, r6, pc}
 8009844:	e000ed00 	.word	0xe000ed00
 8009848:	e000ed14 	.word	0xe000ed14

0800984c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800984c:	0942      	lsrs	r2, r0, #5
 800984e:	2301      	movs	r3, #1
 8009850:	f000 001f 	and.w	r0, r0, #31
 8009854:	fa03 f000 	lsl.w	r0, r3, r0
 8009858:	4b01      	ldr	r3, [pc, #4]	; (8009860 <HAL_NVIC_EnableIRQ+0x14>)
 800985a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800985e:	4770      	bx	lr
 8009860:	e000e100 	.word	0xe000e100

08009864 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8009864:	3801      	subs	r0, #1
 8009866:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800986a:	d20b      	bcs.n	8009884 <HAL_SYSTICK_Config+0x20>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800986c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009870:	4a05      	ldr	r2, [pc, #20]	; (8009888 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8009872:	6158      	str	r0, [r3, #20]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009874:	21f0      	movs	r1, #240	; 0xf0
 8009876:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800987a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800987c:	2207      	movs	r2, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800987e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009880:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8009882:	4770      	bx	lr
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8009884:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8009886:	4770      	bx	lr
 8009888:	e000ed00 	.word	0xe000ed00

0800988c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009890:	4a5d      	ldr	r2, [pc, #372]	; (8009a08 <HAL_GPIO_Init+0x17c>)
        __SYSCFG_CLK_ENABLE();
 8009892:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009a10 <HAL_GPIO_Init+0x184>
  for (position = 0; position < GPIO_NUMBER; position++)
 8009896:	2300      	movs	r3, #0
    ioposition = ((uint32_t)0x01) << position;
 8009898:	f04f 0901 	mov.w	r9, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800989c:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800989e:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80098a2:	ea0a 0504 	and.w	r5, sl, r4
    if (iocurrent == ioposition)
 80098a6:	ea3a 0404 	bics.w	r4, sl, r4
 80098aa:	f040 809c 	bne.w	80099e6 <HAL_GPIO_Init+0x15a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80098ae:	684c      	ldr	r4, [r1, #4]
 80098b0:	f024 0e10 	bic.w	lr, r4, #16
 80098b4:	f1be 0f02 	cmp.w	lr, #2
 80098b8:	d114      	bne.n	80098e4 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3];
 80098ba:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80098be:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80098c2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80098c6:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80098ca:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80098ce:	270f      	movs	r7, #15
 80098d0:	fa07 f70b 	lsl.w	r7, r7, fp
 80098d4:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80098d8:	690e      	ldr	r6, [r1, #16]
 80098da:	fa06 f60b 	lsl.w	r6, r6, fp
 80098de:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80098e0:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 80098e4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80098e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80098ec:	2703      	movs	r7, #3
 80098ee:	fa07 f70c 	lsl.w	r7, r7, ip
 80098f2:	ea2b 0b07 	bic.w	fp, fp, r7
 80098f6:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80098f8:	f004 0703 	and.w	r7, r4, #3
 80098fc:	fa07 f70c 	lsl.w	r7, r7, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009900:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009904:	ea47 070b 	orr.w	r7, r7, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009908:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 800990c:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800990e:	d811      	bhi.n	8009934 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 8009910:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009912:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8009916:	68cf      	ldr	r7, [r1, #12]
 8009918:	fa07 f70c 	lsl.w	r7, r7, ip
 800991c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8009920:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009922:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009924:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009928:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800992c:	409f      	lsls	r7, r3
 800992e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8009932:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8009934:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009936:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009938:	688e      	ldr	r6, [r1, #8]
 800993a:	fa06 f60c 	lsl.w	r6, r6, ip
 800993e:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8009940:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8009942:	00e6      	lsls	r6, r4, #3
 8009944:	d54f      	bpl.n	80099e6 <HAL_GPIO_Init+0x15a>
        __SYSCFG_CLK_ENABLE();
 8009946:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800994a:	f023 0703 	bic.w	r7, r3, #3
 800994e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8009952:	f046 0601 	orr.w	r6, r6, #1
 8009956:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800995a:	f8c8 6018 	str.w	r6, [r8, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800995e:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2];
 8009962:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009964:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8009968:	f04f 0c0f 	mov.w	ip, #15
 800996c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8009970:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009974:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8009978:	d03b      	beq.n	80099f2 <HAL_GPIO_Init+0x166>
 800997a:	4e24      	ldr	r6, [pc, #144]	; (8009a0c <HAL_GPIO_Init+0x180>)
 800997c:	42b0      	cmp	r0, r6
 800997e:	d03a      	beq.n	80099f6 <HAL_GPIO_Init+0x16a>
 8009980:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009984:	42b0      	cmp	r0, r6
 8009986:	d038      	beq.n	80099fa <HAL_GPIO_Init+0x16e>
 8009988:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800998c:	42b0      	cmp	r0, r6
 800998e:	d036      	beq.n	80099fe <HAL_GPIO_Init+0x172>
 8009990:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009994:	42b0      	cmp	r0, r6
 8009996:	d034      	beq.n	8009a02 <HAL_GPIO_Init+0x176>
 8009998:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800999c:	42b0      	cmp	r0, r6
 800999e:	bf0c      	ite	eq
 80099a0:	2605      	moveq	r6, #5
 80099a2:	2606      	movne	r6, #6
 80099a4:	fa06 f60e 	lsl.w	r6, r6, lr
 80099a8:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80099ac:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80099ae:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80099b0:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80099b2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80099b6:	bf0c      	ite	eq
 80099b8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80099ba:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80099bc:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80099be:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80099c0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80099c4:	bf0c      	ite	eq
 80099c6:	403e      	andeq	r6, r7
        { 
          temp |= iocurrent;
 80099c8:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80099ca:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80099cc:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80099ce:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80099d2:	bf0c      	ite	eq
 80099d4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80099d6:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80099d8:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80099da:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80099dc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80099de:	bf54      	ite	pl
 80099e0:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80099e2:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80099e4:	60d6      	str	r6, [r2, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 80099e6:	3301      	adds	r3, #1
 80099e8:	2b10      	cmp	r3, #16
 80099ea:	f47f af57 	bne.w	800989c <HAL_GPIO_Init+0x10>
      }
    }
  } 
}
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 80099f2:	2600      	movs	r6, #0
 80099f4:	e7d6      	b.n	80099a4 <HAL_GPIO_Init+0x118>
 80099f6:	2601      	movs	r6, #1
 80099f8:	e7d4      	b.n	80099a4 <HAL_GPIO_Init+0x118>
 80099fa:	2602      	movs	r6, #2
 80099fc:	e7d2      	b.n	80099a4 <HAL_GPIO_Init+0x118>
 80099fe:	2603      	movs	r6, #3
 8009a00:	e7d0      	b.n	80099a4 <HAL_GPIO_Init+0x118>
 8009a02:	2604      	movs	r6, #4
 8009a04:	e7ce      	b.n	80099a4 <HAL_GPIO_Init+0x118>
 8009a06:	bf00      	nop
 8009a08:	40010400 	.word	0x40010400
 8009a0c:	48000400 	.word	0x48000400
 8009a10:	40021000 	.word	0x40021000

08009a14 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009a14:	6903      	ldr	r3, [r0, #16]
 8009a16:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8009a18:	bf14      	ite	ne
 8009a1a:	2001      	movne	r0, #1
 8009a1c:	2000      	moveq	r0, #0
 8009a1e:	4770      	bx	lr

08009a20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009a20:	b10a      	cbz	r2, 8009a26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8009a22:	8301      	strh	r1, [r0, #24]
 8009a24:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8009a26:	8341      	strh	r1, [r0, #26]
  }
}
 8009a28:	4770      	bx	lr

08009a2a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8009a2a:	6943      	ldr	r3, [r0, #20]
 8009a2c:	4059      	eors	r1, r3
 8009a2e:	6141      	str	r1, [r0, #20]
}
 8009a30:	4770      	bx	lr

08009a32 <HAL_GPIO_EXTI_Callback>:
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8009a32:	4770      	bx	lr

08009a34 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8009a34:	4a04      	ldr	r2, [pc, #16]	; (8009a48 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8009a36:	6951      	ldr	r1, [r2, #20]
 8009a38:	4201      	tst	r1, r0
{
 8009a3a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8009a3c:	d002      	beq.n	8009a44 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009a3e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009a40:	f7ff fff7 	bl	8009a32 <HAL_GPIO_EXTI_Callback>
}
 8009a44:	bd08      	pop	{r3, pc}
 8009a46:	bf00      	nop
 8009a48:	40010400 	.word	0x40010400

08009a4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8009a4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8009a4e:	4604      	mov	r4, r0
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d042      	beq.n	8009ada <HAL_PCD_Init+0x8e>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 8009a54:	2302      	movs	r3, #2
 8009a56:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8009a5a:	f002 f891 	bl	800bb80 <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009a5e:	2100      	movs	r1, #0
 8009a60:	6860      	ldr	r0, [r4, #4]
 8009a62:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8009a66:	460a      	mov	r2, r1
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8009a68:	2501      	movs	r5, #1
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009a6a:	4288      	cmp	r0, r1
 8009a6c:	f103 031c 	add.w	r3, r3, #28
 8009a70:	d11b      	bne.n	8009aaa <HAL_PCD_Init+0x5e>
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009a72:	2000      	movs	r0, #0
 8009a74:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 8009a78:	4603      	mov	r3, r0
 8009a7a:	4281      	cmp	r1, r0
 8009a7c:	f102 021c 	add.w	r2, r2, #28
 8009a80:	d11f      	bne.n	8009ac2 <HAL_PCD_Init+0x76>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	2101      	movs	r1, #1
 8009a86:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8009a8a:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
 hpcd->Instance->CNTR = 0;
 8009a8e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
 8009a92:	2000      	movs	r0, #0
 hpcd->Instance->ISTR = 0;
 8009a94:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8009a98:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8009a9c:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  hpcd->USB_Address = 0;
 8009aa0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 8009aa4:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
}
 8009aa8:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 8009aaa:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].xfer_buff = 0;
 8009aae:	e943 2204 	strd	r2, r2, [r3, #-16]
   hpcd->IN_ep[i].is_in = 1;
 8009ab2:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8009ab6:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].xfer_len = 0;
 8009aba:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009abe:	3101      	adds	r1, #1
 8009ac0:	e7d3      	b.n	8009a6a <HAL_PCD_Init+0x1e>
   hpcd->OUT_ep[i].num = i;
 8009ac2:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8009ac6:	e942 3304 	strd	r3, r3, [r2, #-16]
   hpcd->OUT_ep[i].is_in = 0;
 8009aca:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8009ace:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].xfer_len = 0;
 8009ad2:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	e7cf      	b.n	8009a7a <HAL_PCD_Init+0x2e>
    return HAL_ERROR;
 8009ada:	2001      	movs	r0, #1
 8009adc:	e7e4      	b.n	8009aa8 <HAL_PCD_Init+0x5c>

08009ade <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8009ade:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	f000 fe88 	bl	800a7f6 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	bd08      	pop	{r3, pc}

08009aea <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8009aea:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d00f      	beq.n	8009b12 <HAL_PCD_SetAddress+0x28>
 8009af2:	2301      	movs	r3, #1
 8009af4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8009af8:	b941      	cbnz	r1, 8009b0c <HAL_PCD_SetAddress+0x22>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8009afa:	6803      	ldr	r3, [r0, #0]
 8009afc:	2280      	movs	r2, #128	; 0x80
 8009afe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 8009b02:	2300      	movs	r3, #0
 8009b04:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 8009b08:	4618      	mov	r0, r3
 8009b0a:	4770      	bx	lr
     hpcd->USB_Address = address;
 8009b0c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8009b10:	e7f7      	b.n	8009b02 <HAL_PCD_SetAddress+0x18>
   __HAL_LOCK(hpcd); 
 8009b12:	2002      	movs	r0, #2
}
 8009b14:	4770      	bx	lr
	...

08009b18 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009b18:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8009b1a:	b24d      	sxtb	r5, r1
 8009b1c:	241c      	movs	r4, #28
 8009b1e:	2d00      	cmp	r5, #0
 8009b20:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009b24:	bfb3      	iteet	lt
 8009b26:	fb04 0406 	mlalt	r4, r4, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009b2a:	fb04 0101 	mlage	r1, r4, r1, r0
 8009b2e:	f101 04b4 	addge.w	r4, r1, #180	; 0xb4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009b32:	3428      	addlt	r4, #40	; 0x28
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8009b34:	0fe9      	lsrs	r1, r5, #31
  ep->num   = ep_addr & 0x7F;
 8009b36:	7026      	strb	r6, [r4, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8009b38:	7061      	strb	r1, [r4, #1]
  ep->maxpacket = ep_mps;
 8009b3a:	60e2      	str	r2, [r4, #12]
  ep->type = ep_type;
 8009b3c:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 8009b3e:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
 8009b42:	2a01      	cmp	r2, #1
 8009b44:	f000 8156 	beq.w	8009df4 <HAL_PCD_EP_Open+0x2dc>
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8009b4e:	b231      	sxth	r1, r6
 8009b50:	6802      	ldr	r2, [r0, #0]
  switch (ep->type)
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d80f      	bhi.n	8009b76 <HAL_PCD_EP_Open+0x5e>
 8009b56:	e8df f003 	tbb	[pc, r3]
 8009b5a:	6502      	.short	0x6502
 8009b5c:	5a51      	.short	0x5a51
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8009b5e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009b62:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b6a:	041b      	lsls	r3, r3, #16
 8009b6c:	0c1b      	lsrs	r3, r3, #16
 8009b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8009b72:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8009b76:	f832 7021 	ldrh.w	r7, [r2, r1, lsl #2]
 8009b7a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8009b7e:	401f      	ands	r7, r3
 8009b80:	433e      	orrs	r6, r7
 8009b82:	f248 0c80 	movw	ip, #32896	; 0x8080
 8009b86:	ea4c 0606 	orr.w	r6, ip, r6
 8009b8a:	f822 6021 	strh.w	r6, [r2, r1, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8009b8e:	7aa6      	ldrb	r6, [r4, #10]
  {
    if (ep->is_in)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009b90:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8009b94:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  if (ep->doublebuffer == 0) 
 8009b98:	2e00      	cmp	r6, #0
 8009b9a:	f040 808e 	bne.w	8009cba <HAL_PCD_EP_Open+0x1a2>
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009b9e:	88a6      	ldrh	r6, [r4, #4]
    if (ep->is_in)
 8009ba0:	2d00      	cmp	r5, #0
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009ba2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009ba6:	ea4f 0646 	mov.w	r6, r6, lsl #1
    if (ep->is_in)
 8009baa:	da46      	bge.n	8009c3a <HAL_PCD_EP_Open+0x122>
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009bac:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009bb0:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009bb4:	fa1e fe85 	uxtah	lr, lr, r5
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009bb8:	0664      	lsls	r4, r4, #25
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009bba:	f847 601e 	str.w	r6, [r7, lr, lsl #1]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009bbe:	d508      	bpl.n	8009bd2 <HAL_PCD_EP_Open+0xba>
 8009bc0:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 8009bc4:	4023      	ands	r3, r4
 8009bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bce:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8009bd2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bde:	041b      	lsls	r3, r3, #16
 8009be0:	0c1b      	lsrs	r3, r3, #16
 8009be2:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009bee:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8009bf8:	4618      	mov	r0, r3
}
 8009bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8009bfc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009c00:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c08:	041b      	lsls	r3, r3, #16
 8009c0a:	0c1b      	lsrs	r3, r3, #16
 8009c0c:	e7b1      	b.n	8009b72 <HAL_PCD_EP_Open+0x5a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8009c0e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009c12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c1a:	041b      	lsls	r3, r3, #16
 8009c1c:	0c1b      	lsrs	r3, r3, #16
 8009c1e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009c22:	e7a6      	b.n	8009b72 <HAL_PCD_EP_Open+0x5a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8009c24:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009c28:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c30:	041b      	lsls	r3, r3, #16
 8009c32:	0c1b      	lsrs	r3, r3, #16
 8009c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c38:	e79b      	b.n	8009b72 <HAL_PCD_EP_Open+0x5a>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009c3a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8009c3e:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009c42:	fa1e f383 	uxtah	r3, lr, r3
 8009c46:	3304      	adds	r3, #4
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8009c48:	fa1e f585 	uxtah	r5, lr, r5
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009c4c:	f847 6013 	str.w	r6, [r7, r3, lsl #1]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8009c50:	68e4      	ldr	r4, [r4, #12]
 8009c52:	2c3e      	cmp	r4, #62	; 0x3e
 8009c54:	f105 0506 	add.w	r5, r5, #6
 8009c58:	d927      	bls.n	8009caa <HAL_PCD_EP_Open+0x192>
 8009c5a:	f3c4 164f 	ubfx	r6, r4, #5, #16
 8009c5e:	06e3      	lsls	r3, r4, #27
 8009c60:	bf04      	itt	eq
 8009c62:	f106 33ff 	addeq.w	r3, r6, #4294967295	; 0xffffffff
 8009c66:	b29e      	uxtheq	r6, r3
 8009c68:	4b63      	ldr	r3, [pc, #396]	; (8009df8 <HAL_PCD_EP_Open+0x2e0>)
 8009c6a:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	f847 3015 	str.w	r3, [r7, r5, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009c74:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009c78:	045f      	lsls	r7, r3, #17
 8009c7a:	d50b      	bpl.n	8009c94 <HAL_PCD_EP_Open+0x17c>
 8009c7c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c84:	051b      	lsls	r3, r3, #20
 8009c86:	0d1b      	lsrs	r3, r3, #20
 8009c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c90:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009c94:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009c98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca0:	041b      	lsls	r3, r3, #16
 8009ca2:	0c1b      	lsrs	r3, r3, #16
 8009ca4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009ca8:	e79d      	b.n	8009be6 <HAL_PCD_EP_Open+0xce>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8009caa:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8009cae:	07e4      	lsls	r4, r4, #31
 8009cb0:	bf44      	itt	mi
 8009cb2:	3301      	addmi	r3, #1
 8009cb4:	b29b      	uxthmi	r3, r3
 8009cb6:	029b      	lsls	r3, r3, #10
 8009cb8:	e7d9      	b.n	8009c6e <HAL_PCD_EP_Open+0x156>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8009cba:	f832 6021 	ldrh.w	r6, [r2, r1, lsl #2]
 8009cbe:	b2b6      	uxth	r6, r6
 8009cc0:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8009cc4:	401e      	ands	r6, r3
 8009cc6:	ea4c 0606 	orr.w	r6, ip, r6
 8009cca:	f822 6021 	strh.w	r6, [r2, r1, lsl #2]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8009cce:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 8009cd2:	88e6      	ldrh	r6, [r4, #6]
 8009cd4:	8924      	ldrh	r4, [r4, #8]
 8009cd6:	fa1e fc8c 	uxtah	ip, lr, ip
 8009cda:	0876      	lsrs	r6, r6, #1
 8009cdc:	0076      	lsls	r6, r6, #1
 8009cde:	f847 601c 	str.w	r6, [r7, ip, lsl #1]
 8009ce2:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
 8009ce6:	fa1e fe86 	uxtah	lr, lr, r6
 8009cea:	f10e 0e04 	add.w	lr, lr, #4
 8009cee:	0864      	lsrs	r4, r4, #1
 8009cf0:	0064      	lsls	r4, r4, #1
    if (ep->is_in==0)
 8009cf2:	2d00      	cmp	r5, #0
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8009cf4:	f847 401e 	str.w	r4, [r7, lr, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009cf8:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
    if (ep->is_in==0)
 8009cfc:	db3f      	blt.n	8009d7e <HAL_PCD_EP_Open+0x266>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009cfe:	0466      	lsls	r6, r4, #17
 8009d00:	d508      	bpl.n	8009d14 <HAL_PCD_EP_Open+0x1fc>
 8009d02:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 8009d06:	4023      	ands	r3, r4
 8009d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d10:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009d14:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009d18:	065d      	lsls	r5, r3, #25
 8009d1a:	d50b      	bpl.n	8009d34 <HAL_PCD_EP_Open+0x21c>
 8009d1c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009d20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d24:	051b      	lsls	r3, r3, #20
 8009d26:	0d1b      	lsrs	r3, r3, #20
 8009d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d30:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8009d34:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d3c:	051b      	lsls	r3, r3, #20
 8009d3e:	0d1b      	lsrs	r3, r3, #20
 8009d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d48:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009d4c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009d50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d58:	041b      	lsls	r3, r3, #16
 8009d5a:	0c1b      	lsrs	r3, r3, #16
 8009d5c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009d60:	f248 0480 	movw	r4, #32896	; 0x8080
 8009d64:	4323      	orrs	r3, r4
 8009d66:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009d6a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009d76:	041b      	lsls	r3, r3, #16
 8009d78:	0c1b      	lsrs	r3, r3, #16
 8009d7a:	4323      	orrs	r3, r4
 8009d7c:	e737      	b.n	8009bee <HAL_PCD_EP_Open+0xd6>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009d7e:	0464      	lsls	r4, r4, #17
 8009d80:	d508      	bpl.n	8009d94 <HAL_PCD_EP_Open+0x27c>
 8009d82:	f832 4021 	ldrh.w	r4, [r2, r1, lsl #2]
 8009d86:	4023      	ands	r3, r4
 8009d88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d90:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009d94:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009d98:	065b      	lsls	r3, r3, #25
 8009d9a:	d50b      	bpl.n	8009db4 <HAL_PCD_EP_Open+0x29c>
 8009d9c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009da4:	051b      	lsls	r3, r3, #20
 8009da6:	0d1b      	lsrs	r3, r3, #20
 8009da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009db0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8009db4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dbc:	051b      	lsls	r3, r3, #20
 8009dbe:	0d1b      	lsrs	r3, r3, #20
 8009dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009dcc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dd8:	041b      	lsls	r3, r3, #16
 8009dda:	0c1b      	lsrs	r3, r3, #16
 8009ddc:	f248 0480 	movw	r4, #32896	; 0x8080
 8009de0:	4323      	orrs	r3, r4
 8009de2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009de6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df2:	e7c0      	b.n	8009d76 <HAL_PCD_EP_Open+0x25e>
  __HAL_LOCK(hpcd); 
 8009df4:	2002      	movs	r0, #2
 8009df6:	e700      	b.n	8009bfa <HAL_PCD_EP_Open+0xe2>
 8009df8:	ffff8000 	.word	0xffff8000

08009dfc <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8009dfc:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8009dfe:	b24c      	sxtb	r4, r1
 8009e00:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8009e04:	2c00      	cmp	r4, #0
 8009e06:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009e0a:	bfb5      	itete	lt
 8009e0c:	fb02 0103 	mlalt	r1, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009e10:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009e14:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009e16:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8009e18:	0fe2      	lsrs	r2, r4, #31
  ep->num   = ep_addr & 0x7F;
 8009e1a:	700b      	strb	r3, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8009e1c:	704a      	strb	r2, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8009e1e:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
 8009e22:	2a01      	cmp	r2, #1
 8009e24:	f000 80c4 	beq.w	8009fb0 <HAL_PCD_EP_Close+0x1b4>
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140

  if (ep->doublebuffer == 0) 
 8009e2e:	7a89      	ldrb	r1, [r1, #10]
 8009e30:	6802      	ldr	r2, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009e32:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0) 
 8009e34:	bbc9      	cbnz	r1, 8009eaa <HAL_PCD_EP_Close+0xae>
    if (ep->is_in)
 8009e36:	2c00      	cmp	r4, #0
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009e38:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    if (ep->is_in)
 8009e3c:	da20      	bge.n	8009e80 <HAL_PCD_EP_Close+0x84>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009e3e:	064c      	lsls	r4, r1, #25
 8009e40:	d50b      	bpl.n	8009e5a <HAL_PCD_EP_Close+0x5e>
 8009e42:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009e46:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009e4a:	0509      	lsls	r1, r1, #20
 8009e4c:	0d09      	lsrs	r1, r1, #20
 8009e4e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009e52:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009e56:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 8009e5a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009e5e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009e62:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009e66:	0409      	lsls	r1, r1, #16
 8009e68:	0c09      	lsrs	r1, r1, #16
 8009e6a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009e6e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009e72:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8009e76:	2300      	movs	r3, #0
 8009e78:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 8009e7c:	4618      	mov	r0, r3
}
 8009e7e:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009e80:	0449      	lsls	r1, r1, #17
 8009e82:	d50b      	bpl.n	8009e9c <HAL_PCD_EP_Close+0xa0>
 8009e84:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009e88:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009e8c:	0509      	lsls	r1, r1, #20
 8009e8e:	0d09      	lsrs	r1, r1, #20
 8009e90:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8009e94:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009e98:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009e9c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009ea0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009ea4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009ea8:	e7dd      	b.n	8009e66 <HAL_PCD_EP_Close+0x6a>
    if (ep->is_in==0)
 8009eaa:	2c00      	cmp	r4, #0
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009eac:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    if (ep->is_in==0)
 8009eb0:	db40      	blt.n	8009f34 <HAL_PCD_EP_Close+0x138>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009eb2:	044c      	lsls	r4, r1, #17
 8009eb4:	d50b      	bpl.n	8009ece <HAL_PCD_EP_Close+0xd2>
 8009eb6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009eba:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009ebe:	0509      	lsls	r1, r1, #20
 8009ec0:	0d09      	lsrs	r1, r1, #20
 8009ec2:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8009ec6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009eca:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009ece:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009ed2:	0649      	lsls	r1, r1, #25
 8009ed4:	d50b      	bpl.n	8009eee <HAL_PCD_EP_Close+0xf2>
 8009ed6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009eda:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009ede:	0509      	lsls	r1, r1, #20
 8009ee0:	0d09      	lsrs	r1, r1, #20
 8009ee2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009ee6:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009eea:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8009eee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009ef2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009ef6:	0509      	lsls	r1, r1, #20
 8009ef8:	0d09      	lsrs	r1, r1, #20
 8009efa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009efe:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009f02:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009f06:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009f0a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009f0e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009f12:	0409      	lsls	r1, r1, #16
 8009f14:	0c09      	lsrs	r1, r1, #16
 8009f16:	f248 0480 	movw	r4, #32896	; 0x8080
 8009f1a:	4321      	orrs	r1, r4
 8009f1c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009f20:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009f24:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009f28:	f021 0140 	bic.w	r1, r1, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009f2c:	0409      	lsls	r1, r1, #16
 8009f2e:	0c09      	lsrs	r1, r1, #16
 8009f30:	4321      	orrs	r1, r4
 8009f32:	e79e      	b.n	8009e72 <HAL_PCD_EP_Close+0x76>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009f34:	044c      	lsls	r4, r1, #17
 8009f36:	d50b      	bpl.n	8009f50 <HAL_PCD_EP_Close+0x154>
 8009f38:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009f3c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009f40:	0509      	lsls	r1, r1, #20
 8009f42:	0d09      	lsrs	r1, r1, #20
 8009f44:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8009f48:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009f4c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009f50:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009f54:	0649      	lsls	r1, r1, #25
 8009f56:	d50b      	bpl.n	8009f70 <HAL_PCD_EP_Close+0x174>
 8009f58:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009f5c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009f60:	0509      	lsls	r1, r1, #20
 8009f62:	0d09      	lsrs	r1, r1, #20
 8009f64:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009f68:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009f6c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8009f70:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009f74:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8009f78:	0509      	lsls	r1, r1, #20
 8009f7a:	0d09      	lsrs	r1, r1, #20
 8009f7c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8009f80:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009f84:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009f88:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009f8c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009f90:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8009f94:	0409      	lsls	r1, r1, #16
 8009f96:	0c09      	lsrs	r1, r1, #16
 8009f98:	f248 0480 	movw	r4, #32896	; 0x8080
 8009f9c:	4321      	orrs	r1, r4
 8009f9e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009fa2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009fa6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009faa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009fae:	e7bd      	b.n	8009f2c <HAL_PCD_EP_Close+0x130>
  __HAL_LOCK(hpcd); 
 8009fb0:	2002      	movs	r0, #2
 8009fb2:	e764      	b.n	8009e7e <HAL_PCD_EP_Close+0x82>

08009fb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8009fba:	241c      	movs	r4, #28
 8009fbc:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
 8009fc0:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  ep->xfer_count = 0;
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 8009fca:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 8009fce:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 8009fd2:	f890 5140 	ldrb.w	r5, [r0, #320]	; 0x140
 8009fd6:	2d01      	cmp	r5, #1
 8009fd8:	d04b      	beq.n	800a072 <HAL_PCD_EP_Receive+0xbe>
 8009fda:	2501      	movs	r5, #1
 8009fdc:	f880 5140 	strb.w	r5, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8009fe0:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 8009fe4:	271c      	movs	r7, #28
 8009fe6:	429c      	cmp	r4, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8009fe8:	fb07 0701 	mla	r7, r7, r1, r0
 8009fec:	bf3c      	itt	cc
 8009fee:	1b1a      	subcc	r2, r3, r4
 8009ff0:	4623      	movcc	r3, r4
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 8009ff2:	6804      	ldr	r4, [r0, #0]
 8009ff4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009ff8:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 8009ffc:	00ca      	lsls	r2, r1, #3
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009ffe:	fa12 f585 	uxtah	r5, r2, r5
 800a002:	2b3e      	cmp	r3, #62	; 0x3e
 800a004:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 800a008:	f105 0506 	add.w	r5, r5, #6
 800a00c:	d926      	bls.n	800a05c <HAL_PCD_EP_Receive+0xa8>
 800a00e:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800a012:	06df      	lsls	r7, r3, #27
 800a014:	bf04      	itt	eq
 800a016:	f102 33ff 	addeq.w	r3, r2, #4294967295	; 0xffffffff
 800a01a:	b29a      	uxtheq	r2, r3
 800a01c:	4b16      	ldr	r3, [pc, #88]	; (800a078 <HAL_PCD_EP_Receive+0xc4>)
 800a01e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a022:	b29b      	uxth	r3, r3
 800a024:	f846 3015 	str.w	r3, [r6, r5, lsl #1]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a028:	231c      	movs	r3, #28
 800a02a:	fb03 0101 	mla	r1, r3, r1, r0
 800a02e:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 800a032:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800a036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a03a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a03e:	041b      	lsls	r3, r3, #16
 800a040:	0c1b      	lsrs	r3, r3, #16
 800a042:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a04a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a04e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 800a052:	2300      	movs	r3, #0
 800a054:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800a058:	4618      	mov	r0, r3
}
 800a05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a05c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800a060:	07db      	lsls	r3, r3, #31
 800a062:	bf44      	itt	mi
 800a064:	3201      	addmi	r2, #1
 800a066:	b292      	uxthmi	r2, r2
 800a068:	0292      	lsls	r2, r2, #10
 800a06a:	b292      	uxth	r2, r2
 800a06c:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 800a070:	e7da      	b.n	800a028 <HAL_PCD_EP_Receive+0x74>
  __HAL_LOCK(hpcd); 
 800a072:	2002      	movs	r0, #2
 800a074:	e7f1      	b.n	800a05a <HAL_PCD_EP_Receive+0xa6>
 800a076:	bf00      	nop
 800a078:	ffff8000 	.word	0xffff8000

0800a07c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 800a07c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a080:	231c      	movs	r3, #28
 800a082:	fb03 0001 	mla	r0, r3, r1, r0
}
 800a086:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 800a08a:	4770      	bx	lr

0800a08c <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800a092:	461f      	mov	r7, r3
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800a094:	231c      	movs	r3, #28
 800a096:	fb03 0305 	mla	r3, r3, r5, r0
  ep->xfer_len = len;
 800a09a:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
{
 800a09e:	4604      	mov	r4, r0
 800a0a0:	4694      	mov	ip, r2
  ep->xfer_count = 0;
 800a0a2:	2000      	movs	r0, #0
  ep->is_in = 1;
 800a0a4:	2201      	movs	r2, #1
  ep->xfer_count = 0;
 800a0a6:	6418      	str	r0, [r3, #64]	; 0x40
  ep->is_in = 1;
 800a0a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 800a0ac:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 800a0b0:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 800a0b4:	4291      	cmp	r1, r2
 800a0b6:	d072      	beq.n	800a19e <HAL_PCD_EP_Transmit+0x112>
 800a0b8:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800a0bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0be:	261c      	movs	r6, #28
 800a0c0:	fb06 4605 	mla	r6, r6, r5, r4
 800a0c4:	42ba      	cmp	r2, r7
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800a0c6:	bf3c      	itt	cc
 800a0c8:	1ab8      	subcc	r0, r7, r2
 800a0ca:	4617      	movcc	r7, r2
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800a0cc:	f896 2032 	ldrb.w	r2, [r6, #50]	; 0x32
 800a0d0:	63f0      	str	r0, [r6, #60]	; 0x3c
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 800a0d2:	b2bb      	uxth	r3, r7
 800a0d4:	6820      	ldr	r0, [r4, #0]
  if (ep->doublebuffer == 0) 
 800a0d6:	bb4a      	cbnz	r2, 800a12c <HAL_PCD_EP_Transmit+0xa0>
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 800a0d8:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
 800a0da:	4661      	mov	r1, ip
 800a0dc:	f000 fb6f 	bl	800a7be <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 800a0e0:	6822      	ldr	r2, [r4, #0]
 800a0e2:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800a0e6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a0f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a0f4:	f8c3 7404 	str.w	r7, [r3, #1028]	; 0x404
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a0f8:	211c      	movs	r1, #28
 800a0fa:	fb01 4505 	mla	r5, r1, r5, r4
 800a0fe:	6822      	ldr	r2, [r4, #0]
 800a100:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800a104:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a10c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a110:	041b      	lsls	r3, r3, #16
 800a112:	0c1b      	lsrs	r3, r3, #16
 800a114:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 800a120:	2000      	movs	r0, #0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a122:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  __HAL_UNLOCK(hpcd);
 800a126:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
}
 800a12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a12c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a130:	b292      	uxth	r2, r2
 800a132:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800a136:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800a13a:	f8c2 740c 	str.w	r7, [r2, #1036]	; 0x40c
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800a13e:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800a142:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 800a146:	0652      	lsls	r2, r2, #25
      pmabuffer = ep->pmaaddr1;
 800a148:	bf4c      	ite	mi
 800a14a:	8e32      	ldrhmi	r2, [r6, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 800a14c:	8df2      	ldrhpl	r2, [r6, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800a14e:	261c      	movs	r6, #28
 800a150:	fb06 4605 	mla	r6, r6, r5, r4
 800a154:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800a156:	f000 fb32 	bl	800a7be <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 800a15a:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800a15e:	6822      	ldr	r2, [r4, #0]
 800a160:	b973      	cbnz	r3, 800a180 <HAL_PCD_EP_Transmit+0xf4>
 800a162:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800a166:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a16a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a16e:	051b      	lsls	r3, r3, #20
 800a170:	0d1b      	lsrs	r3, r3, #20
 800a172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a17a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a17e:	e7bb      	b.n	800a0f8 <HAL_PCD_EP_Transmit+0x6c>
 800a180:	2b01      	cmp	r3, #1
 800a182:	d1b9      	bne.n	800a0f8 <HAL_PCD_EP_Transmit+0x6c>
 800a184:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800a188:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a18c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a190:	051b      	lsls	r3, r3, #20
 800a192:	0d1b      	lsrs	r3, r3, #20
 800a194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19c:	e7ed      	b.n	800a17a <HAL_PCD_EP_Transmit+0xee>
  __HAL_LOCK(hpcd); 
 800a19e:	2002      	movs	r0, #2
 800a1a0:	e7c3      	b.n	800a12a <HAL_PCD_EP_Transmit+0x9e>
	...

0800a1a4 <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800a1a4:	6803      	ldr	r3, [r0, #0]
 800a1a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
{
 800a1aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ae:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800a1b0:	0418      	lsls	r0, r3, #16
 800a1b2:	d46e      	bmi.n	800a292 <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a1ba:	0551      	lsls	r1, r2, #21
 800a1bc:	d50a      	bpl.n	800a1d4 <HAL_PCD_IRQHandler+0x30>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a1be:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 800a1c2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a1c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800a1c8:	f001 fd41 	bl	800bc4e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f7ff fc8b 	bl	8009aea <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a1da:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 800a1dc:	bf44      	itt	mi
 800a1de:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 800a1e2:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800a1e6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a1ea:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800a1ec:	bf44      	itt	mi
 800a1ee:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800a1f2:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800a1f6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a1fa:	04d6      	lsls	r6, r2, #19
 800a1fc:	d513      	bpl.n	800a226 <HAL_PCD_IRQHandler+0x82>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800a1fe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a202:	f022 0204 	bic.w	r2, r2, #4
 800a206:	0412      	lsls	r2, r2, #16
 800a208:	0c12      	lsrs	r2, r2, #16
 800a20a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 800a20e:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 800a212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800a216:	4620      	mov	r0, r4
 800a218:	f001 fd27 	bl	800bc6a <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800a222:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a22c:	0515      	lsls	r5, r2, #20
 800a22e:	d518      	bpl.n	800a262 <HAL_PCD_IRQHandler+0xbe>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800a230:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 800a234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800a238:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a23c:	b292      	uxth	r2, r2
 800a23e:	f042 0208 	orr.w	r2, r2, #8
 800a242:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800a246:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a24a:	b292      	uxth	r2, r2
 800a24c:	f042 0204 	orr.w	r2, r2, #4
 800a250:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 800a254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a258:	04d8      	lsls	r0, r3, #19
 800a25a:	d402      	bmi.n	800a262 <HAL_PCD_IRQHandler+0xbe>
      HAL_PCD_SuspendCallback(hpcd);
 800a25c:	4620      	mov	r0, r4
 800a25e:	f001 fd03 	bl	800bc68 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a268:	0591      	lsls	r1, r2, #22
 800a26a:	d506      	bpl.n	800a27a <HAL_PCD_IRQHandler+0xd6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800a26c:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800a270:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800a274:	4620      	mov	r0, r4
 800a276:	f001 fce6 	bl	800bc46 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a280:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800a282:	bf44      	itt	mi
 800a284:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 800a288:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 800a28c:	b002      	add	sp, #8
 800a28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __IO uint16_t wEPVal = 0;
 800a292:	2300      	movs	r3, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800a294:	4fc6      	ldr	r7, [pc, #792]	; (800a5b0 <HAL_PCD_IRQHandler+0x40c>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a296:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800a5b4 <HAL_PCD_IRQHandler+0x410>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a29a:	f8df 931c 	ldr.w	r9, [pc, #796]	; 800a5b8 <HAL_PCD_IRQHandler+0x414>
  __IO uint16_t wEPVal = 0;
 800a29e:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800a2a2:	6820      	ldr	r0, [r4, #0]
 800a2a4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	0419      	lsls	r1, r3, #16
 800a2ac:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a2b0:	d580      	bpl.n	800a1b4 <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a2b2:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (EPindex == 0)
 800a2b6:	f015 050f 	ands.w	r5, r5, #15
 800a2ba:	f040 80ab 	bne.w	800a414 <HAL_PCD_IRQHandler+0x270>
      if ((wIstr & USB_ISTR_DIR) == 0)
 800a2be:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a2c2:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800a2c4:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a2c8:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 800a2ca:	d126      	bne.n	800a31a <HAL_PCD_IRQHandler+0x176>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a2cc:	403b      	ands	r3, r7
 800a2ce:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a2d0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a2d4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 800a2e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a2e4:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 800a2e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2ec:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800a2ee:	4413      	add	r3, r2
 800a2f0:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0);
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f001 fc9f 	bl	800bc36 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800a2f8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0d0      	beq.n	800a2a2 <HAL_PCD_IRQHandler+0xfe>
 800a300:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a302:	2a00      	cmp	r2, #0
 800a304:	d1cd      	bne.n	800a2a2 <HAL_PCD_IRQHandler+0xfe>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800a306:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a30a:	6821      	ldr	r1, [r4, #0]
 800a30c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a310:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800a314:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800a318:	e7c3      	b.n	800a2a2 <HAL_PCD_IRQHandler+0xfe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a31a:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 800a31e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a322:	051a      	lsls	r2, r3, #20
 800a324:	d51f      	bpl.n	800a366 <HAL_PCD_IRQHandler+0x1c2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a326:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a32a:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 800a32e:	b29b      	uxth	r3, r3
 800a330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a334:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800a338:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a33c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a344:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800a348:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 800a34c:	f000 fa45 	bl	800a7da <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800a350:	6822      	ldr	r2, [r4, #0]
 800a352:	8813      	ldrh	r3, [r2, #0]
 800a354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a358:	051b      	lsls	r3, r3, #20
 800a35a:	0d1b      	lsrs	r3, r3, #20
 800a35c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800a35e:	4620      	mov	r0, r4
 800a360:	f001 fc5a 	bl	800bc18 <HAL_PCD_SetupStageCallback>
 800a364:	e79d      	b.n	800a2a2 <HAL_PCD_IRQHandler+0xfe>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 800a366:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a36a:	041b      	lsls	r3, r3, #16
 800a36c:	d599      	bpl.n	800a2a2 <HAL_PCD_IRQHandler+0xfe>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a36e:	8803      	ldrh	r3, [r0, #0]
 800a370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a374:	051b      	lsls	r3, r3, #20
 800a376:	0d1b      	lsrs	r3, r3, #20
 800a378:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a37a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a37e:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 800a382:	b29b      	uxth	r3, r3
 800a384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a388:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a38c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a394:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          if (ep->xfer_count != 0)
 800a398:	b163      	cbz	r3, 800a3b4 <HAL_PCD_IRQHandler+0x210>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800a39a:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 800a39e:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800a3a2:	f000 fa1a 	bl	800a7da <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800a3a6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800a3aa:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f001 fc34 	bl	800bc24 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a3bc:	6822      	ldr	r2, [r4, #0]
 800a3be:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 800a3c2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800a3c6:	2d3e      	cmp	r5, #62	; 0x3e
 800a3c8:	b289      	uxth	r1, r1
 800a3ca:	f101 0106 	add.w	r1, r1, #6
 800a3ce:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800a3d2:	d917      	bls.n	800a404 <HAL_PCD_IRQHandler+0x260>
 800a3d4:	f3c5 134f 	ubfx	r3, r5, #5, #16
 800a3d8:	06ee      	lsls	r6, r5, #27
 800a3da:	bf04      	itt	eq
 800a3dc:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800a3e0:	b29b      	uxtheq	r3, r3
 800a3e2:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a3ec:	8813      	ldrh	r3, [r2, #0]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	ea03 0308 	and.w	r3, r3, r8
 800a3f4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a3f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a400:	8013      	strh	r3, [r2, #0]
 800a402:	e74e      	b.n	800a2a2 <HAL_PCD_IRQHandler+0xfe>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a404:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800a408:	07ed      	lsls	r5, r5, #31
 800a40a:	bf44      	itt	mi
 800a40c:	3301      	addmi	r3, #1
 800a40e:	b29b      	uxthmi	r3, r3
 800a410:	029b      	lsls	r3, r3, #10
 800a412:	e7e8      	b.n	800a3e6 <HAL_PCD_IRQHandler+0x242>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800a414:	fa0f fa85 	sxth.w	sl, r5
 800a418:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 800a422:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a426:	041e      	lsls	r6, r3, #16
 800a428:	d541      	bpl.n	800a4ae <HAL_PCD_IRQHandler+0x30a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800a42a:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 800a42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a432:	051b      	lsls	r3, r3, #20
 800a434:	0d1b      	lsrs	r3, r3, #20
        if (ep->doublebuffer == 0)
 800a436:	211c      	movs	r1, #28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800a438:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 800a43c:	fb01 4105 	mla	r1, r1, r5, r4
 800a440:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800a444:	f891 30be 	ldrb.w	r3, [r1, #190]	; 0xbe
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d173      	bne.n	800a534 <HAL_PCD_IRQHandler+0x390>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a44c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a450:	f891 60b4 	ldrb.w	r6, [r1, #180]	; 0xb4
 800a454:	b29b      	uxth	r3, r3
 800a456:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a45a:	3306      	adds	r3, #6
 800a45c:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 800a460:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 800a464:	b136      	cbz	r6, 800a474 <HAL_PCD_IRQHandler+0x2d0>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a466:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
 800a46a:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 800a46e:	4633      	mov	r3, r6
 800a470:	f000 f9b3 	bl	800a7da <PCD_ReadPMA>
        ep->xfer_count+=count;
 800a474:	211c      	movs	r1, #28
 800a476:	fb01 4105 	mla	r1, r1, r5, r4
 800a47a:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 800a47e:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
        ep->xfer_count+=count;
 800a482:	4433      	add	r3, r6
 800a484:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800a488:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
        ep->xfer_buff+=count;
 800a48c:	4432      	add	r2, r6
 800a48e:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800a492:	b123      	cbz	r3, 800a49e <HAL_PCD_IRQHandler+0x2fa>
 800a494:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800a498:	4286      	cmp	r6, r0
 800a49a:	f080 8082 	bcs.w	800a5a2 <HAL_PCD_IRQHandler+0x3fe>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a49e:	231c      	movs	r3, #28
 800a4a0:	fb03 4305 	mla	r3, r3, r5, r4
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800a4aa:	f001 fbbb 	bl	800bc24 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 800a4ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a4b2:	0618      	lsls	r0, r3, #24
 800a4b4:	f57f aef5 	bpl.w	800a2a2 <HAL_PCD_IRQHandler+0xfe>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800a4b8:	6820      	ldr	r0, [r4, #0]
 800a4ba:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	403b      	ands	r3, r7
        if (ep->doublebuffer == 0)
 800a4c2:	211c      	movs	r1, #28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800a4c4:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 800a4c8:	fb01 4105 	mla	r1, r1, r5, r4
 800a4cc:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800a4d0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d171      	bne.n	800a5bc <HAL_PCD_IRQHandler+0x418>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a4d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a4dc:	f891 6028 	ldrb.w	r6, [r1, #40]	; 0x28
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a4e6:	3302      	adds	r3, #2
 800a4e8:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800a4ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4f0:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 800a4f2:	b11b      	cbz	r3, 800a4fc <HAL_PCD_IRQHandler+0x358>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800a4f4:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800a4f6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800a4f8:	f000 f961 	bl	800a7be <PCD_WritePMA>
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a4fc:	6822      	ldr	r2, [r4, #0]
 800a4fe:	211c      	movs	r1, #28
 800a500:	fb01 4505 	mla	r5, r1, r5, r4
 800a504:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800a508:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a512:	eb02 0343 	add.w	r3, r2, r3, lsl #1
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a516:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a518:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 800a51c:	6bab      	ldr	r3, [r5, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a51e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a522:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 800a524:	441a      	add	r2, r3
        if (ep->xfer_len == 0)
 800a526:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 800a528:	63aa      	str	r2, [r5, #56]	; 0x38
        if (ep->xfer_len == 0)
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d17a      	bne.n	800a624 <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a52e:	f001 fb82 	bl	800bc36 <HAL_PCD_DataInStageCallback>
 800a532:	e6b6      	b.n	800a2a2 <HAL_PCD_IRQHandler+0xfe>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800a534:	f891 30b4 	ldrb.w	r3, [r1, #180]	; 0xb4
 800a538:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a53c:	00de      	lsls	r6, r3, #3
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a53e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800a542:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a546:	fa16 f383 	uxtah	r3, r6, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800a54a:	d01f      	beq.n	800a58c <HAL_PCD_IRQHandler+0x3e8>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a54c:	3302      	adds	r3, #2
 800a54e:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 800a552:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 800a556:	b136      	cbz	r6, 800a566 <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a558:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
 800a55c:	4633      	mov	r3, r6
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a55e:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 800a562:	f000 f93a 	bl	800a7da <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800a566:	231c      	movs	r3, #28
 800a568:	fb03 4305 	mla	r3, r3, r5, r4
 800a56c:	6822      	ldr	r2, [r4, #0]
 800a56e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800a572:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a57a:	051b      	lsls	r3, r3, #20
 800a57c:	0d1b      	lsrs	r3, r3, #20
 800a57e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a582:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a586:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a58a:	e773      	b.n	800a474 <HAL_PCD_IRQHandler+0x2d0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a58c:	3306      	adds	r3, #6
 800a58e:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 800a592:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 800a596:	2e00      	cmp	r6, #0
 800a598:	d0e5      	beq.n	800a566 <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a59a:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
 800a59e:	4633      	mov	r3, r6
 800a5a0:	e7dd      	b.n	800a55e <HAL_PCD_IRQHandler+0x3ba>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800a5a2:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f7ff fd04 	bl	8009fb4 <HAL_PCD_EP_Receive>
 800a5ac:	e77f      	b.n	800a4ae <HAL_PCD_IRQHandler+0x30a>
 800a5ae:	bf00      	nop
 800a5b0:	ffff8f0f 	.word	0xffff8f0f
 800a5b4:	ffffbf8f 	.word	0xffffbf8f
 800a5b8:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a5bc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800a5c0:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a5c4:	00de      	lsls	r6, r3, #3
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a5c6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a5ca:	f01c 0f40 	tst.w	ip, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a5ce:	fa16 f383 	uxtah	r3, r6, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a5d2:	d01d      	beq.n	800a610 <HAL_PCD_IRQHandler+0x46c>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a5d4:	3302      	adds	r3, #2
 800a5d6:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800a5da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5de:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800a5e0:	b11b      	cbz	r3, 800a5ea <HAL_PCD_IRQHandler+0x446>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800a5e2:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800a5e4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800a5e6:	f000 f8ea 	bl	800a7be <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800a5ea:	231c      	movs	r3, #28
 800a5ec:	fb03 4305 	mla	r3, r3, r5, r4
 800a5f0:	6822      	ldr	r2, [r4, #0]
 800a5f2:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800a5f6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a5fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5fe:	051b      	lsls	r3, r3, #20
 800a600:	0d1b      	lsrs	r3, r3, #20
 800a602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a60a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a60e:	e775      	b.n	800a4fc <HAL_PCD_IRQHandler+0x358>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a610:	3306      	adds	r3, #6
 800a612:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800a616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a61a:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d0e4      	beq.n	800a5ea <HAL_PCD_IRQHandler+0x446>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800a620:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800a622:	e7df      	b.n	800a5e4 <HAL_PCD_IRQHandler+0x440>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800a624:	f7ff fd32 	bl	800a08c <HAL_PCD_EP_Transmit>
 800a628:	e63b      	b.n	800a2a2 <HAL_PCD_IRQHandler+0xfe>
 800a62a:	bf00      	nop

0800a62c <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a62c:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800a62e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a632:	2b01      	cmp	r3, #1
 800a634:	d048      	beq.n	800a6c8 <HAL_PCD_EP_SetStall+0x9c>
   
  if ((0x80 & ep_addr) == 0x80)
 800a636:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 800a638:	2301      	movs	r3, #1
 800a63a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  if ((0x80 & ep_addr) == 0x80)
 800a63e:	2c00      	cmp	r4, #0
 800a640:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800a644:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a648:	bfb5      	itete	lt
 800a64a:	fb02 0103 	mlalt	r1, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a64e:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a652:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a654:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 800a656:	2201      	movs	r2, #1
 800a658:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a65a:	0fe2      	lsrs	r2, r4, #31
  ep->num   = ep_addr & 0x7F;
 800a65c:	700b      	strb	r3, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a65e:	704a      	strb	r2, [r1, #1]
  
  if (ep->num == 0)
 800a660:	6802      	ldr	r2, [r0, #0]
 800a662:	b9a3      	cbnz	r3, 800a68e <HAL_PCD_EP_SetStall+0x62>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800a664:	8813      	ldrh	r3, [r2, #0]
 800a666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a66a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a66e:	041b      	lsls	r3, r3, #16
 800a670:	0c1b      	lsrs	r3, r3, #16
 800a672:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a676:	f083 0310 	eor.w	r3, r3, #16
 800a67a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a682:	8013      	strh	r3, [r2, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
    }
  }
  __HAL_UNLOCK(hpcd); 
 800a684:	2300      	movs	r3, #0
 800a686:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800a68a:	4618      	mov	r0, r3
}
 800a68c:	bd10      	pop	{r4, pc}
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a68e:	b219      	sxth	r1, r3
    if (ep->is_in)
 800a690:	2c00      	cmp	r4, #0
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a692:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    if (ep->is_in)
 800a696:	da0e      	bge.n	800a6b6 <HAL_PCD_EP_SetStall+0x8a>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a69c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6a0:	041b      	lsls	r3, r3, #16
 800a6a2:	0c1b      	lsrs	r3, r3, #16
 800a6a4:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 800a6a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a6b4:	e7e6      	b.n	800a684 <HAL_PCD_EP_SetStall+0x58>
 800a6b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6be:	041b      	lsls	r3, r3, #16
 800a6c0:	0c1b      	lsrs	r3, r3, #16
 800a6c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a6c6:	e7ef      	b.n	800a6a8 <HAL_PCD_EP_SetStall+0x7c>
  __HAL_LOCK(hpcd); 
 800a6c8:	2002      	movs	r0, #2
 800a6ca:	e7df      	b.n	800a68c <HAL_PCD_EP_SetStall+0x60>

0800a6cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6cc:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800a6ce:	b24c      	sxtb	r4, r1
 800a6d0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 800a6d4:	2c00      	cmp	r4, #0
 800a6d6:	f04f 031c 	mov.w	r3, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a6da:	bfb5      	itete	lt
 800a6dc:	fb03 0102 	mlalt	r1, r3, r2, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a6e0:	fb03 0101 	mlage	r1, r3, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a6e4:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a6e6:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	708b      	strb	r3, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a6ec:	0fe3      	lsrs	r3, r4, #31
  ep->num   = ep_addr & 0x7F;
 800a6ee:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a6f0:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800a6f2:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d044      	beq.n	800a784 <HAL_PCD_EP_ClrStall+0xb8>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	6801      	ldr	r1, [r0, #0]
 800a6fe:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  if (ep->is_in)
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a702:	b212      	sxth	r2, r2
  if (ep->is_in)
 800a704:	2c00      	cmp	r4, #0
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a706:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
  if (ep->is_in)
 800a70a:	da22      	bge.n	800a752 <HAL_PCD_EP_ClrStall+0x86>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a70c:	065c      	lsls	r4, r3, #25
 800a70e:	d50b      	bpl.n	800a728 <HAL_PCD_EP_ClrStall+0x5c>
 800a710:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a718:	051b      	lsls	r3, r3, #20
 800a71a:	0d1b      	lsrs	r3, r3, #20
 800a71c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a720:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a724:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a728:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a72c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a734:	041b      	lsls	r3, r3, #16
 800a736:	0c1b      	lsrs	r3, r3, #16
 800a738:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a73c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a744:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 800a748:	2300      	movs	r3, #0
 800a74a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 800a74e:	4618      	mov	r0, r3
}
 800a750:	bd10      	pop	{r4, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a752:	045b      	lsls	r3, r3, #17
 800a754:	d50b      	bpl.n	800a76e <HAL_PCD_EP_ClrStall+0xa2>
 800a756:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a75a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a75e:	051b      	lsls	r3, r3, #20
 800a760:	0d1b      	lsrs	r3, r3, #20
 800a762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a76a:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a76e:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 800a772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77a:	041b      	lsls	r3, r3, #16
 800a77c:	0c1b      	lsrs	r3, r3, #16
 800a77e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a782:	e7db      	b.n	800a73c <HAL_PCD_EP_ClrStall+0x70>
  __HAL_LOCK(hpcd); 
 800a784:	2002      	movs	r0, #2
 800a786:	e7e3      	b.n	800a750 <HAL_PCD_EP_ClrStall+0x84>

0800a788 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 800a788:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a78c:	bf18      	it	ne
 800a78e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
{
 800a792:	b510      	push	{r4, lr}
 800a794:	f04f 041c 	mov.w	r4, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a798:	bf15      	itete	ne
 800a79a:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a79e:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a7a2:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a7a4:	30b4      	addeq	r0, #180	; 0xb4
  if (ep_kind == PCD_SNG_BUF)
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800a7a6:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800a7a8:	b91a      	cbnz	r2, 800a7b2 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0;
 800a7aa:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 800a7ac:	8081      	strh	r1, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
  }
  
  return HAL_OK; 
}
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1;
 800a7b2:	2201      	movs	r2, #1
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800a7b4:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 800a7b6:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800a7b8:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800a7ba:	8103      	strh	r3, [r0, #8]
 800a7bc:	e7f7      	b.n	800a7ae <HAL_PCDEx_PMAConfig+0x26>

0800a7be <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a7be:	3301      	adds	r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a7c0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a7c4:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a7c6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800a7ca:	b903      	cbnz	r3, 800a7ce <PCD_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800a7cc:	4770      	bx	lr
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a7ce:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 800a7d2:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0; i--)
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	e7f7      	b.n	800a7ca <PCD_WritePMA+0xc>

0800a7da <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a7da:	3301      	adds	r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a7dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a7e0:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a7e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800a7e6:	b903      	cbnz	r3, 800a7ea <PCD_ReadPMA+0x10>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800a7e8:	4770      	bx	lr
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a7ea:	f852 0b04 	ldr.w	r0, [r2], #4
 800a7ee:	f821 0b02 	strh.w	r0, [r1], #2
  for (i = n; i != 0; i--)
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	e7f7      	b.n	800a7e6 <PCD_ReadPMA+0xc>

0800a7f6 <HAL_PCDEx_SetConnectionState>:
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implenetd in the user file
   */ 
}
 800a7f6:	4770      	bx	lr

0800a7f8 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a7f8:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800a7fa:	6804      	ldr	r4, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a7fc:	9d03      	ldr	r5, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 800a7fe:	6860      	ldr	r0, [r4, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a800:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 800a804:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a808:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a80a:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a80e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a812:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a816:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a81a:	430b      	orrs	r3, r1
 800a81c:	4303      	orrs	r3, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 800a81e:	6063      	str	r3, [r4, #4]
}  
 800a820:	bd30      	pop	{r4, r5, pc}

0800a822 <I2C_IsAcknowledgeFailed>:
{
 800a822:	b570      	push	{r4, r5, r6, lr}
 800a824:	4604      	mov	r4, r0
 800a826:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800a828:	f7fe ffb6 	bl	8009798 <HAL_GetTick>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a82c:	6822      	ldr	r2, [r4, #0]
 800a82e:	6993      	ldr	r3, [r2, #24]
 800a830:	f013 0310 	ands.w	r3, r3, #16
  tickstart = HAL_GetTick();
 800a834:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a836:	d03e      	beq.n	800a8b6 <I2C_IsAcknowledgeFailed+0x94>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 800a838:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a83c:	2b12      	cmp	r3, #18
 800a83e:	d007      	beq.n	800a850 <I2C_IsAcknowledgeFailed+0x2e>
 800a840:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a844:	2b52      	cmp	r3, #82	; 0x52
 800a846:	d003      	beq.n	800a850 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 800a848:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a84c:	2b62      	cmp	r3, #98	; 0x62
 800a84e:	d106      	bne.n	800a85e <I2C_IsAcknowledgeFailed+0x3c>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 800a850:	6853      	ldr	r3, [r2, #4]
 800a852:	0198      	lsls	r0, r3, #6
 800a854:	d403      	bmi.n	800a85e <I2C_IsAcknowledgeFailed+0x3c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a856:	6853      	ldr	r3, [r2, #4]
 800a858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a85c:	6053      	str	r3, [r2, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	699a      	ldr	r2, [r3, #24]
 800a862:	0692      	lsls	r2, r2, #26
 800a864:	d517      	bpl.n	800a896 <I2C_IsAcknowledgeFailed+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a866:	2210      	movs	r2, #16
 800a868:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a86a:	2220      	movs	r2, #32
 800a86c:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a874:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a878:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a87c:	f022 0201 	bic.w	r2, r2, #1
 800a880:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a882:	2304      	movs	r3, #4
 800a884:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 800a888:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800a88a:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 800a88c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a890:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a894:	e00e      	b.n	800a8b4 <I2C_IsAcknowledgeFailed+0x92>
      if(Timeout != HAL_MAX_DELAY)
 800a896:	1c69      	adds	r1, r5, #1
 800a898:	d0e2      	beq.n	800a860 <I2C_IsAcknowledgeFailed+0x3e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a89a:	b125      	cbz	r5, 800a8a6 <I2C_IsAcknowledgeFailed+0x84>
 800a89c:	f7fe ff7c 	bl	8009798 <HAL_GetTick>
 800a8a0:	1b80      	subs	r0, r0, r6
 800a8a2:	42a8      	cmp	r0, r5
 800a8a4:	d9db      	bls.n	800a85e <I2C_IsAcknowledgeFailed+0x3c>
          hi2c->State= HAL_I2C_STATE_READY;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800a8b2:	2003      	movs	r0, #3
}
 800a8b4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	e7fc      	b.n	800a8b4 <I2C_IsAcknowledgeFailed+0x92>

0800a8ba <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 800a8ba:	b570      	push	{r4, r5, r6, lr}
 800a8bc:	4604      	mov	r4, r0
 800a8be:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800a8c0:	f7fe ff6a 	bl	8009798 <HAL_GetTick>
 800a8c4:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	079b      	lsls	r3, r3, #30
 800a8cc:	d501      	bpl.n	800a8d2 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
  return HAL_OK;      
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	e014      	b.n	800a8fc <I2C_WaitOnTXISFlagUntilTimeout+0x42>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800a8d2:	4629      	mov	r1, r5
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7ff ffa4 	bl	800a822 <I2C_IsAcknowledgeFailed>
 800a8da:	b9b0      	cbnz	r0, 800a90a <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 800a8dc:	1c6a      	adds	r2, r5, #1
 800a8de:	d0f2      	beq.n	800a8c6 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a8e0:	b96d      	cbnz	r5, 800a8fe <I2C_WaitOnTXISFlagUntilTimeout+0x44>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8e2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a8e6:	f043 0320 	orr.w	r3, r3, #32
 800a8ea:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hi2c);
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800a8fa:	2003      	movs	r0, #3
}
 800a8fc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a8fe:	f7fe ff4b 	bl	8009798 <HAL_GetTick>
 800a902:	1b80      	subs	r0, r0, r6
 800a904:	42a8      	cmp	r0, r5
 800a906:	d9de      	bls.n	800a8c6 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 800a908:	e7eb      	b.n	800a8e2 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      return HAL_ERROR;
 800a90a:	2001      	movs	r0, #1
 800a90c:	e7f6      	b.n	800a8fc <I2C_WaitOnTXISFlagUntilTimeout+0x42>

0800a90e <I2C_WaitOnFlagUntilTimeout>:
{  
 800a90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a912:	4604      	mov	r4, r0
 800a914:	460e      	mov	r6, r1
 800a916:	4690      	mov	r8, r2
 800a918:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800a91a:	f7fe ff3d 	bl	8009798 <HAL_GetTick>
 800a91e:	4607      	mov	r7, r0
  if(Status == RESET)
 800a920:	f1b8 0f00 	cmp.w	r8, #0
 800a924:	d01d      	beq.n	800a962 <I2C_WaitOnFlagUntilTimeout+0x54>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	6993      	ldr	r3, [r2, #24]
 800a92a:	ea36 0303 	bics.w	r3, r6, r3
 800a92e:	d11d      	bne.n	800a96c <I2C_WaitOnFlagUntilTimeout+0x5e>
      if(Timeout != HAL_MAX_DELAY)
 800a930:	1c6b      	adds	r3, r5, #1
 800a932:	d0f9      	beq.n	800a928 <I2C_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a934:	b16d      	cbz	r5, 800a952 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a936:	f7fe ff2f 	bl	8009798 <HAL_GetTick>
 800a93a:	1bc0      	subs	r0, r0, r7
 800a93c:	42a8      	cmp	r0, r5
 800a93e:	d9f2      	bls.n	800a926 <I2C_WaitOnFlagUntilTimeout+0x18>
 800a940:	e007      	b.n	800a952 <I2C_WaitOnFlagUntilTimeout+0x44>
      if(Timeout != HAL_MAX_DELAY)
 800a942:	1c69      	adds	r1, r5, #1
 800a944:	d00e      	beq.n	800a964 <I2C_WaitOnFlagUntilTimeout+0x56>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a946:	b125      	cbz	r5, 800a952 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a948:	f7fe ff26 	bl	8009798 <HAL_GetTick>
 800a94c:	1bc0      	subs	r0, r0, r7
 800a94e:	42a8      	cmp	r0, r5
 800a950:	d907      	bls.n	800a962 <I2C_WaitOnFlagUntilTimeout+0x54>
          hi2c->State= HAL_I2C_STATE_READY;
 800a952:	2301      	movs	r3, #1
 800a954:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800a958:	2300      	movs	r3, #0
 800a95a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800a95e:	2003      	movs	r0, #3
 800a960:	e005      	b.n	800a96e <I2C_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	6993      	ldr	r3, [r2, #24]
 800a966:	ea36 0303 	bics.w	r3, r6, r3
 800a96a:	d1ea      	bne.n	800a942 <I2C_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 800a96c:	2000      	movs	r0, #0
}
 800a96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a972 <I2C_RequestMemoryWrite>:
{
 800a972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a974:	9f08      	ldr	r7, [sp, #32]
 800a976:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800a97c:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a97e:	9300      	str	r3, [sp, #0]
{
 800a980:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a986:	b2f2      	uxtb	r2, r6
 800a988:	f7ff ff36 	bl	800a7f8 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a98c:	4639      	mov	r1, r7
 800a98e:	4620      	mov	r0, r4
 800a990:	f7ff ff93 	bl	800a8ba <I2C_WaitOnTXISFlagUntilTimeout>
 800a994:	b140      	cbz	r0, 800a9a8 <I2C_RequestMemoryWrite+0x36>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a996:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a99a:	2b04      	cmp	r3, #4
 800a99c:	d002      	beq.n	800a9a4 <I2C_RequestMemoryWrite+0x32>
      return HAL_TIMEOUT;
 800a99e:	2003      	movs	r0, #3
}
 800a9a0:	b003      	add	sp, #12
 800a9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	e7fb      	b.n	800a9a0 <I2C_RequestMemoryWrite+0x2e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a9a8:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);    
 800a9aa:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a9ac:	d10a      	bne.n	800a9c4 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a9ae:	b2ed      	uxtb	r5, r5
 800a9b0:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	463b      	mov	r3, r7
 800a9b6:	2180      	movs	r1, #128	; 0x80
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f7ff ffa8 	bl	800a90e <I2C_WaitOnFlagUntilTimeout>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0ee      	beq.n	800a9a0 <I2C_RequestMemoryWrite+0x2e>
 800a9c2:	e7ec      	b.n	800a99e <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800a9c4:	0a2a      	lsrs	r2, r5, #8
 800a9c6:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f7ff ff75 	bl	800a8ba <I2C_WaitOnTXISFlagUntilTimeout>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d1e0      	bne.n	800a996 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	e7ea      	b.n	800a9ae <I2C_RequestMemoryWrite+0x3c>

0800a9d8 <I2C_RequestMemoryRead>:
{
 800a9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9da:	9f08      	ldr	r7, [sp, #32]
 800a9dc:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a9de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800a9e2:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a9e4:	9300      	str	r3, [sp, #0]
{
 800a9e6:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	b2f2      	uxtb	r2, r6
 800a9ec:	f7ff ff04 	bl	800a7f8 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f7ff ff61 	bl	800a8ba <I2C_WaitOnTXISFlagUntilTimeout>
 800a9f8:	b140      	cbz	r0, 800aa0c <I2C_RequestMemoryRead+0x34>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9fa:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a9fe:	2b04      	cmp	r3, #4
 800aa00:	d002      	beq.n	800aa08 <I2C_RequestMemoryRead+0x30>
      return HAL_TIMEOUT;
 800aa02:	2003      	movs	r0, #3
}
 800aa04:	b003      	add	sp, #12
 800aa06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800aa08:	2001      	movs	r0, #1
 800aa0a:	e7fb      	b.n	800aa04 <I2C_RequestMemoryRead+0x2c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa0c:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);    
 800aa0e:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa10:	d10a      	bne.n	800aa28 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800aa12:	b2ed      	uxtb	r5, r5
 800aa14:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800aa16:	2200      	movs	r2, #0
 800aa18:	463b      	mov	r3, r7
 800aa1a:	2140      	movs	r1, #64	; 0x40
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7ff ff76 	bl	800a90e <I2C_WaitOnFlagUntilTimeout>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d0ee      	beq.n	800aa04 <I2C_RequestMemoryRead+0x2c>
 800aa26:	e7ec      	b.n	800aa02 <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800aa28:	0a2a      	lsrs	r2, r5, #8
 800aa2a:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f7ff ff43 	bl	800a8ba <I2C_WaitOnTXISFlagUntilTimeout>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d1e0      	bne.n	800a9fa <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	e7ea      	b.n	800aa12 <I2C_RequestMemoryRead+0x3a>

0800aa3c <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	4604      	mov	r4, r0
 800aa40:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800aa42:	f7fe fea9 	bl	8009798 <HAL_GetTick>
 800aa46:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	069b      	lsls	r3, r3, #26
 800aa4e:	d501      	bpl.n	800aa54 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 800aa50:	2000      	movs	r0, #0
 800aa52:	e012      	b.n	800aa7a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800aa54:	4629      	mov	r1, r5
 800aa56:	4620      	mov	r0, r4
 800aa58:	f7ff fee3 	bl	800a822 <I2C_IsAcknowledgeFailed>
 800aa5c:	b9a0      	cbnz	r0, 800aa88 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800aa5e:	b96d      	cbnz	r5, 800aa7c <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa60:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800aa64:	f043 0320 	orr.w	r3, r3, #32
 800aa68:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 800aa72:	2300      	movs	r3, #0
 800aa74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800aa78:	2003      	movs	r0, #3
}
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800aa7c:	f7fe fe8c 	bl	8009798 <HAL_GetTick>
 800aa80:	1b80      	subs	r0, r0, r6
 800aa82:	42a8      	cmp	r0, r5
 800aa84:	d9e0      	bls.n	800aa48 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 800aa86:	e7eb      	b.n	800aa60 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      return HAL_ERROR;
 800aa88:	2001      	movs	r0, #1
 800aa8a:	e7f6      	b.n	800aa7a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>

0800aa8c <HAL_I2C_MspInit>:
}
 800aa8c:	4770      	bx	lr

0800aa8e <HAL_I2C_Init>:
{ 
 800aa8e:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800aa90:	4604      	mov	r4, r0
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d041      	beq.n	800ab1a <HAL_I2C_Init+0x8c>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800aa96:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800aa9a:	b90b      	cbnz	r3, 800aaa0 <HAL_I2C_Init+0x12>
    HAL_I2C_MspInit(hi2c);
 800aa9c:	f7ff fff6 	bl	800aa8c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	f022 0201 	bic.w	r2, r2, #1
 800aaae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800aab0:	6862      	ldr	r2, [r4, #4]
 800aab2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800aab6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aab8:	689a      	ldr	r2, [r3, #8]
 800aaba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aabe:	609a      	str	r2, [r3, #8]
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aac0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800aac4:	b31a      	cbz	r2, 800ab0e <HAL_I2C_Init+0x80>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aac6:	2901      	cmp	r1, #1
 800aac8:	d11e      	bne.n	800ab08 <HAL_I2C_Init+0x7a>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aaca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aace:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aad0:	685a      	ldr	r2, [r3, #4]
 800aad2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800aad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aada:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800aadc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800aae0:	430a      	orrs	r2, r1
 800aae2:	69a1      	ldr	r1, [r4, #24]
 800aae4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800aae8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aaea:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	f042 0201 	orr.w	r2, r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aafa:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800aafc:	2301      	movs	r3, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aafe:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 800ab02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800ab06:	bd10      	pop	{r4, pc}
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ab08:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ab0c:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ab0e:	2902      	cmp	r1, #2
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ab10:	bf04      	itt	eq
 800ab12:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800ab16:	605a      	streq	r2, [r3, #4]
 800ab18:	e7da      	b.n	800aad0 <HAL_I2C_Init+0x42>
    return HAL_ERROR;
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	e7f3      	b.n	800ab06 <HAL_I2C_Init+0x78>

0800ab1e <HAL_I2C_MspDeInit>:
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_I2C_DeInit>:
{
 800ab20:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800ab22:	4604      	mov	r4, r0
 800ab24:	b188      	cbz	r0, 800ab4a <HAL_I2C_DeInit+0x2a>
  __HAL_I2C_DISABLE(hi2c);
 800ab26:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab28:	2302      	movs	r3, #2
 800ab2a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800ab2e:	6813      	ldr	r3, [r2, #0]
 800ab30:	f023 0301 	bic.w	r3, r3, #1
 800ab34:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800ab36:	f7ff fff2 	bl	800ab1e <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  __HAL_UNLOCK(hi2c);
 800ab40:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_RESET;
 800ab44:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800ab48:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ab4a:	2001      	movs	r0, #1
 800ab4c:	e7fc      	b.n	800ab48 <HAL_I2C_DeInit+0x28>

0800ab4e <HAL_I2C_Mem_Write>:
{
 800ab4e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800ab52:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
{
 800ab56:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800ab5a:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800ab5e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800ab62:	2e01      	cmp	r6, #1
{
 800ab64:	4604      	mov	r4, r0
 800ab66:	4688      	mov	r8, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800ab68:	b2f7      	uxtb	r7, r6
 800ab6a:	d170      	bne.n	800ac4e <HAL_I2C_Mem_Write+0x100>
    if((pData == NULL) || (Size == 0)) 
 800ab6c:	f1b9 0f00 	cmp.w	r9, #0
 800ab70:	d01e      	beq.n	800abb0 <HAL_I2C_Mem_Write+0x62>
 800ab72:	b1ed      	cbz	r5, 800abb0 <HAL_I2C_Mem_Write+0x62>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ab74:	6806      	ldr	r6, [r0, #0]
 800ab76:	69b6      	ldr	r6, [r6, #24]
 800ab78:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800ab7c:	d167      	bne.n	800ac4e <HAL_I2C_Mem_Write+0x100>
    __HAL_LOCK(hi2c);
 800ab7e:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800ab82:	f1bc 0f01 	cmp.w	ip, #1
 800ab86:	d062      	beq.n	800ac4e <HAL_I2C_Mem_Write+0x100>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 800ab88:	f04f 0c52 	mov.w	ip, #82	; 0x52
 800ab8c:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800ab90:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab94:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800ab98:	f8cd a000 	str.w	sl, [sp]
 800ab9c:	f7ff fee9 	bl	800a972 <I2C_RequestMemoryWrite>
 800aba0:	b150      	cbz	r0, 800abb8 <HAL_I2C_Mem_Write+0x6a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aba2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800aba6:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abaa:	2b04      	cmp	r3, #4
 800abac:	d000      	beq.n	800abb0 <HAL_I2C_Mem_Write+0x62>
          return HAL_TIMEOUT;
 800abae:	2703      	movs	r7, #3
}
 800abb0:	4638      	mov	r0, r7
 800abb2:	b002      	add	sp, #8
 800abb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800abb8:	9000      	str	r0, [sp, #0]
        if(Size > 255)
 800abba:	2dff      	cmp	r5, #255	; 0xff
 800abbc:	d908      	bls.n	800abd0 <HAL_I2C_Mem_Write+0x82>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800abbe:	22ff      	movs	r2, #255	; 0xff
 800abc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abc4:	4641      	mov	r1, r8
 800abc6:	4620      	mov	r0, r4
 800abc8:	f7ff fe16 	bl	800a7f8 <I2C_TransferConfig>
          Sizetmp = 255;
 800abcc:	4616      	mov	r6, r2
 800abce:	e007      	b.n	800abe0 <HAL_I2C_Mem_Write+0x92>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800abd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abd4:	b2ea      	uxtb	r2, r5
 800abd6:	4641      	mov	r1, r8
 800abd8:	4620      	mov	r0, r4
 800abda:	f7ff fe0d 	bl	800a7f8 <I2C_TransferConfig>
      Sizetmp = Size;
 800abde:	462e      	mov	r6, r5
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800abe0:	4651      	mov	r1, sl
 800abe2:	4620      	mov	r0, r4
 800abe4:	f7ff fe69 	bl	800a8ba <I2C_WaitOnTXISFlagUntilTimeout>
 800abe8:	b110      	cbz	r0, 800abf0 <HAL_I2C_Mem_Write+0xa2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abea:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800abee:	e7dc      	b.n	800abaa <HAL_I2C_Mem_Write+0x5c>
      hi2c->Instance->TXDR = (*pData++);
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	f819 2b01 	ldrb.w	r2, [r9], #1
 800abf6:	629a      	str	r2, [r3, #40]	; 0x28
      Size--;
 800abf8:	3d01      	subs	r5, #1
      if((Sizetmp == 0)&&(Size!=0))
 800abfa:	3e01      	subs	r6, #1
      Size--;
 800abfc:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 800abfe:	d10a      	bne.n	800ac16 <HAL_I2C_Mem_Write+0xc8>
 800ac00:	b15d      	cbz	r5, 800ac1a <HAL_I2C_Mem_Write+0xcc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800ac02:	4653      	mov	r3, sl
 800ac04:	4632      	mov	r2, r6
 800ac06:	2180      	movs	r1, #128	; 0x80
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f7ff fe80 	bl	800a90e <I2C_WaitOnFlagUntilTimeout>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d1cd      	bne.n	800abae <HAL_I2C_Mem_Write+0x60>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ac12:	9600      	str	r6, [sp, #0]
 800ac14:	e7d1      	b.n	800abba <HAL_I2C_Mem_Write+0x6c>
    }while(Size > 0);
 800ac16:	2d00      	cmp	r5, #0
 800ac18:	d1e2      	bne.n	800abe0 <HAL_I2C_Mem_Write+0x92>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800ac1a:	2119      	movs	r1, #25
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f7ff ff0d 	bl	800aa3c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d1e1      	bne.n	800abea <HAL_I2C_Mem_Write+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	2220      	movs	r2, #32
 800ac2a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800ac32:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800ac36:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800ac3a:	f022 0201 	bic.w	r2, r2, #1
 800ac3e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 800ac40:	2301      	movs	r3, #1
 800ac42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800ac46:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800ac4a:	4607      	mov	r7, r0
 800ac4c:	e7b0      	b.n	800abb0 <HAL_I2C_Mem_Write+0x62>
    return HAL_BUSY;
 800ac4e:	2702      	movs	r7, #2
 800ac50:	e7ae      	b.n	800abb0 <HAL_I2C_Mem_Write+0x62>

0800ac52 <HAL_I2C_Mem_Read>:
{
 800ac52:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800ac56:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
{
 800ac5a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800ac5e:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800ac62:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800ac66:	2e01      	cmp	r6, #1
{
 800ac68:	4604      	mov	r4, r0
 800ac6a:	4688      	mov	r8, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800ac6c:	b2f7      	uxtb	r7, r6
 800ac6e:	d175      	bne.n	800ad5c <HAL_I2C_Mem_Read+0x10a>
    if((pData == NULL) || (Size == 0)) 
 800ac70:	f1b9 0f00 	cmp.w	r9, #0
 800ac74:	d01e      	beq.n	800acb4 <HAL_I2C_Mem_Read+0x62>
 800ac76:	b1ed      	cbz	r5, 800acb4 <HAL_I2C_Mem_Read+0x62>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ac78:	6806      	ldr	r6, [r0, #0]
 800ac7a:	69b6      	ldr	r6, [r6, #24]
 800ac7c:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800ac80:	d16c      	bne.n	800ad5c <HAL_I2C_Mem_Read+0x10a>
    __HAL_LOCK(hi2c);
 800ac82:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800ac86:	f1bc 0f01 	cmp.w	ip, #1
 800ac8a:	d067      	beq.n	800ad5c <HAL_I2C_Mem_Read+0x10a>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 800ac8c:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800ac90:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800ac94:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac98:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800ac9c:	f8cd a000 	str.w	sl, [sp]
 800aca0:	f7ff fe9a 	bl	800a9d8 <I2C_RequestMemoryRead>
 800aca4:	b150      	cbz	r0, 800acbc <HAL_I2C_Mem_Read+0x6a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aca6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800acaa:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acae:	2b04      	cmp	r3, #4
 800acb0:	d000      	beq.n	800acb4 <HAL_I2C_Mem_Read+0x62>
        return HAL_TIMEOUT;
 800acb2:	2703      	movs	r7, #3
}
 800acb4:	4638      	mov	r0, r7
 800acb6:	b002      	add	sp, #8
 800acb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(Size > 255)
 800acbc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800acc0:	2dff      	cmp	r5, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800acc2:	9300      	str	r3, [sp, #0]
        if(Size > 255)
 800acc4:	d908      	bls.n	800acd8 <HAL_I2C_Mem_Read+0x86>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800acc6:	22ff      	movs	r2, #255	; 0xff
 800acc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800accc:	4641      	mov	r1, r8
 800acce:	4620      	mov	r0, r4
 800acd0:	f7ff fd92 	bl	800a7f8 <I2C_TransferConfig>
          Sizetmp = 255;
 800acd4:	4616      	mov	r6, r2
 800acd6:	e007      	b.n	800ace8 <HAL_I2C_Mem_Read+0x96>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800acd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800acdc:	b2ea      	uxtb	r2, r5
 800acde:	4641      	mov	r1, r8
 800ace0:	4620      	mov	r0, r4
 800ace2:	f7ff fd89 	bl	800a7f8 <I2C_TransferConfig>
      Sizetmp = Size;
 800ace6:	462e      	mov	r6, r5
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 800ace8:	4653      	mov	r3, sl
 800acea:	2200      	movs	r2, #0
 800acec:	2104      	movs	r1, #4
 800acee:	4620      	mov	r0, r4
 800acf0:	f7ff fe0d 	bl	800a90e <I2C_WaitOnFlagUntilTimeout>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d1dc      	bne.n	800acb2 <HAL_I2C_Mem_Read+0x60>
      (*pData++) = hi2c->Instance->RXDR;
 800acf8:	6823      	ldr	r3, [r4, #0]
      Size--;   
 800acfa:	3d01      	subs	r5, #1
      (*pData++) = hi2c->Instance->RXDR;
 800acfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfe:	f809 3b01 	strb.w	r3, [r9], #1
      if((Sizetmp == 0)&&(Size!=0))
 800ad02:	3e01      	subs	r6, #1
      Size--;   
 800ad04:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 800ad06:	d10b      	bne.n	800ad20 <HAL_I2C_Mem_Read+0xce>
 800ad08:	b165      	cbz	r5, 800ad24 <HAL_I2C_Mem_Read+0xd2>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800ad0a:	4653      	mov	r3, sl
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	2180      	movs	r1, #128	; 0x80
 800ad10:	4620      	mov	r0, r4
 800ad12:	f7ff fdfc 	bl	800a90e <I2C_WaitOnFlagUntilTimeout>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d1cb      	bne.n	800acb2 <HAL_I2C_Mem_Read+0x60>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ad1a:	9600      	str	r6, [sp, #0]
        if(Size > 255)
 800ad1c:	2dff      	cmp	r5, #255	; 0xff
 800ad1e:	e7d1      	b.n	800acc4 <HAL_I2C_Mem_Read+0x72>
    }while(Size > 0);
 800ad20:	2d00      	cmp	r5, #0
 800ad22:	d1e1      	bne.n	800ace8 <HAL_I2C_Mem_Read+0x96>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800ad24:	2119      	movs	r1, #25
 800ad26:	4620      	mov	r0, r4
 800ad28:	f7ff fe88 	bl	800aa3c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ad2c:	b110      	cbz	r0, 800ad34 <HAL_I2C_Mem_Read+0xe2>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad2e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800ad32:	e7bc      	b.n	800acae <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	2220      	movs	r2, #32
 800ad38:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800ad3a:	685a      	ldr	r2, [r3, #4]
 800ad3c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800ad40:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800ad44:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800ad48:	f022 0201 	bic.w	r2, r2, #1
 800ad4c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800ad54:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800ad58:	4607      	mov	r7, r0
 800ad5a:	e7ab      	b.n	800acb4 <HAL_I2C_Mem_Read+0x62>
    return HAL_BUSY;
 800ad5c:	2702      	movs	r7, #2
 800ad5e:	e7a9      	b.n	800acb4 <HAL_I2C_Mem_Read+0x62>

0800ad60 <HAL_I2C_GetState>:
  return hi2c->State;
 800ad60:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800ad64:	4770      	bx	lr

0800ad66 <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800ad66:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	460f      	mov	r7, r1
 800ad6e:	4616      	mov	r6, r2
 800ad70:	461d      	mov	r5, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 800ad72:	f7fe fd11 	bl	8009798 <HAL_GetTick>
 800ad76:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 800ad78:	6822      	ldr	r2, [r4, #0]
 800ad7a:	6893      	ldr	r3, [r2, #8]
 800ad7c:	403b      	ands	r3, r7
 800ad7e:	42b3      	cmp	r3, r6
 800ad80:	d101      	bne.n	800ad86 <SPI_WaitFifoStateUntilTimeout+0x20>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 800ad82:	2000      	movs	r0, #0
 800ad84:	e02f      	b.n	800ade6 <SPI_WaitFifoStateUntilTimeout+0x80>
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ad86:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 800ad8a:	d104      	bne.n	800ad96 <SPI_WaitFifoStateUntilTimeout+0x30>
 800ad8c:	b91e      	cbnz	r6, 800ad96 <SPI_WaitFifoStateUntilTimeout+0x30>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800ad8e:	7b13      	ldrb	r3, [r2, #12]
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	f88d 3007 	strb.w	r3, [sp, #7]
    if(Timeout != HAL_MAX_DELAY)
 800ad96:	1c6b      	adds	r3, r5, #1
 800ad98:	d0ef      	beq.n	800ad7a <SPI_WaitFifoStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ad9a:	bb3d      	cbnz	r5, 800adec <SPI_WaitFifoStateUntilTimeout+0x86>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ada4:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ada6:	6862      	ldr	r2, [r4, #4]
 800ada8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800adac:	d10a      	bne.n	800adc4 <SPI_WaitFifoStateUntilTimeout+0x5e>
 800adae:	68a2      	ldr	r2, [r4, #8]
 800adb0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800adb4:	d002      	beq.n	800adbc <SPI_WaitFifoStateUntilTimeout+0x56>
 800adb6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800adba:	d103      	bne.n	800adc4 <SPI_WaitFifoStateUntilTimeout+0x5e>
          __HAL_SPI_DISABLE(hspi);
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adc2:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800adc4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800adc6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800adca:	d107      	bne.n	800addc <SPI_WaitFifoStateUntilTimeout+0x76>
          __HAL_SPI_RESET_CRC(hspi);
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adda:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800addc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ade0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 800ade4:	2003      	movs	r0, #3
}
 800ade6:	b002      	add	sp, #8
 800ade8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800adec:	f7fe fcd4 	bl	8009798 <HAL_GetTick>
 800adf0:	eba0 0008 	sub.w	r0, r0, r8
 800adf4:	42a8      	cmp	r0, r5
 800adf6:	d9bf      	bls.n	800ad78 <SPI_WaitFifoStateUntilTimeout+0x12>
 800adf8:	e7d0      	b.n	800ad9c <SPI_WaitFifoStateUntilTimeout+0x36>

0800adfa <SPI_WaitFlagStateUntilTimeout>:
{
 800adfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adfe:	4604      	mov	r4, r0
 800ae00:	460f      	mov	r7, r1
 800ae02:	4616      	mov	r6, r2
 800ae04:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800ae06:	f7fe fcc7 	bl	8009798 <HAL_GetTick>
 800ae0a:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800ae0c:	6822      	ldr	r2, [r4, #0]
 800ae0e:	6893      	ldr	r3, [r2, #8]
 800ae10:	403b      	ands	r3, r7
 800ae12:	42b3      	cmp	r3, r6
 800ae14:	d101      	bne.n	800ae1a <SPI_WaitFlagStateUntilTimeout+0x20>
  return HAL_OK;      
 800ae16:	2000      	movs	r0, #0
 800ae18:	e027      	b.n	800ae6a <SPI_WaitFlagStateUntilTimeout+0x70>
    if(Timeout != HAL_MAX_DELAY)
 800ae1a:	1c6b      	adds	r3, r5, #1
 800ae1c:	d0f7      	beq.n	800ae0e <SPI_WaitFlagStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ae1e:	bb35      	cbnz	r5, 800ae6e <SPI_WaitFlagStateUntilTimeout+0x74>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae28:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae2a:	6862      	ldr	r2, [r4, #4]
 800ae2c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800ae30:	d10a      	bne.n	800ae48 <SPI_WaitFlagStateUntilTimeout+0x4e>
 800ae32:	68a2      	ldr	r2, [r4, #8]
 800ae34:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800ae38:	d002      	beq.n	800ae40 <SPI_WaitFlagStateUntilTimeout+0x46>
 800ae3a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ae3e:	d103      	bne.n	800ae48 <SPI_WaitFlagStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae46:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800ae48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ae4a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ae4e:	d107      	bne.n	800ae60 <SPI_WaitFlagStateUntilTimeout+0x66>
          __HAL_SPI_RESET_CRC(hspi);
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae5e:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800ae60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae64:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800ae68:	2003      	movs	r0, #3
}
 800ae6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ae6e:	f7fe fc93 	bl	8009798 <HAL_GetTick>
 800ae72:	eba0 0008 	sub.w	r0, r0, r8
 800ae76:	42a8      	cmp	r0, r5
 800ae78:	d9c8      	bls.n	800ae0c <SPI_WaitFlagStateUntilTimeout+0x12>
 800ae7a:	e7d1      	b.n	800ae20 <SPI_WaitFlagStateUntilTimeout+0x26>

0800ae7c <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800ae7c:	b513      	push	{r0, r1, r4, lr}
 800ae7e:	460b      	mov	r3, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800ae80:	9101      	str	r1, [sp, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800ae88:	4604      	mov	r4, r0
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800ae8a:	f7ff ff6c 	bl	800ad66 <SPI_WaitFifoStateUntilTimeout>
 800ae8e:	9b01      	ldr	r3, [sp, #4]
 800ae90:	4602      	mov	r2, r0
 800ae92:	b138      	cbz	r0, 800aea4 <SPI_EndRxTxTransaction+0x28>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800ae94:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800ae98:	f043 0320 	orr.w	r3, r3, #32
 800ae9c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 800aea0:	2003      	movs	r0, #3
 800aea2:	e00f      	b.n	800aec4 <SPI_EndRxTxTransaction+0x48>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800aea4:	2180      	movs	r1, #128	; 0x80
 800aea6:	4620      	mov	r0, r4
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	f7ff ffa6 	bl	800adfa <SPI_WaitFlagStateUntilTimeout>
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d1ee      	bne.n	800ae94 <SPI_EndRxTxTransaction+0x18>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 800aeb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800aeba:	4620      	mov	r0, r4
 800aebc:	f7ff ff53 	bl	800ad66 <SPI_WaitFifoStateUntilTimeout>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d1e7      	bne.n	800ae94 <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 800aec4:	b002      	add	sp, #8
 800aec6:	bd10      	pop	{r4, pc}

0800aec8 <HAL_SPI_MspInit>:
}
 800aec8:	4770      	bx	lr

0800aeca <HAL_SPI_Init>:
{
 800aeca:	b570      	push	{r4, r5, r6, lr}
  if(hspi == NULL)
 800aecc:	4604      	mov	r4, r0
 800aece:	2800      	cmp	r0, #0
 800aed0:	d047      	beq.n	800af62 <HAL_SPI_Init+0x98>
  hspi->State = HAL_SPI_STATE_BUSY;
 800aed2:	2302      	movs	r3, #2
 800aed4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_MspInit(hspi);
 800aed8:	f7ff fff6 	bl	800aec8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800aedc:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aede:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800aee0:	6813      	ldr	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aee2:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800aee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeea:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aeec:	f04f 0300 	mov.w	r3, #0
 800aef0:	d839      	bhi.n	800af66 <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aef2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800aef6:	d000      	beq.n	800aefa <HAL_SPI_Init+0x30>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800aef8:	62a3      	str	r3, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800aefa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aefc:	b92b      	cbnz	r3, 800af0a <HAL_SPI_Init+0x40>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aefe:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800af02:	bf8c      	ite	hi
 800af04:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800af06:	2301      	movls	r3, #1
 800af08:	6323      	str	r3, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800af0a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800af0e:	4333      	orrs	r3, r6
 800af10:	6926      	ldr	r6, [r4, #16]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800af12:	69a0      	ldr	r0, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800af14:	4333      	orrs	r3, r6
 800af16:	6966      	ldr	r6, [r4, #20]
 800af18:	4333      	orrs	r3, r6
 800af1a:	69e6      	ldr	r6, [r4, #28]
 800af1c:	4333      	orrs	r3, r6
 800af1e:	6a26      	ldr	r6, [r4, #32]
 800af20:	4333      	orrs	r3, r6
 800af22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af24:	4333      	orrs	r3, r6
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800af26:	f400 7600 	and.w	r6, r0, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800af2a:	4333      	orrs	r3, r6
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 800af2c:	6013      	str	r3, [r2, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800af2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af30:	2b02      	cmp	r3, #2
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800af32:	bf02      	ittt	eq
 800af34:	6813      	ldreq	r3, [r2, #0]
 800af36:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800af3a:	6013      	streq	r3, [r2, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800af3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af3e:	432b      	orrs	r3, r5
 800af40:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800af42:	0c00      	lsrs	r0, r0, #16
 800af44:	f000 0004 	and.w	r0, r0, #4
 800af48:	432b      	orrs	r3, r5
 800af4a:	4303      	orrs	r3, r0
                         hspi->Init.DataSize ) | frxth;
 800af4c:	430b      	orrs	r3, r1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800af4e:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800af50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af52:	6113      	str	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af54:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 800af56:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af58:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 800af5c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800af60:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800af62:	2001      	movs	r0, #1
 800af64:	e7fc      	b.n	800af60 <HAL_SPI_Init+0x96>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800af66:	4619      	mov	r1, r3
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800af68:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800af6c:	e7c3      	b.n	800aef6 <HAL_SPI_Init+0x2c>

0800af6e <HAL_SPI_MspDeInit>:
 800af6e:	4770      	bx	lr

0800af70 <HAL_SPI_DeInit>:
{
 800af70:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800af72:	4604      	mov	r4, r0
 800af74:	b178      	cbz	r0, 800af96 <HAL_SPI_DeInit+0x26>
  __HAL_SPI_DISABLE(hspi);
 800af76:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800af78:	2302      	movs	r3, #2
 800af7a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800af7e:	6813      	ldr	r3, [r2, #0]
 800af80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af84:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800af86:	f7ff fff2 	bl	800af6e <HAL_SPI_MspDeInit>
  __HAL_UNLOCK(hspi);
 800af8a:	2000      	movs	r0, #0
 800af8c:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af90:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
}
 800af94:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800af96:	2001      	movs	r0, #1
 800af98:	e7fc      	b.n	800af94 <HAL_SPI_DeInit+0x24>

0800af9a <HAL_SPI_TransmitReceive>:
{
 800af9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->State != HAL_SPI_STATE_READY) 
 800af9e:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
{
 800afa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800afa4:	f04f 0b00 	mov.w	fp, #0
  if(hspi->State != HAL_SPI_STATE_READY) 
 800afa8:	2f01      	cmp	r7, #1
{
 800afaa:	4604      	mov	r4, r0
 800afac:	4689      	mov	r9, r1
 800afae:	4692      	mov	sl, r2
 800afb0:	461e      	mov	r6, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800afb2:	f8ad b006 	strh.w	fp, [sp, #6]
  if(hspi->State != HAL_SPI_STATE_READY) 
 800afb6:	d004      	beq.n	800afc2 <HAL_SPI_TransmitReceive+0x28>
    return HAL_BUSY;
 800afb8:	2702      	movs	r7, #2
}
 800afba:	4638      	mov	r0, r7
 800afbc:	b003      	add	sp, #12
 800afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800afc2:	2900      	cmp	r1, #0
 800afc4:	d0f9      	beq.n	800afba <HAL_SPI_TransmitReceive+0x20>
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	d0f7      	beq.n	800afba <HAL_SPI_TransmitReceive+0x20>
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0f5      	beq.n	800afba <HAL_SPI_TransmitReceive+0x20>
  tickstart = HAL_GetTick();
 800afce:	f7fe fbe3 	bl	8009798 <HAL_GetTick>
  __HAL_LOCK(hspi); 
 800afd2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800afd6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800afd8:	4680      	mov	r8, r0
  __HAL_LOCK(hspi); 
 800afda:	d0ed      	beq.n	800afb8 <HAL_SPI_TransmitReceive+0x1e>
 800afdc:	f240 5301 	movw	r3, #1281	; 0x501
 800afe0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800afe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_SPI_RESET_CRC(hspi);
 800afe6:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afe8:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800afec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->pRxBuffPtr  = pRxData;
 800aff0:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800aff4:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800aff8:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800affc:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b000:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 800b002:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b004:	d107      	bne.n	800b016 <HAL_SPI_TransmitReceive+0x7c>
    __HAL_SPI_RESET_CRC(hspi);
 800b006:	6813      	ldr	r3, [r2, #0]
 800b008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	6813      	ldr	r3, [r2, #0]
 800b010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b014:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b016:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b018:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b01a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b01e:	d801      	bhi.n	800b024 <HAL_SPI_TransmitReceive+0x8a>
 800b020:	2e01      	cmp	r6, #1
 800b022:	d014      	beq.n	800b04e <HAL_SPI_TransmitReceive+0xb4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b028:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800b02a:	6813      	ldr	r3, [r2, #0]
 800b02c:	0658      	lsls	r0, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800b02e:	bf5e      	ittt	pl
 800b030:	6813      	ldrpl	r3, [r2, #0]
 800b032:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800b036:	6013      	strpl	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b038:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b03c:	d83d      	bhi.n	800b0ba <HAL_SPI_TransmitReceive+0x120>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800b03e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b040:	2a00      	cmp	r2, #0
 800b042:	d175      	bne.n	800b130 <HAL_SPI_TransmitReceive+0x196>
 800b044:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d17e      	bne.n	800b14a <HAL_SPI_TransmitReceive+0x1b0>
 800b04c:	e03c      	b.n	800b0c8 <HAL_SPI_TransmitReceive+0x12e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b04e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b052:	e7e9      	b.n	800b028 <HAL_SPI_TransmitReceive+0x8e>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b054:	6822      	ldr	r2, [r4, #0]
 800b056:	6891      	ldr	r1, [r2, #8]
 800b058:	0789      	lsls	r1, r1, #30
 800b05a:	d510      	bpl.n	800b07e <HAL_SPI_TransmitReceive+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b05c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b05e:	3b01      	subs	r3, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b060:	f831 6b02 	ldrh.w	r6, [r1], #2
 800b064:	60d6      	str	r6, [r2, #12]
        hspi->TxXferCount--;
 800b066:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b068:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b06a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800b06c:	b93b      	cbnz	r3, 800b07e <HAL_SPI_TransmitReceive+0xe4>
 800b06e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b074:	bf02      	ittt	eq
 800b076:	6813      	ldreq	r3, [r2, #0]
 800b078:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b07c:	6013      	streq	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b07e:	b168      	cbz	r0, 800b09c <HAL_SPI_TransmitReceive+0x102>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	07d2      	lsls	r2, r2, #31
 800b086:	d509      	bpl.n	800b09c <HAL_SPI_TransmitReceive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b088:	68da      	ldr	r2, [r3, #12]
 800b08a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b08c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b090:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800b092:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b096:	3b01      	subs	r3, #1
 800b098:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if(Timeout != HAL_MAX_DELAY)
 800b09c:	1c6b      	adds	r3, r5, #1
 800b09e:	d00c      	beq.n	800b0ba <HAL_SPI_TransmitReceive+0x120>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800b0a0:	b92d      	cbnz	r5, 800b0ae <HAL_SPI_TransmitReceive+0x114>
          __HAL_UNLOCK(hspi);
 800b0a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0a6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 800b0aa:	2703      	movs	r7, #3
 800b0ac:	e785      	b.n	800afba <HAL_SPI_TransmitReceive+0x20>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800b0ae:	f7fe fb73 	bl	8009798 <HAL_GetTick>
 800b0b2:	eba0 0008 	sub.w	r0, r0, r8
 800b0b6:	42a8      	cmp	r0, r5
 800b0b8:	d8f3      	bhi.n	800b0a2 <HAL_SPI_TransmitReceive+0x108>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b0ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b0bc:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1c7      	bne.n	800b054 <HAL_SPI_TransmitReceive+0xba>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d1db      	bne.n	800b080 <HAL_SPI_TransmitReceive+0xe6>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b0c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0ce:	d115      	bne.n	800b0fc <HAL_SPI_TransmitReceive+0x162>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	462b      	mov	r3, r5
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f7ff fe8f 	bl	800adfa <SPI_WaitFlagStateUntilTimeout>
 800b0dc:	b128      	cbz	r0, 800b0ea <HAL_SPI_TransmitReceive+0x150>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b0de:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b0e2:	f043 0302 	orr.w	r3, r3, #2
 800b0e6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b0ea:	68e2      	ldr	r2, [r4, #12]
      tmpreg = hspi->Instance->DR;
 800b0ec:	6823      	ldr	r3, [r4, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b0ee:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b0f2:	d16f      	bne.n	800b1d4 <HAL_SPI_TransmitReceive+0x23a>
      tmpreg = hspi->Instance->DR;
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b0f8:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7ff febc 	bl	800ae7c <SPI_EndRxTxTransaction>
 800b104:	2800      	cmp	r0, #0
 800b106:	d1d0      	bne.n	800b0aa <HAL_SPI_TransmitReceive+0x110>
  hspi->State = HAL_SPI_STATE_READY;
 800b108:	2301      	movs	r3, #1
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b10a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800b10c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b110:	688a      	ldr	r2, [r1, #8]
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b112:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b116:	f012 0210 	ands.w	r2, r2, #16
 800b11a:	d070      	beq.n	800b1fe <HAL_SPI_TransmitReceive+0x264>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b11c:	f043 0302 	orr.w	r3, r3, #2
 800b120:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b124:	f06f 0310 	mvn.w	r3, #16
 800b128:	608b      	str	r3, [r1, #8]
    __HAL_UNLOCK(hspi);
 800b12a:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800b12e:	e744      	b.n	800afba <HAL_SPI_TransmitReceive+0x20>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b130:	6821      	ldr	r1, [r4, #0]
 800b132:	688b      	ldr	r3, [r1, #8]
 800b134:	079e      	lsls	r6, r3, #30
 800b136:	d508      	bpl.n	800b14a <HAL_SPI_TransmitReceive+0x1b0>
        if(hspi->TxXferCount > 2)
 800b138:	2a02      	cmp	r2, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b13a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if(hspi->TxXferCount > 2)
 800b13c:	d92c      	bls.n	800b198 <HAL_SPI_TransmitReceive+0x1fe>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b13e:	f833 0b02 	ldrh.w	r0, [r3], #2
 800b142:	60c8      	str	r0, [r1, #12]
          hspi->TxXferCount -= 2;
 800b144:	3a02      	subs	r2, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b146:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800b148:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b14a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800b14e:	b1b1      	cbz	r1, 800b17e <HAL_SPI_TransmitReceive+0x1e4>
 800b150:	6822      	ldr	r2, [r4, #0]
 800b152:	6893      	ldr	r3, [r2, #8]
 800b154:	07d8      	lsls	r0, r3, #31
 800b156:	d512      	bpl.n	800b17e <HAL_SPI_TransmitReceive+0x1e4>
        if(hspi->RxXferCount > 1)
 800b158:	2901      	cmp	r1, #1
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b15a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if(hspi->RxXferCount > 1)
 800b15c:	d030      	beq.n	800b1c0 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b15e:	68d1      	ldr	r1, [r2, #12]
 800b160:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b164:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800b166:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b16a:	3b02      	subs	r3, #2
 800b16c:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800b16e:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800b170:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800b174:	d803      	bhi.n	800b17e <HAL_SPI_TransmitReceive+0x1e4>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b176:	6853      	ldr	r3, [r2, #4]
 800b178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b17c:	6053      	str	r3, [r2, #4]
      if(Timeout != HAL_MAX_DELAY)
 800b17e:	1c6b      	adds	r3, r5, #1
 800b180:	f43f af5d 	beq.w	800b03e <HAL_SPI_TransmitReceive+0xa4>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b184:	2d00      	cmp	r5, #0
 800b186:	d08c      	beq.n	800b0a2 <HAL_SPI_TransmitReceive+0x108>
 800b188:	f7fe fb06 	bl	8009798 <HAL_GetTick>
 800b18c:	eba0 0008 	sub.w	r0, r0, r8
 800b190:	42a8      	cmp	r0, r5
 800b192:	f67f af54 	bls.w	800b03e <HAL_SPI_TransmitReceive+0xa4>
 800b196:	e784      	b.n	800b0a2 <HAL_SPI_TransmitReceive+0x108>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	63a2      	str	r2, [r4, #56]	; 0x38
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800b1a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1ce      	bne.n	800b14a <HAL_SPI_TransmitReceive+0x1b0>
 800b1ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b1ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b1b2:	bf01      	itttt	eq
 800b1b4:	6822      	ldreq	r2, [r4, #0]
 800b1b6:	6813      	ldreq	r3, [r2, #0]
 800b1b8:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b1bc:	6013      	streq	r3, [r2, #0]
 800b1be:	e7c4      	b.n	800b14a <HAL_SPI_TransmitReceive+0x1b0>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800b1c0:	1c59      	adds	r1, r3, #1
 800b1c2:	6421      	str	r1, [r4, #64]	; 0x40
 800b1c4:	7b12      	ldrb	r2, [r2, #12]
 800b1c6:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800b1c8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b1d2:	e7d4      	b.n	800b17e <HAL_SPI_TransmitReceive+0x1e4>
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b1d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b1d6:	7b1b      	ldrb	r3, [r3, #12]
 800b1d8:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b1dc:	2a02      	cmp	r2, #2
 800b1de:	d18d      	bne.n	800b0fc <HAL_SPI_TransmitReceive+0x162>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 800b1e0:	462b      	mov	r3, r5
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f7ff fe08 	bl	800adfa <SPI_WaitFlagStateUntilTimeout>
 800b1ea:	b128      	cbz	r0, 800b1f8 <HAL_SPI_TransmitReceive+0x25e>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b1ec:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b1f0:	f043 0302 	orr.w	r3, r3, #2
 800b1f4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	7b1b      	ldrb	r3, [r3, #12]
 800b1fc:	e77c      	b.n	800b0f8 <HAL_SPI_TransmitReceive+0x15e>
    return HAL_BUSY;
 800b1fe:	1e1f      	subs	r7, r3, #0
  __HAL_UNLOCK(hspi);
 800b200:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_BUSY;
 800b204:	bf18      	it	ne
 800b206:	2701      	movne	r7, #1
 800b208:	e6d7      	b.n	800afba <HAL_SPI_TransmitReceive+0x20>

0800b20a <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 800b20a:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 800b20e:	4770      	bx	lr

0800b210 <HAL_IWDG_MspInit>:
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 800b210:	4770      	bx	lr

0800b212 <HAL_IWDG_Init>:
{
 800b212:	b538      	push	{r3, r4, r5, lr}
  if(hiwdg == NULL)
 800b214:	4604      	mov	r4, r0
 800b216:	2800      	cmp	r0, #0
 800b218:	d048      	beq.n	800b2ac <HAL_IWDG_Init+0x9a>
  if((__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET)  &&
 800b21a:	6803      	ldr	r3, [r0, #0]
 800b21c:	68da      	ldr	r2, [r3, #12]
 800b21e:	07d1      	lsls	r1, r2, #31
 800b220:	d505      	bpl.n	800b22e <HAL_IWDG_Init+0x1c>
     (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET)  &&
 800b222:	68da      	ldr	r2, [r3, #12]
  if((__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET)  &&
 800b224:	0792      	lsls	r2, r2, #30
 800b226:	d502      	bpl.n	800b22e <HAL_IWDG_Init+0x1c>
     (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_WVU) != RESET))
 800b228:	68db      	ldr	r3, [r3, #12]
     (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET)  &&
 800b22a:	075b      	lsls	r3, r3, #29
 800b22c:	d43e      	bmi.n	800b2ac <HAL_IWDG_Init+0x9a>
  if(hiwdg->State == HAL_IWDG_STATE_RESET)
 800b22e:	7c63      	ldrb	r3, [r4, #17]
 800b230:	b913      	cbnz	r3, 800b238 <HAL_IWDG_Init+0x26>
    HAL_IWDG_MspInit(hiwdg);
 800b232:	4620      	mov	r0, r4
 800b234:	f7ff ffec 	bl	800b210 <HAL_IWDG_MspInit>
  hiwdg->State = HAL_IWDG_STATE_BUSY;
 800b238:	2302      	movs	r3, #2
 800b23a:	7463      	strb	r3, [r4, #17]
  __HAL_IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b23c:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
 800b23e:	6861      	ldr	r1, [r4, #4]
  __HAL_IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	f442 42aa 	orr.w	r2, r2, #21760	; 0x5500
 800b246:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 800b24a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	f022 0207 	bic.w	r2, r2, #7
 800b252:	430a      	orrs	r2, r1
 800b254:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hiwdg->Instance->RLR, IWDG_RLR_RL, hiwdg->Init.Reload);
 800b256:	689a      	ldr	r2, [r3, #8]
 800b258:	68a1      	ldr	r1, [r4, #8]
 800b25a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800b25e:	f022 020f 	bic.w	r2, r2, #15
 800b262:	430a      	orrs	r2, r1
 800b264:	609a      	str	r2, [r3, #8]
  if (((hiwdg->Init.Window) != IWDG_WINDOW_DISABLE) || ((hiwdg->Instance->WINR) != IWDG_WINDOW_DISABLE))
 800b266:	68e2      	ldr	r2, [r4, #12]
 800b268:	f640 71ff 	movw	r1, #4095	; 0xfff
 800b26c:	428a      	cmp	r2, r1
 800b26e:	d102      	bne.n	800b276 <HAL_IWDG_Init+0x64>
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	4293      	cmp	r3, r2
 800b274:	d00d      	beq.n	800b292 <HAL_IWDG_Init+0x80>
    tickstart = HAL_GetTick();
 800b276:	f7fe fa8f 	bl	8009798 <HAL_GetTick>
 800b27a:	4605      	mov	r5, r0
    while((uint32_t)(hiwdg->Instance->SR) != RESET)
 800b27c:	6822      	ldr	r2, [r4, #0]
 800b27e:	68d3      	ldr	r3, [r2, #12]
 800b280:	b95b      	cbnz	r3, 800b29a <HAL_IWDG_Init+0x88>
    MODIFY_REG(hiwdg->Instance->WINR, IWDG_WINR_WIN, hiwdg->Init.Window);
 800b282:	6913      	ldr	r3, [r2, #16]
 800b284:	68e1      	ldr	r1, [r4, #12]
 800b286:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b28a:	f023 030f 	bic.w	r3, r3, #15
 800b28e:	430b      	orrs	r3, r1
 800b290:	6113      	str	r3, [r2, #16]
  hiwdg->State = HAL_IWDG_STATE_READY;
 800b292:	2301      	movs	r3, #1
 800b294:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800b296:	2000      	movs	r0, #0
 800b298:	e007      	b.n	800b2aa <HAL_IWDG_Init+0x98>
      if((HAL_GetTick()-tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b29a:	f7fe fa7d 	bl	8009798 <HAL_GetTick>
 800b29e:	1b40      	subs	r0, r0, r5
 800b2a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b2a4:	d9ea      	bls.n	800b27c <HAL_IWDG_Init+0x6a>
        hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800b2a6:	2003      	movs	r0, #3
 800b2a8:	7460      	strb	r0, [r4, #17]
}
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b2ac:	2001      	movs	r0, #1
 800b2ae:	e7fc      	b.n	800b2aa <HAL_IWDG_Init+0x98>

0800b2b0 <HAL_IWDG_Start>:
  * @brief  Starts the IWDG.
  * @param  hiwdg: IWDG handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Start(IWDG_HandleTypeDef *hiwdg)
{
 800b2b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Process Locked */
  __HAL_LOCK(hiwdg); 
 800b2b2:	7c03      	ldrb	r3, [r0, #16]
 800b2b4:	2b01      	cmp	r3, #1
{
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hiwdg); 
 800b2bc:	d030      	beq.n	800b320 <HAL_IWDG_Start+0x70>

    /* Change IWDG peripheral state */  
  hiwdg->State = HAL_IWDG_STATE_BUSY;

  /* Reload IWDG counter with value defined in the RLR register */
  if ((hiwdg->Init.Window) == IWDG_WINDOW_DISABLE)
 800b2be:	68c1      	ldr	r1, [r0, #12]
  hiwdg->State = HAL_IWDG_STATE_BUSY;
 800b2c0:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hiwdg); 
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	7402      	strb	r2, [r0, #16]
  if ((hiwdg->Init.Window) == IWDG_WINDOW_DISABLE)
 800b2c6:	f640 73ff 	movw	r3, #4095	; 0xfff
  {
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b2ca:	6802      	ldr	r2, [r0, #0]
  if ((hiwdg->Init.Window) == IWDG_WINDOW_DISABLE)
 800b2cc:	4299      	cmp	r1, r3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b2ce:	bf01      	itttt	eq
 800b2d0:	6813      	ldreq	r3, [r2, #0]
 800b2d2:	f443 432a 	orreq.w	r3, r3, #43520	; 0xaa00
 800b2d6:	f043 03aa 	orreq.w	r3, r3, #170	; 0xaa
 800b2da:	6013      	streq	r3, [r2, #0]
  }

  /* Enable the IWDG peripheral */
  __HAL_IWDG_START(hiwdg);
 800b2dc:	6813      	ldr	r3, [r2, #0]
 800b2de:	f443 434c 	orr.w	r3, r3, #52224	; 0xcc00
 800b2e2:	f043 03cc 	orr.w	r3, r3, #204	; 0xcc
 800b2e6:	6013      	str	r3, [r2, #0]

  tickstart = HAL_GetTick();
 800b2e8:	f7fe fa56 	bl	8009798 <HAL_GetTick>
 800b2ec:	4605      	mov	r5, r0

  /* Wait until PVU, RVU, WVU flag are RESET */
  while( (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET) &&
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	68da      	ldr	r2, [r3, #12]
 800b2f2:	07d1      	lsls	r1, r2, #31
 800b2f4:	d505      	bpl.n	800b302 <HAL_IWDG_Start+0x52>
         (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET) &&
 800b2f6:	68da      	ldr	r2, [r3, #12]
  while( (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET) &&
 800b2f8:	0792      	lsls	r2, r2, #30
 800b2fa:	d502      	bpl.n	800b302 <HAL_IWDG_Start+0x52>
         (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_WVU) != RESET) )
 800b2fc:	68db      	ldr	r3, [r3, #12]
         (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET) &&
 800b2fe:	075b      	lsls	r3, r3, #29
 800b300:	d404      	bmi.n	800b30c <HAL_IWDG_Start+0x5c>
      return HAL_TIMEOUT;
    } 
  }

  /* Change IWDG peripheral state */    
  hiwdg->State = HAL_IWDG_STATE_READY; 
 800b302:	2301      	movs	r3, #1
 800b304:	7463      	strb	r3, [r4, #17]
                  
  /* Process Unlocked */
  __HAL_UNLOCK(hiwdg);
 800b306:	2300      	movs	r3, #0
 800b308:	7423      	strb	r3, [r4, #16]
  
  /* Return function status */
  return HAL_OK;
 800b30a:	e009      	b.n	800b320 <HAL_IWDG_Start+0x70>
    if((HAL_GetTick()-tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b30c:	f7fe fa44 	bl	8009798 <HAL_GetTick>
 800b310:	1b40      	subs	r0, r0, r5
 800b312:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b316:	d9ea      	bls.n	800b2ee <HAL_IWDG_Start+0x3e>
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800b318:	2303      	movs	r3, #3
      __HAL_UNLOCK(hiwdg);
 800b31a:	2200      	movs	r2, #0
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800b31c:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hiwdg);
 800b31e:	7422      	strb	r2, [r4, #16]
}
 800b320:	4618      	mov	r0, r3
 800b322:	bd38      	pop	{r3, r4, r5, pc}

0800b324 <HAL_IWDG_Refresh>:
  * @brief  Refreshes the IWDG.
  * @param  hiwdg: IWDG handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b324:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Process Locked */
  __HAL_LOCK(hiwdg); 
 800b326:	7c03      	ldrb	r3, [r0, #16]
 800b328:	2b01      	cmp	r3, #1
{
 800b32a:	4604      	mov	r4, r0
 800b32c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hiwdg); 
 800b330:	d01e      	beq.n	800b370 <HAL_IWDG_Refresh+0x4c>
 800b332:	2201      	movs	r2, #1
 800b334:	7402      	strb	r2, [r0, #16]

  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;
 800b336:	7443      	strb	r3, [r0, #17]
  
  tickstart = HAL_GetTick();
 800b338:	f7fe fa2e 	bl	8009798 <HAL_GetTick>
 800b33c:	4605      	mov	r5, r0

  /* Wait until RVU flag is RESET */
  while(__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET)
 800b33e:	6821      	ldr	r1, [r4, #0]
 800b340:	68cb      	ldr	r3, [r1, #12]
 800b342:	f013 0302 	ands.w	r3, r3, #2
 800b346:	d109      	bne.n	800b35c <HAL_IWDG_Refresh+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b348:	680a      	ldr	r2, [r1, #0]
 800b34a:	f442 422a 	orr.w	r2, r2, #43520	; 0xaa00
 800b34e:	f042 02aa 	orr.w	r2, r2, #170	; 0xaa
 800b352:	600a      	str	r2, [r1, #0]

  /* Change IWDG peripheral state */    
  hiwdg->State = HAL_IWDG_STATE_READY; 
 800b354:	2201      	movs	r2, #1
 800b356:	7462      	strb	r2, [r4, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hiwdg);
 800b358:	7423      	strb	r3, [r4, #16]
  
  /* Return function status */
  return HAL_OK;
 800b35a:	e009      	b.n	800b370 <HAL_IWDG_Refresh+0x4c>
    if((HAL_GetTick()-tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b35c:	f7fe fa1c 	bl	8009798 <HAL_GetTick>
 800b360:	1b40      	subs	r0, r0, r5
 800b362:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b366:	d9ea      	bls.n	800b33e <HAL_IWDG_Refresh+0x1a>
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800b368:	2303      	movs	r3, #3
      __HAL_UNLOCK(hiwdg);
 800b36a:	2200      	movs	r2, #0
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800b36c:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hiwdg);
 800b36e:	7422      	strb	r2, [r4, #16]
}
 800b370:	4618      	mov	r0, r3
 800b372:	bd38      	pop	{r3, r4, r5, pc}

0800b374 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b374:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b376:	b180      	cbz	r0, 800b39a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b378:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b37c:	b113      	cbz	r3, 800b384 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b384:	b109      	cbz	r1, 800b38a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800b386:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b38a:	2301      	movs	r3, #1
 800b38c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800b390:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b392:	f000 fc6b 	bl	800bc6c <USBD_LL_Init>
  
  return USBD_OK; 
 800b396:	2000      	movs	r0, #0
}
 800b398:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800b39a:	2002      	movs	r0, #2
 800b39c:	e7fc      	b.n	800b398 <USBD_Init+0x24>

0800b39e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800b39e:	b119      	cbz	r1, 800b3a8 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 800b3a0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800b3a8:	2002      	movs	r0, #2
  }
  
  return status;
}
 800b3aa:	4770      	bx	lr

0800b3ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b3ac:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800b3ae:	f000 fc9b 	bl	800bce8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	bd08      	pop	{r3, pc}

0800b3b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b3b6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800b3b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b3bc:	b90b      	cbnz	r3, 800b3c2 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b3be:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800b3c0:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4798      	blx	r3
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d0fa      	beq.n	800b3c0 <USBD_SetClassConfig+0xa>
 800b3ca:	e7f8      	b.n	800b3be <USBD_SetClassConfig+0x8>

0800b3cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b3cc:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800b3ce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	4798      	blx	r3
  return USBD_OK;
}
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	bd08      	pop	{r3, pc}

0800b3da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3da:	b538      	push	{r3, r4, r5, lr}
 800b3dc:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3de:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f000 fa3f 	bl	800b866 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800b3e8:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800b3ea:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800b3ee:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800b3f2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800b3f6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800b3fa:	f001 031f 	and.w	r3, r1, #31
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d008      	beq.n	800b414 <USBD_LL_SetupStage+0x3a>
 800b402:	2b02      	cmp	r3, #2
 800b404:	d00b      	beq.n	800b41e <USBD_LL_SetupStage+0x44>
 800b406:	b97b      	cbnz	r3, 800b428 <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800b408:	4629      	mov	r1, r5
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 f8c2 	bl	800b594 <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 800b410:	2000      	movs	r0, #0
 800b412:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800b414:	4629      	mov	r1, r5
 800b416:	4620      	mov	r0, r4
 800b418:	f000 f9b6 	bl	800b788 <USBD_StdItfReq>
    break;
 800b41c:	e7f8      	b.n	800b410 <USBD_LL_SetupStage+0x36>
    USBD_StdEPReq(pdev, &pdev->request);   
 800b41e:	4629      	mov	r1, r5
 800b420:	4620      	mov	r0, r4
 800b422:	f000 f9c9 	bl	800b7b8 <USBD_StdEPReq>
    break;
 800b426:	e7f3      	b.n	800b410 <USBD_LL_SetupStage+0x36>
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800b428:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b42c:	4620      	mov	r0, r4
 800b42e:	f000 fc73 	bl	800bd18 <USBD_LL_StallEP>
    break;
 800b432:	e7ed      	b.n	800b410 <USBD_LL_SetupStage+0x36>

0800b434 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	4604      	mov	r4, r0
 800b438:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800b43a:	bb01      	cbnz	r1, 800b47e <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b43c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800b440:	2b03      	cmp	r3, #3
 800b442:	d10d      	bne.n	800b460 <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 800b444:	e9d0 5343 	ldrd	r5, r3, [r0, #268]	; 0x10c
 800b448:	429d      	cmp	r5, r3
 800b44a:	d90b      	bls.n	800b464 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 800b44c:	1aed      	subs	r5, r5, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800b44e:	42ab      	cmp	r3, r5
 800b450:	bf28      	it	cs
 800b452:	462b      	movcs	r3, r5
        pep->rem_length -=  pep->maxpacket;
 800b454:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800b458:	b29a      	uxth	r2, r3
 800b45a:	4631      	mov	r1, r6
 800b45c:	f000 fa55 	bl	800b90a <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800b460:	2000      	movs	r0, #0
 800b462:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b464:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	b123      	cbz	r3, 800b476 <USBD_LL_DataOutStage+0x42>
 800b46c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b470:	2a03      	cmp	r2, #3
 800b472:	d100      	bne.n	800b476 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 800b474:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800b476:	4620      	mov	r0, r4
 800b478:	f000 fa4f 	bl	800b91a <USBD_CtlSendStatus>
 800b47c:	e7f0      	b.n	800b460 <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 800b47e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d0eb      	beq.n	800b460 <USBD_LL_DataOutStage+0x2c>
 800b488:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b48c:	2a03      	cmp	r2, #3
 800b48e:	d1e7      	bne.n	800b460 <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 800b490:	4798      	blx	r3
 800b492:	e7e5      	b.n	800b460 <USBD_LL_DataOutStage+0x2c>

0800b494 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800b494:	b570      	push	{r4, r5, r6, lr}
 800b496:	4604      	mov	r4, r0
 800b498:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800b49a:	bbb1      	cbnz	r1, 800b50a <USBD_LL_DataInStage+0x76>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b49c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d109      	bne.n	800b4b8 <USBD_LL_DataInStage+0x24>
    {
      if(pep->rem_length > pep->maxpacket)
 800b4a4:	e9d0 5307 	ldrd	r5, r3, [r0, #28]
 800b4a8:	429d      	cmp	r5, r3
 800b4aa:	d90e      	bls.n	800b4ca <USBD_LL_DataInStage+0x36>
      {
        pep->rem_length -=  pep->maxpacket;
 800b4ac:	1aeb      	subs	r3, r5, r3
 800b4ae:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	f000 fa14 	bl	800b8e0 <USBD_CtlContinueSendData>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800b4b8:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d102      	bne.n	800b4c6 <USBD_LL_DataInStage+0x32>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800b4ca:	6982      	ldr	r2, [r0, #24]
 800b4cc:	fbb2 f5f3 	udiv	r5, r2, r3
 800b4d0:	fb03 2515 	mls	r5, r3, r5, r2
 800b4d4:	b95d      	cbnz	r5, 800b4ee <USBD_LL_DataInStage+0x5a>
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d809      	bhi.n	800b4ee <USBD_LL_DataInStage+0x5a>
           (pep->total_length >= pep->maxpacket) &&
 800b4da:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d205      	bcs.n	800b4ee <USBD_LL_DataInStage+0x5a>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	f000 f9fc 	bl	800b8e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800b4e8:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800b4ec:	e7e4      	b.n	800b4b8 <USBD_LL_DataInStage+0x24>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b4ee:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	b12b      	cbz	r3, 800b502 <USBD_LL_DataInStage+0x6e>
 800b4f6:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800b4fa:	2a03      	cmp	r2, #3
 800b4fc:	d101      	bne.n	800b502 <USBD_LL_DataInStage+0x6e>
            pdev->pClass->EP0_TxSent(pdev); 
 800b4fe:	4620      	mov	r0, r4
 800b500:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800b502:	4620      	mov	r0, r4
 800b504:	f000 fa14 	bl	800b930 <USBD_CtlReceiveStatus>
 800b508:	e7d6      	b.n	800b4b8 <USBD_LL_DataInStage+0x24>
  else if((pdev->pClass->DataIn != NULL)&& 
 800b50a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b50e:	695b      	ldr	r3, [r3, #20]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d0d8      	beq.n	800b4c6 <USBD_LL_DataInStage+0x32>
 800b514:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b518:	2a03      	cmp	r2, #3
 800b51a:	d1d4      	bne.n	800b4c6 <USBD_LL_DataInStage+0x32>
    pdev->pClass->DataIn(pdev, epnum); 
 800b51c:	4798      	blx	r3
 800b51e:	e7d2      	b.n	800b4c6 <USBD_LL_DataInStage+0x32>

0800b520 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800b520:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800b522:	2200      	movs	r2, #0
{
 800b524:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800b526:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b528:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800b52a:	2340      	movs	r3, #64	; 0x40
 800b52c:	f000 fbe3 	bl	800bcf6 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800b530:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b532:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800b536:	2200      	movs	r2, #0
 800b538:	2180      	movs	r1, #128	; 0x80
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 fbdb 	bl	800bcf6 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b540:	2301      	movs	r3, #1
 800b542:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800b546:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b54a:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800b54c:	b12b      	cbz	r3, 800b55a <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800b54e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b552:	7921      	ldrb	r1, [r4, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	4620      	mov	r0, r4
 800b558:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800b55a:	2000      	movs	r0, #0
 800b55c:	bd38      	pop	{r3, r4, r5, pc}

0800b55e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800b55e:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800b560:	2000      	movs	r0, #0
 800b562:	4770      	bx	lr

0800b564 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800b564:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b566:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b56a:	2a03      	cmp	r2, #3
 800b56c:	d104      	bne.n	800b578 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800b56e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b572:	69db      	ldr	r3, [r3, #28]
 800b574:	b103      	cbz	r3, 800b578 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800b576:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800b578:	2000      	movs	r0, #0
 800b57a:	bd08      	pop	{r3, pc}

0800b57c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800b57c:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800b57e:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800b580:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800b582:	f000 fbc9 	bl	800bd18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800b586:	4620      	mov	r0, r4
 800b588:	2100      	movs	r1, #0
}
 800b58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800b58e:	f000 bbc3 	b.w	800bd18 <USBD_LL_StallEP>
	...

0800b594 <USBD_StdDevReq>:
{
 800b594:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800b596:	784b      	ldrb	r3, [r1, #1]
{
 800b598:	4604      	mov	r4, r0
 800b59a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800b59c:	2b09      	cmp	r3, #9
 800b59e:	d876      	bhi.n	800b68e <USBD_StdDevReq+0xfa>
 800b5a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b5a4:	00e500c9 	.word	0x00e500c9
 800b5a8:	00d90075 	.word	0x00d90075
 800b5ac:	006d0075 	.word	0x006d0075
 800b5b0:	0075000a 	.word	0x0075000a
 800b5b4:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800b5b8:	884b      	ldrh	r3, [r1, #2]
 800b5ba:	0a1a      	lsrs	r2, r3, #8
 800b5bc:	3a01      	subs	r2, #1
 800b5be:	2a06      	cmp	r2, #6
 800b5c0:	d865      	bhi.n	800b68e <USBD_StdDevReq+0xfa>
 800b5c2:	e8df f002 	tbb	[pc, r2]
 800b5c6:	1c04      	.short	0x1c04
 800b5c8:	49646429 	.word	0x49646429
 800b5cc:	52          	.byte	0x52
 800b5cd:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b5ce:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b5d2:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800b5d4:	7c20      	ldrb	r0, [r4, #16]
 800b5d6:	f10d 0106 	add.w	r1, sp, #6
 800b5da:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800b5dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b5e0:	2a00      	cmp	r2, #0
 800b5e2:	d067      	beq.n	800b6b4 <USBD_StdDevReq+0x120>
 800b5e4:	88eb      	ldrh	r3, [r5, #6]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d064      	beq.n	800b6b4 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	bf28      	it	cs
 800b5ee:	461a      	movcs	r2, r3
 800b5f0:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800b5f4:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 f965 	bl	800b8c6 <USBD_CtlSendData>
    break;
 800b5fc:	e05a      	b.n	800b6b4 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800b5fe:	7c02      	ldrb	r2, [r0, #16]
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b600:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800b604:	b932      	cbnz	r2, 800b614 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b608:	f10d 0006 	add.w	r0, sp, #6
 800b60c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b60e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b610:	7043      	strb	r3, [r0, #1]
      break; 
 800b612:	e7e3      	b.n	800b5dc <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b616:	e7f7      	b.n	800b608 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b05      	cmp	r3, #5
 800b61c:	d837      	bhi.n	800b68e <USBD_StdDevReq+0xfa>
 800b61e:	e8df f003 	tbb	[pc, r3]
 800b622:	0703      	.short	0x0703
 800b624:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800b628:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	e7d1      	b.n	800b5d4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b630:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	e7cd      	b.n	800b5d4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b638:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	e7c9      	b.n	800b5d4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b640:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	e7c5      	b.n	800b5d4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b648:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	e7c1      	b.n	800b5d4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b650:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	e7bd      	b.n	800b5d4 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800b658:	7c03      	ldrb	r3, [r0, #16]
 800b65a:	b9c3      	cbnz	r3, 800b68e <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b65c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b660:	f10d 0006 	add.w	r0, sp, #6
 800b664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b666:	4798      	blx	r3
      break;
 800b668:	e7b8      	b.n	800b5dc <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800b66a:	7c03      	ldrb	r3, [r0, #16]
 800b66c:	b97b      	cbnz	r3, 800b68e <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b66e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b672:	f10d 0006 	add.w	r0, sp, #6
 800b676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b678:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b67a:	2307      	movs	r3, #7
 800b67c:	e7c8      	b.n	800b610 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800b67e:	888b      	ldrh	r3, [r1, #4]
 800b680:	b92b      	cbnz	r3, 800b68e <USBD_StdDevReq+0xfa>
 800b682:	88cb      	ldrh	r3, [r1, #6]
 800b684:	b91b      	cbnz	r3, 800b68e <USBD_StdDevReq+0xfa>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800b686:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d103      	bne.n	800b696 <USBD_StdDevReq+0x102>
       USBD_CtlError(pdev , req);                     
 800b68e:	4620      	mov	r0, r4
 800b690:	f7ff ff74 	bl	800b57c <USBD_CtlError.constprop.0>
      break;
 800b694:	e00e      	b.n	800b6b4 <USBD_StdDevReq+0x120>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800b696:	884d      	ldrh	r5, [r1, #2]
 800b698:	f005 057f 	and.w	r5, r5, #127	; 0x7f
      pdev->dev_address = dev_addr;
 800b69c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	f000 fb5a 	bl	800bd5a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 f937 	bl	800b91a <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800b6ac:	b12d      	cbz	r5, 800b6ba <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800b6ae:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800b6b0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	b003      	add	sp, #12
 800b6b8:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e7f8      	b.n	800b6b0 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800b6be:	7889      	ldrb	r1, [r1, #2]
 800b6c0:	4d30      	ldr	r5, [pc, #192]	; (800b784 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800b6c2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800b6c4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800b6c6:	d8e2      	bhi.n	800b68e <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state) 
 800b6c8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d00c      	beq.n	800b6ea <USBD_StdDevReq+0x156>
 800b6d0:	2b03      	cmp	r3, #3
 800b6d2:	d1dc      	bne.n	800b68e <USBD_StdDevReq+0xfa>
      if (cfgidx == 0) 
 800b6d4:	b9b1      	cbnz	r1, 800b704 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800b6dc:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800b6de:	f7ff fe75 	bl	800b3cc <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f000 f919 	bl	800b91a <USBD_CtlSendStatus>
 800b6e8:	e7e4      	b.n	800b6b4 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800b6ea:	2900      	cmp	r1, #0
 800b6ec:	d0f9      	beq.n	800b6e2 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800b6ee:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6f0:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800b6f2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6f4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f7ff fe5c 	bl	800b3b6 <USBD_SetClassConfig>
 800b6fe:	2802      	cmp	r0, #2
 800b700:	d1ef      	bne.n	800b6e2 <USBD_StdDevReq+0x14e>
 800b702:	e7c4      	b.n	800b68e <USBD_StdDevReq+0xfa>
      else  if (cfgidx != pdev->dev_config) 
 800b704:	6841      	ldr	r1, [r0, #4]
 800b706:	2901      	cmp	r1, #1
 800b708:	d0eb      	beq.n	800b6e2 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800b70a:	b2c9      	uxtb	r1, r1
 800b70c:	f7ff fe5e 	bl	800b3cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b710:	7829      	ldrb	r1, [r5, #0]
 800b712:	6061      	str	r1, [r4, #4]
 800b714:	e7f0      	b.n	800b6f8 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800b716:	88ca      	ldrh	r2, [r1, #6]
 800b718:	2a01      	cmp	r2, #1
 800b71a:	d1b8      	bne.n	800b68e <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state )  
 800b71c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b720:	2b02      	cmp	r3, #2
 800b722:	d003      	beq.n	800b72c <USBD_StdDevReq+0x198>
 800b724:	2b03      	cmp	r3, #3
 800b726:	d1b2      	bne.n	800b68e <USBD_StdDevReq+0xfa>
      USBD_CtlSendData (pdev, 
 800b728:	1d01      	adds	r1, r0, #4
 800b72a:	e764      	b.n	800b5f6 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800b72c:	4601      	mov	r1, r0
 800b72e:	2300      	movs	r3, #0
 800b730:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 800b734:	e75f      	b.n	800b5f6 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800b736:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b73a:	3b02      	subs	r3, #2
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d8a6      	bhi.n	800b68e <USBD_StdDevReq+0xfa>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800b740:	2301      	movs	r3, #1
 800b742:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800b744:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800b748:	b10b      	cbz	r3, 800b74e <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800b74a:	2303      	movs	r3, #3
 800b74c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800b74e:	2202      	movs	r2, #2
 800b750:	f104 010c 	add.w	r1, r4, #12
 800b754:	e74f      	b.n	800b5f6 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b756:	884b      	ldrh	r3, [r1, #2]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d1ab      	bne.n	800b6b4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800b75c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800b760:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b764:	4629      	mov	r1, r5
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	4620      	mov	r0, r4
 800b76a:	4798      	blx	r3
 800b76c:	e7b9      	b.n	800b6e2 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800b76e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b772:	3b02      	subs	r3, #2
 800b774:	2b01      	cmp	r3, #1
 800b776:	d88a      	bhi.n	800b68e <USBD_StdDevReq+0xfa>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800b778:	884b      	ldrh	r3, [r1, #2]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d19a      	bne.n	800b6b4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800b77e:	2300      	movs	r3, #0
 800b780:	e7ec      	b.n	800b75c <USBD_StdDevReq+0x1c8>
 800b782:	bf00      	nop
 800b784:	200010a8 	.word	0x200010a8

0800b788 <USBD_StdItfReq>:
{
 800b788:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800b78a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b78e:	2b03      	cmp	r3, #3
{
 800b790:	4604      	mov	r4, r0
 800b792:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800b794:	d10d      	bne.n	800b7b2 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800b796:	790b      	ldrb	r3, [r1, #4]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d80a      	bhi.n	800b7b2 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800b79c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800b7a4:	88eb      	ldrh	r3, [r5, #6]
 800b7a6:	b913      	cbnz	r3, 800b7ae <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 f8b6 	bl	800b91a <USBD_CtlSendStatus>
}
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800b7b2:	f7ff fee3 	bl	800b57c <USBD_CtlError.constprop.0>
    break;
 800b7b6:	e7fa      	b.n	800b7ae <USBD_StdItfReq+0x26>

0800b7b8 <USBD_StdEPReq>:
{
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800b7bc:	888a      	ldrh	r2, [r1, #4]
  switch (req->bRequest) 
 800b7be:	786b      	ldrb	r3, [r5, #1]
  ep_addr  = LOBYTE(req->wIndex);   
 800b7c0:	7909      	ldrb	r1, [r1, #4]
  switch (req->bRequest) 
 800b7c2:	2b01      	cmp	r3, #1
{
 800b7c4:	4604      	mov	r4, r0
  switch (req->bRequest) 
 800b7c6:	d03b      	beq.n	800b840 <USBD_StdEPReq+0x88>
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d01e      	beq.n	800b80a <USBD_StdEPReq+0x52>
 800b7cc:	bb33      	cbnz	r3, 800b81c <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800b7ce:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d042      	beq.n	800b85c <USBD_StdEPReq+0xa4>
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d11d      	bne.n	800b816 <USBD_StdEPReq+0x5e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800b7da:	f001 037f 	and.w	r3, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800b7de:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b7e2:	bf14      	ite	ne
 800b7e4:	3301      	addne	r3, #1
 800b7e6:	3310      	addeq	r3, #16
 800b7e8:	2204      	movs	r2, #4
 800b7ea:	2510      	movs	r5, #16
 800b7ec:	fb15 2503 	smlabb	r5, r5, r3, r2
 800b7f0:	4405      	add	r5, r0
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800b7f2:	f000 fa9f 	bl	800bd34 <USBD_LL_IsStallEP>
 800b7f6:	3800      	subs	r0, #0
 800b7f8:	bf18      	it	ne
 800b7fa:	2001      	movne	r0, #1
 800b7fc:	6028      	str	r0, [r5, #0]
      USBD_CtlSendData (pdev,
 800b7fe:	2202      	movs	r2, #2
 800b800:	4629      	mov	r1, r5
 800b802:	4620      	mov	r0, r4
 800b804:	f000 f85f 	bl	800b8c6 <USBD_CtlSendData>
      break;
 800b808:	e008      	b.n	800b81c <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800b80a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d024      	beq.n	800b85c <USBD_StdEPReq+0xa4>
 800b812:	2b03      	cmp	r3, #3
 800b814:	d004      	beq.n	800b820 <USBD_StdEPReq+0x68>
      USBD_CtlError(pdev , req);
 800b816:	4620      	mov	r0, r4
 800b818:	f7ff feb0 	bl	800b57c <USBD_CtlError.constprop.0>
}
 800b81c:	2000      	movs	r0, #0
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
      if (req->wValue == USB_FEATURE_EP_HALT)
 800b820:	886b      	ldrh	r3, [r5, #2]
 800b822:	b91b      	cbnz	r3, 800b82c <USBD_StdEPReq+0x74>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800b824:	064b      	lsls	r3, r1, #25
 800b826:	d001      	beq.n	800b82c <USBD_StdEPReq+0x74>
          USBD_LL_StallEP(pdev , ep_addr);
 800b828:	f000 fa76 	bl	800bd18 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800b82c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b830:	4629      	mov	r1, r5
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	4620      	mov	r0, r4
 800b836:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800b838:	4620      	mov	r0, r4
 800b83a:	f000 f86e 	bl	800b91a <USBD_CtlSendStatus>
 800b83e:	e7ed      	b.n	800b81c <USBD_StdEPReq+0x64>
    switch (pdev->dev_state) 
 800b840:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b844:	2b02      	cmp	r3, #2
 800b846:	d009      	beq.n	800b85c <USBD_StdEPReq+0xa4>
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d1e4      	bne.n	800b816 <USBD_StdEPReq+0x5e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800b84c:	886b      	ldrh	r3, [r5, #2]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1e4      	bne.n	800b81c <USBD_StdEPReq+0x64>
        if ((ep_addr & 0x7F) != 0x00) 
 800b852:	064a      	lsls	r2, r1, #25
 800b854:	d0f0      	beq.n	800b838 <USBD_StdEPReq+0x80>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800b856:	f000 fa66 	bl	800bd26 <USBD_LL_ClearStallEP>
 800b85a:	e7e7      	b.n	800b82c <USBD_StdEPReq+0x74>
      if ((ep_addr & 0x7F) != 0x00) 
 800b85c:	064b      	lsls	r3, r1, #25
 800b85e:	d0dd      	beq.n	800b81c <USBD_StdEPReq+0x64>
        USBD_LL_StallEP(pdev , ep_addr);
 800b860:	f000 fa5a 	bl	800bd18 <USBD_LL_StallEP>
 800b864:	e7da      	b.n	800b81c <USBD_StdEPReq+0x64>

0800b866 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b866:	780b      	ldrb	r3, [r1, #0]
 800b868:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b86a:	784b      	ldrb	r3, [r1, #1]
 800b86c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b86e:	78ca      	ldrb	r2, [r1, #3]
 800b870:	788b      	ldrb	r3, [r1, #2]
 800b872:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b876:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b878:	794a      	ldrb	r2, [r1, #5]
 800b87a:	790b      	ldrb	r3, [r1, #4]
 800b87c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b880:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b882:	79ca      	ldrb	r2, [r1, #7]
 800b884:	798b      	ldrb	r3, [r1, #6]
 800b886:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b88a:	80c3      	strh	r3, [r0, #6]
}
 800b88c:	4770      	bx	lr

0800b88e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b88e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800b890:	b188      	cbz	r0, 800b8b6 <USBD_GetString+0x28>
 800b892:	2400      	movs	r4, #0
 800b894:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800b896:	4623      	mov	r3, r4
 800b898:	3401      	adds	r4, #1
 800b89a:	5d05      	ldrb	r5, [r0, r4]
 800b89c:	2d00      	cmp	r5, #0
 800b89e:	d1fa      	bne.n	800b896 <USBD_GetString+0x8>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	005b      	lsls	r3, r3, #1
 800b8a6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800b8a8:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	704b      	strb	r3, [r1, #1]
 800b8ae:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800b8b0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800b8b4:	b904      	cbnz	r4, 800b8b8 <USBD_GetString+0x2a>
}
 800b8b6:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800b8b8:	1c5a      	adds	r2, r3, #1
 800b8ba:	b2d2      	uxtb	r2, r2
 800b8bc:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 800b8be:	3302      	adds	r3, #2
 800b8c0:	548d      	strb	r5, [r1, r2]
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	e7f4      	b.n	800b8b0 <USBD_GetString+0x22>

0800b8c6 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800b8c6:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800b8c8:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800b8ca:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length   = len;
 800b8cc:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800b8d0:	f8c0 41f4 	str.w	r4, [r0, #500]	; 0x1f4
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800b8d4:	460a      	mov	r2, r1
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	f000 fa46 	bl	800bd68 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b8dc:	2000      	movs	r0, #0
 800b8de:	bd10      	pop	{r4, pc}

0800b8e0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800b8e0:	b508      	push	{r3, lr}
 800b8e2:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800b8e4:	460a      	mov	r2, r1
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	f000 fa3e 	bl	800bd68 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	bd08      	pop	{r3, pc}

0800b8f0 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800b8f0:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800b8f2:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800b8f4:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length   = len;
 800b8f6:	e9c0 2242 	strd	r2, r2, [r0, #264]	; 0x108
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800b8fa:	f8c0 41f4 	str.w	r4, [r0, #500]	; 0x1f4
  USBD_LL_PrepareReceive (pdev,
 800b8fe:	460a      	mov	r2, r1
 800b900:	2100      	movs	r1, #0
 800b902:	f000 fa38 	bl	800bd76 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800b906:	2000      	movs	r0, #0
 800b908:	bd10      	pop	{r4, pc}

0800b90a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800b90a:	b508      	push	{r3, lr}
 800b90c:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 800b90e:	460a      	mov	r2, r1
 800b910:	2100      	movs	r1, #0
 800b912:	f000 fa30 	bl	800bd76 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800b916:	2000      	movs	r0, #0
 800b918:	bd08      	pop	{r3, pc}

0800b91a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800b91a:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b91c:	2304      	movs	r3, #4
 800b91e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800b922:	2300      	movs	r3, #0
 800b924:	461a      	mov	r2, r3
 800b926:	4619      	mov	r1, r3
 800b928:	f000 fa1e 	bl	800bd68 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b92c:	2000      	movs	r0, #0
 800b92e:	bd08      	pop	{r3, pc}

0800b930 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800b930:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800b932:	2305      	movs	r3, #5
 800b934:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800b938:	2300      	movs	r3, #0
 800b93a:	461a      	mov	r2, r3
 800b93c:	4619      	mov	r1, r3
 800b93e:	f000 fa1a 	bl	800bd76 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800b942:	2000      	movs	r0, #0
 800b944:	bd08      	pop	{r3, pc}

0800b946 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b946:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800b94a:	b11b      	cbz	r3, 800b954 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800b94c:	2000      	movs	r0, #0
 800b94e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800b952:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800b954:	2002      	movs	r0, #2
  }
}
 800b956:	4770      	bx	lr

0800b958 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b958:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800b95c:	b510      	push	{r4, lr}
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b95e:	b16b      	cbz	r3, 800b97c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b960:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b964:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b968:	28ff      	cmp	r0, #255	; 0xff
 800b96a:	d007      	beq.n	800b97c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b972:	4621      	mov	r1, r4
 800b974:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800b976:	23ff      	movs	r3, #255	; 0xff
 800b978:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800b97c:	2000      	movs	r0, #0
 800b97e:	bd10      	pop	{r4, pc}

0800b980 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b980:	2343      	movs	r3, #67	; 0x43
 800b982:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800b984:	4800      	ldr	r0, [pc, #0]	; (800b988 <USBD_CDC_GetFSCfgDesc+0x8>)
 800b986:	4770      	bx	lr
 800b988:	20000a08 	.word	0x20000a08

0800b98c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b98c:	2343      	movs	r3, #67	; 0x43
 800b98e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800b990:	4800      	ldr	r0, [pc, #0]	; (800b994 <USBD_CDC_GetHSCfgDesc+0x8>)
 800b992:	4770      	bx	lr
 800b994:	20000a4c 	.word	0x20000a4c

0800b998 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b998:	2343      	movs	r3, #67	; 0x43
 800b99a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b99c:	4800      	ldr	r0, [pc, #0]	; (800b9a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800b99e:	4770      	bx	lr
 800b9a0:	20000a9c 	.word	0x20000a9c

0800b9a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b9a4:	230a      	movs	r3, #10
 800b9a6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800b9a8:	4800      	ldr	r0, [pc, #0]	; (800b9ac <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800b9aa:	4770      	bx	lr
 800b9ac:	20000a90 	.word	0x20000a90

0800b9b0 <USBD_CDC_DataOut>:
{      
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b9b4:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b9b8:	f000 f9e4 	bl	800bd84 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800b9bc:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b9c0:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800b9c4:	b14b      	cbz	r3, 800b9da <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b9c6:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800b9ca:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800b9d4:	4798      	blx	r3
    return USBD_OK;
 800b9d6:	2000      	movs	r0, #0
}
 800b9d8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b9da:	2002      	movs	r0, #2
 800b9dc:	e7fc      	b.n	800b9d8 <USBD_CDC_DataOut+0x28>

0800b9de <USBD_CDC_Setup>:
{
 800b9de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9e0:	780e      	ldrb	r6, [r1, #0]
 800b9e2:	f006 0360 	and.w	r3, r6, #96	; 0x60
 800b9e6:	2b20      	cmp	r3, #32
{
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9ec:	d111      	bne.n	800ba12 <USBD_CDC_Setup+0x34>
    if (req->wLength)
 800b9ee:	88ca      	ldrh	r2, [r1, #6]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b9f0:	784b      	ldrb	r3, [r1, #1]
    if (req->wLength)
 800b9f2:	b1c2      	cbz	r2, 800ba26 <USBD_CDC_Setup+0x48>
      if (req->bmRequest & 0x80)
 800b9f4:	0636      	lsls	r6, r6, #24
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b9f6:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800b9fa:	d50d      	bpl.n	800ba18 <USBD_CDC_Setup+0x3a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b9fc:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800ba00:	9101      	str	r1, [sp, #4]
 800ba02:	6886      	ldr	r6, [r0, #8]
 800ba04:	4618      	mov	r0, r3
 800ba06:	47b0      	blx	r6
          USBD_CtlSendData (pdev, 
 800ba08:	88ea      	ldrh	r2, [r5, #6]
 800ba0a:	9901      	ldr	r1, [sp, #4]
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f7ff ff5a 	bl	800b8c6 <USBD_CtlSendData>
}
 800ba12:	2000      	movs	r0, #0
 800ba14:	b002      	add	sp, #8
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
        hcdc->CmdOpCode = req->bRequest;
 800ba18:	f881 3200 	strb.w	r3, [r1, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800ba1c:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800ba20:	f7ff ff66 	bl	800b8f0 <USBD_CtlPrepareRx>
 800ba24:	e7f5      	b.n	800ba12 <USBD_CDC_Setup+0x34>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba26:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	688c      	ldr	r4, [r1, #8]
 800ba2e:	4611      	mov	r1, r2
 800ba30:	47a0      	blx	r4
 800ba32:	e7ee      	b.n	800ba12 <USBD_CDC_Setup+0x34>

0800ba34 <USBD_CDC_DeInit>:
{
 800ba34:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800ba36:	2181      	movs	r1, #129	; 0x81
{
 800ba38:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800ba3a:	f000 f966 	bl	800bd0a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800ba3e:	2101      	movs	r1, #1
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 f962 	bl	800bd0a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800ba46:	2182      	movs	r1, #130	; 0x82
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 f95e 	bl	800bd0a <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800ba4e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800ba52:	b153      	cbz	r3, 800ba6a <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ba54:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ba5c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800ba60:	f000 f99a 	bl	800bd98 <USBD_static_free>
    pdev->pClassData = NULL;
 800ba64:	2300      	movs	r3, #0
 800ba66:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	bd10      	pop	{r4, pc}

0800ba6e <USBD_CDC_Init>:
{
 800ba6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800ba70:	7c03      	ldrb	r3, [r0, #16]
{
 800ba72:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800ba74:	bb7b      	cbnz	r3, 800bad6 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800ba76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	2181      	movs	r1, #129	; 0x81
 800ba7e:	f000 f93a 	bl	800bcf6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800ba82:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800ba86:	2202      	movs	r2, #2
 800ba88:	2101      	movs	r1, #1
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f000 f933 	bl	800bcf6 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800ba90:	2308      	movs	r3, #8
 800ba92:	2203      	movs	r2, #3
 800ba94:	2182      	movs	r1, #130	; 0x82
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 f92d 	bl	800bcf6 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800ba9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800baa0:	f000 f976 	bl	800bd90 <USBD_static_malloc>
 800baa4:	4605      	mov	r5, r0
 800baa6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800baaa:	b320      	cbz	r0, 800baf6 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800baac:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    hcdc->TxState =0;
 800bab0:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4798      	blx	r3
    hcdc->TxState =0;
 800bab6:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
    hcdc->RxState =0;
 800baba:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800babe:	7c26      	ldrb	r6, [r4, #16]
 800bac0:	b986      	cbnz	r6, 800bae4 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800bac2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800bac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baca:	2101      	movs	r1, #1
 800bacc:	4620      	mov	r0, r4
 800bace:	f000 f952 	bl	800bd76 <USBD_LL_PrepareReceive>
}
 800bad2:	4630      	mov	r0, r6
 800bad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800bad6:	2340      	movs	r3, #64	; 0x40
 800bad8:	2202      	movs	r2, #2
 800bada:	2181      	movs	r1, #129	; 0x81
 800badc:	f000 f90b 	bl	800bcf6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800bae0:	2340      	movs	r3, #64	; 0x40
 800bae2:	e7d0      	b.n	800ba86 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 800bae4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800bae8:	2340      	movs	r3, #64	; 0x40
 800baea:	2101      	movs	r1, #1
 800baec:	4620      	mov	r0, r4
 800baee:	f000 f942 	bl	800bd76 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800baf2:	463e      	mov	r6, r7
 800baf4:	e7ed      	b.n	800bad2 <USBD_CDC_Init+0x64>
    ret = 1; 
 800baf6:	2601      	movs	r6, #1
 800baf8:	e7eb      	b.n	800bad2 <USBD_CDC_Init+0x64>

0800bafa <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800bafa:	b119      	cbz	r1, 800bb04 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800bafc:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800bb00:	2000      	movs	r0, #0
 800bb02:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800bb04:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800bb06:	4770      	bx	lr

0800bb08 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bb08:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800bb0c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800bb0e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800bb12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800bb16:	4770      	bx	lr

0800bb18 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800bb18:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800bb1c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800bb1e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800bb22:	4770      	bx	lr

0800bb24 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800bb24:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bb26:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800bb2a:	b175      	cbz	r5, 800bb4a <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800bb2c:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800bb30:	b96c      	cbnz	r4, 800bb4e <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800bb32:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 800bb36:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800bb3a:	2181      	movs	r1, #129	; 0x81
 800bb3c:	f000 f914 	bl	800bd68 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800bb40:	2301      	movs	r3, #1
 800bb42:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 800bb46:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800bb48:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800bb4a:	2002      	movs	r0, #2
 800bb4c:	e7fc      	b.n	800bb48 <USBD_CDC_TransmitPacket+0x24>
      return USBD_BUSY;
 800bb4e:	2001      	movs	r0, #1
 800bb50:	e7fa      	b.n	800bb48 <USBD_CDC_TransmitPacket+0x24>

0800bb52 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bb52:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800bb56:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800bb58:	b182      	cbz	r2, 800bb7c <USBD_CDC_ReceivePacket+0x2a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800bb5a:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb5c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800bb60:	b934      	cbnz	r4, 800bb70 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800bb62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb66:	2101      	movs	r1, #1
 800bb68:	f000 f905 	bl	800bd76 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800bb70:	2340      	movs	r3, #64	; 0x40
 800bb72:	2101      	movs	r1, #1
 800bb74:	f000 f8ff 	bl	800bd76 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800bb78:	2400      	movs	r4, #0
 800bb7a:	e7f7      	b.n	800bb6c <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800bb7c:	2402      	movs	r4, #2
 800bb7e:	e7f5      	b.n	800bb6c <USBD_CDC_ReceivePacket+0x1a>

0800bb80 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800bb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 800bb84:	4c23      	ldr	r4, [pc, #140]	; (800bc14 <HAL_PCD_MspInit+0x94>)
 800bb86:	6963      	ldr	r3, [r4, #20]
 800bb88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb8c:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800bb8e:	6963      	ldr	r3, [r4, #20]
{
 800bb90:	b086      	sub	sp, #24
  __GPIOB_CLK_ENABLE();
 800bb92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb96:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bb98:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
 800bb9c:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bb9e:	2500      	movs	r5, #0
 800bba0:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800bba4:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bba6:	a901      	add	r1, sp, #4
 800bba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bbac:	e9cd 6301 	strd	r6, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bbb0:	e9cd 5803 	strd	r5, r8, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800bbb4:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bbb6:	f7fd fe69 	bl	800988c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bbc2:	f7fd ff2d 	bl	8009a20 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	f7fd fdec 	bl	80097a4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 800bbcc:	2201      	movs	r2, #1
 800bbce:	4631      	mov	r1, r6
 800bbd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bbd4:	f7fd ff24 	bl	8009a20 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbd8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bbda:	a901      	add	r1, sp, #4
 800bbdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbe0:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800bbe4:	e9cd 8704 	strd	r8, r7, [sp, #16]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800bbe8:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bbea:	f7fd fe4f 	bl	800988c <HAL_GPIO_Init>
  __USB_CLK_ENABLE();
 800bbee:	69e3      	ldr	r3, [r4, #28]
 800bbf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbf4:	61e3      	str	r3, [r4, #28]
  __SYSCFG_CLK_ENABLE();
 800bbf6:	69a3      	ldr	r3, [r4, #24]
 800bbf8:	f043 0301 	orr.w	r3, r3, #1
 800bbfc:	61a3      	str	r3, [r4, #24]
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800bbfe:	462a      	mov	r2, r5
 800bc00:	2105      	movs	r1, #5
 800bc02:	2014      	movs	r0, #20
 800bc04:	f7fd fdee 	bl	80097e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 800bc08:	2014      	movs	r0, #20
 800bc0a:	f7fd fe1f 	bl	800984c <HAL_NVIC_EnableIRQ>
}
 800bc0e:	b006      	add	sp, #24
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	40021000 	.word	0x40021000

0800bc18 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc18:	f500 71a2 	add.w	r1, r0, #324	; 0x144
 800bc1c:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bc20:	f7ff bbdb 	b.w	800b3da <USBD_LL_SetupStage>

0800bc24 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc24:	231c      	movs	r3, #28
 800bc26:	fb03 0301 	mla	r3, r3, r1, r0
 800bc2a:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bc2e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800bc32:	f7ff bbff 	b.w	800b434 <USBD_LL_DataOutStage>

0800bc36 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc36:	231c      	movs	r3, #28
 800bc38:	fb03 0301 	mla	r3, r3, r1, r0
 800bc3c:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bc40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc42:	f7ff bc27 	b.w	800b494 <USBD_LL_DataInStage>

0800bc46 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF(hpcd->pData);
 800bc46:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bc4a:	f7ff bc8b 	b.w	800b564 <USBD_LL_SOF>

0800bc4e <HAL_PCD_ResetCallback>:
{   
 800bc4e:	b510      	push	{r4, lr}
 800bc50:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800bc52:	2101      	movs	r1, #1
 800bc54:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bc58:	f7ff fc81 	bl	800b55e <USBD_LL_SetSpeed>
  USBD_LL_Reset(hpcd->pData);
 800bc5c:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 800bc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset(hpcd->pData);
 800bc64:	f7ff bc5c 	b.w	800b520 <USBD_LL_Reset>

0800bc68 <HAL_PCD_SuspendCallback>:
}
 800bc68:	4770      	bx	lr

0800bc6a <HAL_PCD_ResumeCallback>:
 800bc6a:	4770      	bx	lr

0800bc6c <USBD_LL_Init>:
{    
 800bc6c:	b538      	push	{r3, r4, r5, lr}
  hpcd.Init.dev_endpoints = 8;
 800bc6e:	4a1c      	ldr	r2, [pc, #112]	; (800bce0 <USBD_LL_Init+0x74>)
{    
 800bc70:	4604      	mov	r4, r0
  hpcd.Instance = USB;
 800bc72:	481c      	ldr	r0, [pc, #112]	; (800bce4 <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd;
 800bc74:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd.Init.dev_endpoints = 8;
 800bc78:	2308      	movs	r3, #8
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc7a:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 8;
 800bc7c:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc80:	2302      	movs	r3, #2
 800bc82:	e9c0 5303 	strd	r5, r3, [r0, #12]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800bc86:	6083      	str	r3, [r0, #8]
  hpcd.pData = pdev;
 800bc88:	f8c0 4174 	str.w	r4, [r0, #372]	; 0x174
  HAL_PCD_Init(pdev->pData);
 800bc8c:	f7fd fede 	bl	8009a4c <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800bc90:	462a      	mov	r2, r5
 800bc92:	4629      	mov	r1, r5
 800bc94:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800bc98:	2340      	movs	r3, #64	; 0x40
 800bc9a:	f7fe fd75 	bl	800a788 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800bc9e:	2380      	movs	r3, #128	; 0x80
 800bca0:	462a      	mov	r2, r5
 800bca2:	4619      	mov	r1, r3
 800bca4:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800bca8:	f7fe fd6e 	bl	800a788 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 800bcac:	462a      	mov	r2, r5
 800bcae:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800bcb2:	23c0      	movs	r3, #192	; 0xc0
 800bcb4:	2181      	movs	r1, #129	; 0x81
 800bcb6:	f7fe fd67 	bl	800a788 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800bcba:	462a      	mov	r2, r5
 800bcbc:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800bcc0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	f7fe fd5f 	bl	800a788 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 800bcca:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800bcce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	2182      	movs	r1, #130	; 0x82
 800bcd6:	f7fe fd57 	bl	800a788 <HAL_PCDEx_PMAConfig>
}
 800bcda:	4628      	mov	r0, r5
 800bcdc:	bd38      	pop	{r3, r4, r5, pc}
 800bcde:	bf00      	nop
 800bce0:	40005c00 	.word	0x40005c00
 800bce4:	200010ac 	.word	0x200010ac

0800bce8 <USBD_LL_Start>:
{
 800bce8:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800bcea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bcee:	f7fd fef6 	bl	8009ade <HAL_PCD_Start>
}
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	bd08      	pop	{r3, pc}

0800bcf6 <USBD_LL_OpenEP>:
{
 800bcf6:	b510      	push	{r4, lr}
 800bcf8:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 800bcfa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
{
 800bcfe:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 800bd00:	4623      	mov	r3, r4
 800bd02:	f7fd ff09 	bl	8009b18 <HAL_PCD_EP_Open>
}
 800bd06:	2000      	movs	r0, #0
 800bd08:	bd10      	pop	{r4, pc}

0800bd0a <USBD_LL_CloseEP>:
{
 800bd0a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd0c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd10:	f7fe f874 	bl	8009dfc <HAL_PCD_EP_Close>
}
 800bd14:	2000      	movs	r0, #0
 800bd16:	bd08      	pop	{r3, pc}

0800bd18 <USBD_LL_StallEP>:
{
 800bd18:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd1a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd1e:	f7fe fc85 	bl	800a62c <HAL_PCD_EP_SetStall>
}
 800bd22:	2000      	movs	r0, #0
 800bd24:	bd08      	pop	{r3, pc}

0800bd26 <USBD_LL_ClearStallEP>:
{
 800bd26:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd28:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd2c:	f7fe fcce 	bl	800a6cc <HAL_PCD_EP_ClrStall>
}
 800bd30:	2000      	movs	r0, #0
 800bd32:	bd08      	pop	{r3, pc}

0800bd34 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800bd34:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bd38:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 800bd3c:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd40:	bf1b      	ittet	ne
 800bd42:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800bd46:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd4a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd4e:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd52:	bf08      	it	eq
 800bd54:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
}
 800bd58:	4770      	bx	lr

0800bd5a <USBD_LL_SetUSBAddress>:
{
 800bd5a:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd5c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd60:	f7fd fec3 	bl	8009aea <HAL_PCD_SetAddress>
}
 800bd64:	2000      	movs	r0, #0
 800bd66:	bd08      	pop	{r3, pc}

0800bd68 <USBD_LL_Transmit>:
{
 800bd68:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd6a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd6e:	f7fe f98d 	bl	800a08c <HAL_PCD_EP_Transmit>
}
 800bd72:	2000      	movs	r0, #0
 800bd74:	bd08      	pop	{r3, pc}

0800bd76 <USBD_LL_PrepareReceive>:
{
 800bd76:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd78:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd7c:	f7fe f91a 	bl	8009fb4 <HAL_PCD_EP_Receive>
}
 800bd80:	2000      	movs	r0, #0
 800bd82:	bd08      	pop	{r3, pc}

0800bd84 <USBD_LL_GetRxDataSize>:
{
 800bd84:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800bd86:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd8a:	f7fe f977 	bl	800a07c <HAL_PCD_EP_GetRxCount>
}
 800bd8e:	bd08      	pop	{r3, pc}

0800bd90 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 800bd90:	4800      	ldr	r0, [pc, #0]	; (800bd94 <USBD_static_malloc+0x4>)
 800bd92:	4770      	bx	lr
 800bd94:	20001224 	.word	0x20001224

0800bd98 <USBD_static_free>:
 800bd98:	4770      	bx	lr
	...

0800bd9c <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 800bd9c:	2312      	movs	r3, #18
  return (uint8_t*)hUSBDDeviceDesc;
}
 800bd9e:	4801      	ldr	r0, [pc, #4]	; (800bda4 <USBD_VCP_DeviceDescriptor+0x8>)
  *length = sizeof(hUSBDDeviceDesc);
 800bda0:	800b      	strh	r3, [r1, #0]
}
 800bda2:	4770      	bx	lr
 800bda4:	0801caa9 	.word	0x0801caa9

0800bda8 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800bda8:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 800bdaa:	4801      	ldr	r0, [pc, #4]	; (800bdb0 <USBD_VCP_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 800bdac:	800b      	strh	r3, [r1, #0]
}
 800bdae:	4770      	bx	lr
 800bdb0:	0801caa5 	.word	0x0801caa5

0800bdb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800bdb8:	1c4d      	adds	r5, r1, #1
 800bdba:	461e      	mov	r6, r3
      pbuf[ 2* idx] = (value >> 28) + '0';
 800bdbc:	0f04      	lsrs	r4, r0, #28
    if( ((value >> 28)) < 0xA )
 800bdbe:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[ 2* idx] = (value >> 28) + '0';
 800bdc2:	bf34      	ite	cc
 800bdc4:	3430      	addcc	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800bdc6:	3437      	addcs	r4, #55	; 0x37
 800bdc8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800bdcc:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for( idx = 0 ; idx < len ; idx ++)
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	b2dc      	uxtb	r4, r3
 800bdd4:	42a2      	cmp	r2, r4
    value = value << 4;
 800bdd6:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for( idx = 0 ; idx < len ; idx ++)
 800bdda:	d8ef      	bhi.n	800bdbc <IntToUnicode+0x8>
  }
}
 800bddc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bde0 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800bde0:	231a      	movs	r3, #26
{
 800bde2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800bde4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800bde6:	4b0a      	ldr	r3, [pc, #40]	; (800be10 <USBD_VCP_SerialStrDescriptor+0x30>)
 800bde8:	f8d3 07ac 	ldr.w	r0, [r3, #1964]	; 0x7ac
  deviceserial0 += deviceserial2;
 800bdec:	f8d3 27b4 	ldr.w	r2, [r3, #1972]	; 0x7b4
  if (deviceserial0 != 0)
 800bdf0:	1880      	adds	r0, r0, r2
 800bdf2:	d00a      	beq.n	800be0a <USBD_VCP_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800bdf4:	f8d3 47b0 	ldr.w	r4, [r3, #1968]	; 0x7b0
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800bdf8:	4906      	ldr	r1, [pc, #24]	; (800be14 <USBD_VCP_SerialStrDescriptor+0x34>)
 800bdfa:	2208      	movs	r2, #8
 800bdfc:	f7ff ffda 	bl	800bdb4 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800be00:	2204      	movs	r2, #4
 800be02:	3110      	adds	r1, #16
 800be04:	4620      	mov	r0, r4
 800be06:	f7ff ffd5 	bl	800bdb4 <IntToUnicode>
}
 800be0a:	4803      	ldr	r0, [pc, #12]	; (800be18 <USBD_VCP_SerialStrDescriptor+0x38>)
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	bf00      	nop
 800be10:	1ffff000 	.word	0x1ffff000
 800be14:	20000ae1 	.word	0x20000ae1
 800be18:	20000adf 	.word	0x20000adf

0800be1c <USBD_VCP_ProductStrDescriptor>:
{
 800be1c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800be1e:	4c04      	ldr	r4, [pc, #16]	; (800be30 <USBD_VCP_ProductStrDescriptor+0x14>)
 800be20:	4804      	ldr	r0, [pc, #16]	; (800be34 <USBD_VCP_ProductStrDescriptor+0x18>)
{
 800be22:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800be24:	4621      	mov	r1, r4
 800be26:	f7ff fd32 	bl	800b88e <USBD_GetString>
}
 800be2a:	4620      	mov	r0, r4
 800be2c:	bd10      	pop	{r4, pc}
 800be2e:	bf00      	nop
 800be30:	20001454 	.word	0x20001454
 800be34:	0801ca58 	.word	0x0801ca58

0800be38 <USBD_VCP_ManufacturerStrDescriptor>:
{
 800be38:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be3a:	4c04      	ldr	r4, [pc, #16]	; (800be4c <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 800be3c:	4804      	ldr	r0, [pc, #16]	; (800be50 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
{
 800be3e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be40:	4621      	mov	r1, r4
 800be42:	f7ff fd24 	bl	800b88e <USBD_GetString>
}
 800be46:	4620      	mov	r0, r4
 800be48:	bd10      	pop	{r4, pc}
 800be4a:	bf00      	nop
 800be4c:	20001454 	.word	0x20001454
 800be50:	0801ca79 	.word	0x0801ca79

0800be54 <USBD_VCP_ConfigStrDescriptor>:
{
 800be54:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800be56:	4c04      	ldr	r4, [pc, #16]	; (800be68 <USBD_VCP_ConfigStrDescriptor+0x14>)
 800be58:	4804      	ldr	r0, [pc, #16]	; (800be6c <USBD_VCP_ConfigStrDescriptor+0x18>)
{
 800be5a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800be5c:	4621      	mov	r1, r4
 800be5e:	f7ff fd16 	bl	800b88e <USBD_GetString>
}
 800be62:	4620      	mov	r0, r4
 800be64:	bd10      	pop	{r4, pc}
 800be66:	bf00      	nop
 800be68:	20001454 	.word	0x20001454
 800be6c:	0801ca8c 	.word	0x0801ca8c

0800be70 <USBD_VCP_InterfaceStrDescriptor>:
{
 800be70:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800be72:	4c04      	ldr	r4, [pc, #16]	; (800be84 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800be74:	4804      	ldr	r0, [pc, #16]	; (800be88 <USBD_VCP_InterfaceStrDescriptor+0x18>)
{
 800be76:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800be78:	4621      	mov	r1, r4
 800be7a:	f7ff fd08 	bl	800b88e <USBD_GetString>
}
 800be7e:	4620      	mov	r0, r4
 800be80:	bd10      	pop	{r4, pc}
 800be82:	bf00      	nop
 800be84:	20001454 	.word	0x20001454
 800be88:	0801ca97 	.word	0x0801ca97

0800be8c <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 800be8c:	2000      	movs	r0, #0
 800be8e:	4770      	bx	lr

0800be90 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 800be90:	2820      	cmp	r0, #32
 800be92:	d003      	beq.n	800be9c <CDC_Itf_Control+0xc>
 800be94:	2821      	cmp	r0, #33	; 0x21
 800be96:	d00b      	beq.n	800beb0 <CDC_Itf_Control+0x20>
  default:
    break;
  }
  
  return (USBD_OK);
}
 800be98:	2000      	movs	r0, #0
 800be9a:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800be9c:	4b0d      	ldr	r3, [pc, #52]	; (800bed4 <CDC_Itf_Control+0x44>)
 800be9e:	680a      	ldr	r2, [r1, #0]
 800bea0:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 800bea2:	790a      	ldrb	r2, [r1, #4]
 800bea4:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 800bea6:	794a      	ldrb	r2, [r1, #5]
 800bea8:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 800beaa:	798a      	ldrb	r2, [r1, #6]
 800beac:	719a      	strb	r2, [r3, #6]
    break;
 800beae:	e7f3      	b.n	800be98 <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800beb0:	4b08      	ldr	r3, [pc, #32]	; (800bed4 <CDC_Itf_Control+0x44>)
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	0a12      	lsrs	r2, r2, #8
 800beba:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800bebc:	885a      	ldrh	r2, [r3, #2]
 800bebe:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800bec0:	78da      	ldrb	r2, [r3, #3]
 800bec2:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800bec4:	791a      	ldrb	r2, [r3, #4]
 800bec6:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800bec8:	795a      	ldrb	r2, [r3, #5]
 800beca:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800becc:	799b      	ldrb	r3, [r3, #6]
 800bece:	718b      	strb	r3, [r1, #6]
    break;
 800bed0:	e7e2      	b.n	800be98 <CDC_Itf_Control+0x8>
 800bed2:	bf00      	nop
 800bed4:	20000b18 	.word	0x20000b18

0800bed8 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 800bed8:	b508      	push	{r3, lr}
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800beda:	680a      	ldr	r2, [r1, #0]
 800bedc:	4601      	mov	r1, r0
 800bede:	2000      	movs	r0, #0
 800bee0:	f7fc fc8e 	bl	8008800 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 800bee4:	4802      	ldr	r0, [pc, #8]	; (800bef0 <CDC_Itf_Receive+0x18>)
 800bee6:	f7ff fe34 	bl	800bb52 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800beea:	2000      	movs	r0, #0
 800beec:	bd08      	pop	{r3, pc}
 800beee:	bf00      	nop
 800bef0:	20000e6c 	.word	0x20000e6c

0800bef4 <CDC_Itf_Init>:
{
 800bef4:	b508      	push	{r3, lr}
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 800bef6:	4903      	ldr	r1, [pc, #12]	; (800bf04 <CDC_Itf_Init+0x10>)
 800bef8:	4803      	ldr	r0, [pc, #12]	; (800bf08 <CDC_Itf_Init+0x14>)
 800befa:	f7ff fe0d 	bl	800bb18 <USBD_CDC_SetRxBuffer>
}
 800befe:	2000      	movs	r0, #0
 800bf00:	bd08      	pop	{r3, pc}
 800bf02:	bf00      	nop
 800bf04:	20001554 	.word	0x20001554
 800bf08:	20000e6c 	.word	0x20000e6c

0800bf0c <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 800bf0c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800bf0e:	4c1e      	ldr	r4, [pc, #120]	; (800bf88 <SPIx_Init+0x7c>)
{
 800bf10:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800bf12:	4620      	mov	r0, r4
 800bf14:	f7ff f979 	bl	800b20a <HAL_SPI_GetState>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d133      	bne.n	800bf84 <SPIx_Init+0x78>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800bf1c:	4b1b      	ldr	r3, [pc, #108]	; (800bf8c <SPIx_Init+0x80>)
 800bf1e:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800bf20:	2318      	movs	r3, #24
 800bf22:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800bf24:	2307      	movs	r3, #7
 800bf26:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800bf28:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800bf2c:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800bf2e:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bf32:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800bf36:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800bf38:	f44f 7382 	mov.w	r3, #260	; 0x104
 800bf3c:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800bf3e:	4b14      	ldr	r3, [pc, #80]	; (800bf90 <SPIx_Init+0x84>)
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800bf40:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800bf42:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bf44:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800bf46:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800bf48:	699a      	ldr	r2, [r3, #24]
 800bf4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf4e:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800bf50:	695a      	ldr	r2, [r3, #20]
 800bf52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bf56:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800bf58:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	e9cd c301 	strd	ip, r3, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800bf62:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800bf64:	f04f 0e03 	mov.w	lr, #3
 800bf68:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800bf6a:	a901      	add	r1, sp, #4
 800bf6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800bf70:	e9cd e304 	strd	lr, r3, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800bf74:	f7fd fc8a 	bl	800988c <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800bf78:	4620      	mov	r0, r4
}
 800bf7a:	b006      	add	sp, #24
 800bf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 800bf80:	f7fe bfa3 	b.w	800aeca <HAL_SPI_Init>
}
 800bf84:	b006      	add	sp, #24
 800bf86:	bd10      	pop	{r4, pc}
 800bf88:	20001d8c 	.word	0x20001d8c
 800bf8c:	40013000 	.word	0x40013000
 800bf90:	40021000 	.word	0x40021000

0800bf94 <SPIx_WriteRead>:
{
 800bf94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800bf9c:	4b0b      	ldr	r3, [pc, #44]	; (800bfcc <SPIx_WriteRead+0x38>)
{
 800bf9e:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	480a      	ldr	r0, [pc, #40]	; (800bfd0 <SPIx_WriteRead+0x3c>)
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	f10d 0217 	add.w	r2, sp, #23
 800bfae:	f10d 010f 	add.w	r1, sp, #15
 800bfb2:	f7fe fff2 	bl	800af9a <HAL_SPI_TransmitReceive>
 800bfb6:	b120      	cbz	r0, 800bfc2 <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 800bfb8:	4805      	ldr	r0, [pc, #20]	; (800bfd0 <SPIx_WriteRead+0x3c>)
 800bfba:	f7fe ffd9 	bl	800af70 <HAL_SPI_DeInit>
  SPIx_Init();
 800bfbe:	f7ff ffa5 	bl	800bf0c <SPIx_Init>
}
 800bfc2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800bfc6:	b007      	add	sp, #28
 800bfc8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfcc:	20000b58 	.word	0x20000b58
 800bfd0:	20001d8c 	.word	0x20001d8c

0800bfd4 <I2Cx_Init>:
{
 800bfd4:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800bfd6:	4c18      	ldr	r4, [pc, #96]	; (800c038 <I2Cx_Init+0x64>)
{
 800bfd8:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f7fe fec0 	bl	800ad60 <HAL_I2C_GetState>
 800bfe0:	bb38      	cbnz	r0, 800c032 <I2Cx_Init+0x5e>
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800bfe2:	4b16      	ldr	r3, [pc, #88]	; (800c03c <I2Cx_Init+0x68>)
 800bfe4:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bfe6:	2132      	movs	r1, #50	; 0x32
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e9c4 1302 	strd	r1, r3, [r4, #8]
    I2cHandle.Init.OwnAddress2 = 0;
 800bfee:	e9c4 0004 	strd	r0, r0, [r4, #16]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800bff2:	e9c4 0007 	strd	r0, r0, [r4, #28]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800bff6:	4d12      	ldr	r5, [pc, #72]	; (800c040 <I2Cx_Init+0x6c>)
 800bff8:	696b      	ldr	r3, [r5, #20]
 800bffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bffe:	616b      	str	r3, [r5, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800c000:	20c0      	movs	r0, #192	; 0xc0
 800c002:	2302      	movs	r3, #2
 800c004:	e9cd 0301 	strd	r0, r3, [sp, #4]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800c008:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800c00a:	2304      	movs	r3, #4
 800c00c:	f04f 0c03 	mov.w	ip, #3
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800c010:	eb0d 0103 	add.w	r1, sp, r3
 800c014:	480b      	ldr	r0, [pc, #44]	; (800c044 <I2Cx_Init+0x70>)
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800c016:	e9cd c304 	strd	ip, r3, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800c01a:	f7fd fc37 	bl	800988c <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800c01e:	69eb      	ldr	r3, [r5, #28]
    HAL_I2C_Init(&I2cHandle);
 800c020:	4620      	mov	r0, r4
  DISCOVERY_I2Cx_CLK_ENABLE();
 800c022:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c026:	61eb      	str	r3, [r5, #28]
}
 800c028:	b007      	add	sp, #28
 800c02a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_I2C_Init(&I2cHandle);
 800c02e:	f7fe bd2e 	b.w	800aa8e <HAL_I2C_Init>
}
 800c032:	b007      	add	sp, #28
 800c034:	bd30      	pop	{r4, r5, pc}
 800c036:	bf00      	nop
 800c038:	20001d54 	.word	0x20001d54
 800c03c:	40005400 	.word	0x40005400
 800c040:	40021000 	.word	0x40021000
 800c044:	48000400 	.word	0x48000400

0800c048 <BSP_LED_Init>:
{
 800c048:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800c04a:	4604      	mov	r4, r0
{
 800c04c:	b086      	sub	sp, #24
  LEDx_GPIO_CLK_ENABLE(Led);
 800c04e:	b928      	cbnz	r0, 800c05c <BSP_LED_Init+0x14>
 800c050:	4a15      	ldr	r2, [pc, #84]	; (800c0a8 <BSP_LED_Init+0x60>)
 800c052:	6953      	ldr	r3, [r2, #20]
 800c054:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c058:	6153      	str	r3, [r2, #20]
 800c05a:	e00d      	b.n	800c078 <BSP_LED_Init+0x30>
 800c05c:	2801      	cmp	r0, #1
 800c05e:	d0f7      	beq.n	800c050 <BSP_LED_Init+0x8>
 800c060:	2802      	cmp	r0, #2
 800c062:	d0f5      	beq.n	800c050 <BSP_LED_Init+0x8>
 800c064:	2803      	cmp	r0, #3
 800c066:	d0f3      	beq.n	800c050 <BSP_LED_Init+0x8>
 800c068:	2804      	cmp	r0, #4
 800c06a:	d0f1      	beq.n	800c050 <BSP_LED_Init+0x8>
 800c06c:	2805      	cmp	r0, #5
 800c06e:	d0ef      	beq.n	800c050 <BSP_LED_Init+0x8>
 800c070:	2806      	cmp	r0, #6
 800c072:	d0ed      	beq.n	800c050 <BSP_LED_Init+0x8>
 800c074:	2807      	cmp	r0, #7
 800c076:	d0eb      	beq.n	800c050 <BSP_LED_Init+0x8>
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800c078:	4b0c      	ldr	r3, [pc, #48]	; (800c0ac <BSP_LED_Init+0x64>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c07a:	4d0d      	ldr	r5, [pc, #52]	; (800c0b0 <BSP_LED_Init+0x68>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800c07c:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c080:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800c084:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c086:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c088:	e9cd 3302 	strd	r3, r3, [sp, #8]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c08c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c08e:	2303      	movs	r3, #3
 800c090:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c092:	f7fd fbfb 	bl	800988c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800c096:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c09a:	2200      	movs	r2, #0
 800c09c:	4631      	mov	r1, r6
 800c09e:	f7fd fcbf 	bl	8009a20 <HAL_GPIO_WritePin>
}
 800c0a2:	b006      	add	sp, #24
 800c0a4:	bd70      	pop	{r4, r5, r6, pc}
 800c0a6:	bf00      	nop
 800c0a8:	40021000 	.word	0x40021000
 800c0ac:	0801cabc 	.word	0x0801cabc
 800c0b0:	20000b38 	.word	0x20000b38

0800c0b4 <BSP_LED_On>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800c0b4:	4b04      	ldr	r3, [pc, #16]	; (800c0c8 <BSP_LED_On+0x14>)
 800c0b6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800c0ba:	4b04      	ldr	r3, [pc, #16]	; (800c0cc <BSP_LED_On+0x18>)
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c0c2:	f7fd bcad 	b.w	8009a20 <HAL_GPIO_WritePin>
 800c0c6:	bf00      	nop
 800c0c8:	0801cabc 	.word	0x0801cabc
 800c0cc:	20000b38 	.word	0x20000b38

0800c0d0 <BSP_LED_Off>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800c0d0:	4b04      	ldr	r3, [pc, #16]	; (800c0e4 <BSP_LED_Off+0x14>)
 800c0d2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800c0d6:	4b04      	ldr	r3, [pc, #16]	; (800c0e8 <BSP_LED_Off+0x18>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c0de:	f7fd bc9f 	b.w	8009a20 <HAL_GPIO_WritePin>
 800c0e2:	bf00      	nop
 800c0e4:	0801cabc 	.word	0x0801cabc
 800c0e8:	20000b38 	.word	0x20000b38

0800c0ec <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800c0ec:	4b03      	ldr	r3, [pc, #12]	; (800c0fc <BSP_LED_Toggle+0x10>)
 800c0ee:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800c0f2:	4b03      	ldr	r3, [pc, #12]	; (800c100 <BSP_LED_Toggle+0x14>)
 800c0f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c0f8:	f7fd bc97 	b.w	8009a2a <HAL_GPIO_TogglePin>
 800c0fc:	0801cabc 	.word	0x0801cabc
 800c100:	20000b38 	.word	0x20000b38

0800c104 <BSP_PB_Init>:
{
 800c104:	b510      	push	{r4, lr}
 800c106:	4b19      	ldr	r3, [pc, #100]	; (800c16c <BSP_PB_Init+0x68>)
 800c108:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800c10a:	b918      	cbnz	r0, 800c114 <BSP_PB_Init+0x10>
 800c10c:	695a      	ldr	r2, [r3, #20]
 800c10e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c112:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 800c114:	699a      	ldr	r2, [r3, #24]
 800c116:	f042 0201 	orr.w	r2, r2, #1
 800c11a:	619a      	str	r2, [r3, #24]
  if (ButtonMode == BUTTON_MODE_GPIO)
 800c11c:	b971      	cbnz	r1, 800c13c <BSP_PB_Init+0x38>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800c11e:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c120:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c124:	2202      	movs	r2, #2
 800c126:	2303      	movs	r3, #3
 800c128:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c12c:	4b10      	ldr	r3, [pc, #64]	; (800c170 <BSP_PB_Init+0x6c>)
 800c12e:	a901      	add	r1, sp, #4
 800c130:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c134:	f7fd fbaa 	bl	800988c <HAL_GPIO_Init>
}
 800c138:	b006      	add	sp, #24
 800c13a:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 800c13c:	2901      	cmp	r1, #1
 800c13e:	d1fb      	bne.n	800c138 <BSP_PB_Init+0x34>
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c140:	2400      	movs	r4, #0
 800c142:	2303      	movs	r3, #3
 800c144:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800c148:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <BSP_PB_Init+0x70>)
 800c14a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c14c:	4b08      	ldr	r3, [pc, #32]	; (800c170 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800c14e:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c150:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c154:	a901      	add	r1, sp, #4
 800c156:	f7fd fb99 	bl	800988c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800c15a:	4622      	mov	r2, r4
 800c15c:	210f      	movs	r1, #15
 800c15e:	2006      	movs	r0, #6
 800c160:	f7fd fb40 	bl	80097e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800c164:	2006      	movs	r0, #6
 800c166:	f7fd fb71 	bl	800984c <HAL_NVIC_EnableIRQ>
}
 800c16a:	e7e5      	b.n	800c138 <BSP_PB_Init+0x34>
 800c16c:	40021000 	.word	0x40021000
 800c170:	20000b30 	.word	0x20000b30
 800c174:	10110000 	.word	0x10110000

0800c178 <BSP_PB_GetState>:
{
 800c178:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800c17a:	4b03      	ldr	r3, [pc, #12]	; (800c188 <BSP_PB_GetState+0x10>)
 800c17c:	2101      	movs	r1, #1
 800c17e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c182:	f7fd fc47 	bl	8009a14 <HAL_GPIO_ReadPin>
}
 800c186:	bd08      	pop	{r3, pc}
 800c188:	20000b30 	.word	0x20000b30

0800c18c <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800c18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800c190:	4c14      	ldr	r4, [pc, #80]	; (800c1e4 <GYRO_IO_Init+0x58>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800c192:	4815      	ldr	r0, [pc, #84]	; (800c1e8 <GYRO_IO_Init+0x5c>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 800c194:	6963      	ldr	r3, [r4, #20]
{
 800c196:	b086      	sub	sp, #24
  GYRO_CS_GPIO_CLK_ENABLE();  
 800c198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c19c:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c19e:	2500      	movs	r5, #0
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800c1a0:	2708      	movs	r7, #8
 800c1a2:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c1a6:	2603      	movs	r6, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800c1a8:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800c1aa:	e9cd 7801 	strd	r7, r8, [sp, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c1ae:	e9cd 5603 	strd	r5, r6, [sp, #12]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800c1b2:	f7fd fb6b 	bl	800988c <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800c1b6:	4642      	mov	r2, r8
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	480b      	ldr	r0, [pc, #44]	; (800c1e8 <GYRO_IO_Init+0x5c>)
 800c1bc:	f7fd fc30 	bl	8009a20 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800c1c0:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c1c2:	4809      	ldr	r0, [pc, #36]	; (800c1e8 <GYRO_IO_Init+0x5c>)
  GYRO_INT_GPIO_CLK_ENABLE();
 800c1c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1c8:	6163      	str	r3, [r4, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c1ca:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800c1cc:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c1ce:	e9cd 3501 	strd	r3, r5, [sp, #4]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800c1d2:	e9cd 5603 	strd	r5, r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c1d6:	f7fd fb59 	bl	800988c <HAL_GPIO_Init>
  
  SPIx_Init();
 800c1da:	f7ff fe97 	bl	800bf0c <SPIx_Init>
}
 800c1de:	b006      	add	sp, #24
 800c1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e4:	40021000 	.word	0x40021000
 800c1e8:	48001000 	.word	0x48001000

0800c1ec <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800c1ec:	2a01      	cmp	r2, #1
{
 800c1ee:	b570      	push	{r4, r5, r6, lr}
 800c1f0:	460e      	mov	r6, r1
 800c1f2:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800c1f4:	bf88      	it	hi
 800c1f6:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800c1fa:	480c      	ldr	r0, [pc, #48]	; (800c22c <GYRO_IO_Write+0x40>)
{
 800c1fc:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 800c1fe:	2108      	movs	r1, #8
 800c200:	2200      	movs	r2, #0
 800c202:	f7fd fc0d 	bl	8009a20 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800c206:	4630      	mov	r0, r6
 800c208:	f7ff fec4 	bl	800bf94 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800c20c:	442c      	add	r4, r5
 800c20e:	42a5      	cmp	r5, r4
 800c210:	d106      	bne.n	800c220 <GYRO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}
 800c212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800c216:	4805      	ldr	r0, [pc, #20]	; (800c22c <GYRO_IO_Write+0x40>)
 800c218:	2201      	movs	r2, #1
 800c21a:	2108      	movs	r1, #8
 800c21c:	f7fd bc00 	b.w	8009a20 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 800c220:	f815 0b01 	ldrb.w	r0, [r5], #1
 800c224:	f7ff feb6 	bl	800bf94 <SPIx_WriteRead>
    pBuffer++;
 800c228:	e7f1      	b.n	800c20e <GYRO_IO_Write+0x22>
 800c22a:	bf00      	nop
 800c22c:	48001000 	.word	0x48001000

0800c230 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 800c230:	2a01      	cmp	r2, #1
{  
 800c232:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800c234:	bf8c      	ite	hi
 800c236:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800c23a:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 800c23e:	4606      	mov	r6, r0
 800c240:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800c242:	480c      	ldr	r0, [pc, #48]	; (800c274 <GYRO_IO_Read+0x44>)
 800c244:	2200      	movs	r2, #0
 800c246:	2108      	movs	r1, #8
 800c248:	f7fd fbea 	bl	8009a20 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800c24c:	4620      	mov	r0, r4
 800c24e:	f7ff fea1 	bl	800bf94 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800c252:	4435      	add	r5, r6
 800c254:	42ae      	cmp	r6, r5
 800c256:	d106      	bne.n	800c266 <GYRO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}  
 800c258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800c25c:	4805      	ldr	r0, [pc, #20]	; (800c274 <GYRO_IO_Read+0x44>)
 800c25e:	2201      	movs	r2, #1
 800c260:	2108      	movs	r1, #8
 800c262:	f7fd bbdd 	b.w	8009a20 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800c266:	2000      	movs	r0, #0
 800c268:	f7ff fe94 	bl	800bf94 <SPIx_WriteRead>
 800c26c:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 800c270:	e7f0      	b.n	800c254 <GYRO_IO_Read+0x24>
 800c272:	bf00      	nop
 800c274:	48001000 	.word	0x48001000

0800c278 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800c278:	4b16      	ldr	r3, [pc, #88]	; (800c2d4 <COMPASSACCELERO_IO_Init+0x5c>)
 800c27a:	695a      	ldr	r2, [r3, #20]
{
 800c27c:	b570      	push	{r4, r5, r6, lr}
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800c27e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800c282:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c284:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c286:	4d14      	ldr	r5, [pc, #80]	; (800c2d8 <COMPASSACCELERO_IO_Init+0x60>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c288:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
{
 800c28c:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c28e:	615a      	str	r2, [r3, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c290:	2304      	movs	r3, #4
 800c292:	2400      	movs	r4, #0
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c294:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c298:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c29a:	4628      	mov	r0, r5
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c29c:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c2a0:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c2a2:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c2a4:	f7fd faf2 	bl	800988c <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	2008      	movs	r0, #8
 800c2ae:	f7fd fa99 	bl	80097e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 800c2b2:	2008      	movs	r0, #8
 800c2b4:	f7fd faca 	bl	800984c <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800c2b8:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c2ba:	a901      	add	r1, sp, #4
 800c2bc:	4628      	mov	r0, r5
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c2be:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c2c2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c2c6:	f7fd fae1 	bl	800988c <HAL_GPIO_Init>
  
  I2Cx_Init();
 800c2ca:	f7ff fe83 	bl	800bfd4 <I2Cx_Init>
}
 800c2ce:	b006      	add	sp, #24
 800c2d0:	bd70      	pop	{r4, r5, r6, pc}
 800c2d2:	bf00      	nop
 800c2d4:	40021000 	.word	0x40021000
 800c2d8:	48001000 	.word	0x48001000

0800c2dc <COMPASSACCELERO_IO_ITConfig>:
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c2dc:	4a0e      	ldr	r2, [pc, #56]	; (800c318 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c2de:	480f      	ldr	r0, [pc, #60]	; (800c31c <COMPASSACCELERO_IO_ITConfig+0x40>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c2e0:	6953      	ldr	r3, [r2, #20]
{
 800c2e2:	b510      	push	{r4, lr}
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c2e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2e8:	6153      	str	r3, [r2, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800c2ea:	4b0d      	ldr	r3, [pc, #52]	; (800c320 <COMPASSACCELERO_IO_ITConfig+0x44>)
{
 800c2ec:	b086      	sub	sp, #24
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800c2ee:	2230      	movs	r2, #48	; 0x30
 800c2f0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c2f4:	2400      	movs	r4, #0
 800c2f6:	2303      	movs	r3, #3
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c2f8:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c2fa:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c2fe:	f7fd fac5 	bl	800988c <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 800c302:	4622      	mov	r2, r4
 800c304:	4621      	mov	r1, r4
 800c306:	200a      	movs	r0, #10
 800c308:	f7fd fa6c 	bl	80097e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 800c30c:	200a      	movs	r0, #10
 800c30e:	f7fd fa9d 	bl	800984c <HAL_NVIC_EnableIRQ>
  
}
 800c312:	b006      	add	sp, #24
 800c314:	bd10      	pop	{r4, pc}
 800c316:	bf00      	nop
 800c318:	40021000 	.word	0x40021000
 800c31c:	48001000 	.word	0x48001000
 800c320:	10110000 	.word	0x10110000

0800c324 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800c324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800c326:	4b0c      	ldr	r3, [pc, #48]	; (800c358 <COMPASSACCELERO_IO_Write+0x34>)
 800c328:	f88d 2017 	strb.w	r2, [sp, #23]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	9302      	str	r3, [sp, #8]
 800c330:	f10d 0217 	add.w	r2, sp, #23
 800c334:	2301      	movs	r3, #1
 800c336:	9200      	str	r2, [sp, #0]
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	460a      	mov	r2, r1
 800c33c:	4601      	mov	r1, r0
 800c33e:	4807      	ldr	r0, [pc, #28]	; (800c35c <COMPASSACCELERO_IO_Write+0x38>)
 800c340:	f7fe fc05 	bl	800ab4e <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800c344:	b120      	cbz	r0, 800c350 <COMPASSACCELERO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800c346:	4805      	ldr	r0, [pc, #20]	; (800c35c <COMPASSACCELERO_IO_Write+0x38>)
 800c348:	f7fe fbea 	bl	800ab20 <HAL_I2C_DeInit>
  I2Cx_Init();
 800c34c:	f7ff fe42 	bl	800bfd4 <I2Cx_Init>
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 800c350:	b007      	add	sp, #28
 800c352:	f85d fb04 	ldr.w	pc, [sp], #4
 800c356:	bf00      	nop
 800c358:	20000b34 	.word	0x20000b34
 800c35c:	20001d54 	.word	0x20001d54

0800c360 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800c360:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800c368:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <COMPASSACCELERO_IO_Read+0x38>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	9302      	str	r3, [sp, #8]
{
 800c36e:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800c370:	2301      	movs	r3, #1
 800c372:	f10d 0117 	add.w	r1, sp, #23
 800c376:	9100      	str	r1, [sp, #0]
 800c378:	9301      	str	r3, [sp, #4]
 800c37a:	4601      	mov	r1, r0
 800c37c:	4807      	ldr	r0, [pc, #28]	; (800c39c <COMPASSACCELERO_IO_Read+0x3c>)
 800c37e:	f7fe fc68 	bl	800ac52 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800c382:	b120      	cbz	r0, 800c38e <COMPASSACCELERO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 800c384:	4805      	ldr	r0, [pc, #20]	; (800c39c <COMPASSACCELERO_IO_Read+0x3c>)
 800c386:	f7fe fbcb 	bl	800ab20 <HAL_I2C_DeInit>
  I2Cx_Init();
 800c38a:	f7ff fe23 	bl	800bfd4 <I2Cx_Init>
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 800c38e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800c392:	b007      	add	sp, #28
 800c394:	f85d fb04 	ldr.w	pc, [sp], #4
 800c398:	20000b34 	.word	0x20000b34
 800c39c:	20001d54 	.word	0x20001d54

0800c3a0 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 800c3a0:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800c3a2:	4c0c      	ldr	r4, [pc, #48]	; (800c3d4 <BSP_ACCELERO_Init+0x34>)
 800c3a4:	68a3      	ldr	r3, [r4, #8]
 800c3a6:	4798      	blx	r3
 800c3a8:	2833      	cmp	r0, #51	; 0x33
 800c3aa:	d10b      	bne.n	800c3c4 <BSP_ACCELERO_Init+0x24>
    ret = ACCELERO_OK;
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 800c3ac:	4d0a      	ldr	r5, [pc, #40]	; (800c3d8 <BSP_ACCELERO_Init+0x38>)

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800c3ae:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303agrDrv;
 800c3b0:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 800c3b2:	f640 0047 	movw	r0, #2119	; 0x847
 800c3b6:	4798      	blx	r3
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
                      Accelero_FilterStructure.HighPassFilter_AOI2);

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800c3b8:	682b      	ldr	r3, [r5, #0]
 800c3ba:	2090      	movs	r0, #144	; 0x90
 800c3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3be:	4798      	blx	r3

    ret = ACCELERO_OK;
 800c3c0:	2000      	movs	r0, #0
  }

  return ret;
}
 800c3c2:	bd38      	pop	{r3, r4, r5, pc}
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800c3c4:	4c05      	ldr	r4, [pc, #20]	; (800c3dc <BSP_ACCELERO_Init+0x3c>)
 800c3c6:	68a3      	ldr	r3, [r4, #8]
 800c3c8:	4798      	blx	r3
 800c3ca:	2833      	cmp	r0, #51	; 0x33
 800c3cc:	d0ee      	beq.n	800c3ac <BSP_ACCELERO_Init+0xc>
  uint8_t ret = ACCELERO_ERROR;
 800c3ce:	2001      	movs	r0, #1
 800c3d0:	e7f7      	b.n	800c3c2 <BSP_ACCELERO_Init+0x22>
 800c3d2:	bf00      	nop
 800c3d4:	20000b5c 	.word	0x20000b5c
 800c3d8:	20001dec 	.word	0x20001dec
 800c3dc:	20000bf8 	.word	0x20000bf8

0800c3e0 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 800c3e0:	4b02      	ldr	r3, [pc, #8]	; (800c3ec <BSP_ACCELERO_GetXYZ+0xc>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e6:	b103      	cbz	r3, 800c3ea <BSP_ACCELERO_GetXYZ+0xa>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800c3e8:	4718      	bx	r3
  }
}
 800c3ea:	4770      	bx	lr
 800c3ec:	20001dec 	.word	0x20001dec

0800c3f0 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 800c3f0:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800c3f2:	4c16      	ldr	r4, [pc, #88]	; (800c44c <BSP_GYRO_Init+0x5c>)
 800c3f4:	68a3      	ldr	r3, [r4, #8]
 800c3f6:	4798      	blx	r3
 800c3f8:	28d4      	cmp	r0, #212	; 0xd4
 800c3fa:	d10f      	bne.n	800c41c <BSP_GYRO_Init+0x2c>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800c3fc:	4d14      	ldr	r5, [pc, #80]	; (800c450 <BSP_GYRO_Init+0x60>)

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
                         Gyro_InitStructure.Full_Scale) << 8);

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800c3fe:	6823      	ldr	r3, [r4, #0]
    GyroscopeDrv = &L3gd20Drv;
 800c400:	602c      	str	r4, [r5, #0]
    GyroscopeDrv->Init(ctrl);
 800c402:	f241 003f 	movw	r0, #4159	; 0x103f
 800c406:	4798      	blx	r3

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	2000      	movs	r0, #0
 800c40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c40e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800c410:	682b      	ldr	r3, [r5, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800c412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c414:	2010      	movs	r0, #16
 800c416:	4798      	blx	r3

    ret = GYRO_OK;
 800c418:	2000      	movs	r0, #0
  }

  return ret;
}
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800c41c:	68a3      	ldr	r3, [r4, #8]
 800c41e:	4798      	blx	r3
 800c420:	28d5      	cmp	r0, #213	; 0xd5
 800c422:	d0eb      	beq.n	800c3fc <BSP_GYRO_Init+0xc>
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 800c424:	4d0b      	ldr	r5, [pc, #44]	; (800c454 <BSP_GYRO_Init+0x64>)
 800c426:	68ab      	ldr	r3, [r5, #8]
 800c428:	4798      	blx	r3
 800c42a:	28d3      	cmp	r0, #211	; 0xd3
 800c42c:	d10b      	bne.n	800c446 <BSP_GYRO_Init+0x56>
    GyroscopeDrv = &I3g4250Drv;
 800c42e:	4c08      	ldr	r4, [pc, #32]	; (800c450 <BSP_GYRO_Init+0x60>)
    GyroscopeDrv->Init(ctrl);
 800c430:	682b      	ldr	r3, [r5, #0]
    GyroscopeDrv = &I3g4250Drv;
 800c432:	6025      	str	r5, [r4, #0]
    GyroscopeDrv->Init(ctrl);
 800c434:	f241 003f 	movw	r0, #4159	; 0x103f
 800c438:	4798      	blx	r3
    GyroscopeDrv->FilterConfig(ctrl);
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	2000      	movs	r0, #0
 800c43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c440:	4798      	blx	r3
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	e7e5      	b.n	800c412 <BSP_GYRO_Init+0x22>
  uint8_t ret = GYRO_ERROR;
 800c446:	2001      	movs	r0, #1
 800c448:	e7e7      	b.n	800c41a <BSP_GYRO_Init+0x2a>
 800c44a:	bf00      	nop
 800c44c:	20000b90 	.word	0x20000b90
 800c450:	20001df0 	.word	0x20001df0
 800c454:	20000bc4 	.word	0x20000bc4

0800c458 <BSP_GYRO_GetXYZ>:
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 800c458:	4b02      	ldr	r3, [pc, #8]	; (800c464 <BSP_GYRO_GetXYZ+0xc>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45e:	b103      	cbz	r3, 800c462 <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800c460:	4718      	bx	r3
  }
}
 800c462:	4770      	bx	lr
 800c464:	20001df0 	.word	0x20001df0

0800c468 <LSM303DLHC_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
}
 800c468:	4770      	bx	lr

0800c46a <LSM303DLHC_AccInit>:
{  
 800c46a:	b510      	push	{r4, lr}
 800c46c:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800c46e:	f7ff ff03 	bl	800c278 <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800c472:	b2e2      	uxtb	r2, r4
 800c474:	2120      	movs	r1, #32
 800c476:	2032      	movs	r0, #50	; 0x32
 800c478:	f7ff ff54 	bl	800c324 <COMPASSACCELERO_IO_Write>
}
 800c47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800c480:	2200      	movs	r2, #0
 800c482:	2123      	movs	r1, #35	; 0x23
 800c484:	2032      	movs	r0, #50	; 0x32
 800c486:	f7ff bf4d 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800c48a <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800c48a:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800c48c:	f7ff fef4 	bl	800c278 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
  
  return ctrl;
}
 800c490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800c494:	210f      	movs	r1, #15
 800c496:	2032      	movs	r0, #50	; 0x32
 800c498:	f7ff bf62 	b.w	800c360 <COMPASSACCELERO_IO_Read>

0800c49c <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 800c49c:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800c49e:	2124      	movs	r1, #36	; 0x24
 800c4a0:	2032      	movs	r0, #50	; 0x32
 800c4a2:	f7ff ff5d 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800c4a6:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800c4aa:	b2c2      	uxtb	r2, r0
}
 800c4ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800c4b0:	2124      	movs	r1, #36	; 0x24
 800c4b2:	2032      	movs	r0, #50	; 0x32
 800c4b4:	f7ff bf36 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800c4b8 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800c4b8:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c4ba:	2121      	movs	r1, #33	; 0x21
{
 800c4bc:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c4be:	2032      	movs	r0, #50	; 0x32
 800c4c0:	f7ff ff4e 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800c4c4:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c4c8:	ea40 0204 	orr.w	r2, r0, r4
 800c4cc:	2121      	movs	r1, #33	; 0x21
}
 800c4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c4d2:	2032      	movs	r0, #50	; 0x32
 800c4d4:	f7ff bf26 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800c4d8 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800c4d8:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c4da:	2121      	movs	r1, #33	; 0x21
{
 800c4dc:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c4de:	2032      	movs	r0, #50	; 0x32
 800c4e0:	f7ff ff3e 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 800c4e4:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c4e8:	ea40 0204 	orr.w	r2, r0, r4
 800c4ec:	2121      	movs	r1, #33	; 0x21
}
 800c4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c4f2:	2032      	movs	r0, #50	; 0x32
 800c4f4:	f7ff bf16 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800c4f8 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800c4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800c4fc:	2123      	movs	r1, #35	; 0x23
{
 800c4fe:	4605      	mov	r5, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800c500:	2032      	movs	r0, #50	; 0x32
 800c502:	f7ff ff2d 	bl	800c360 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800c506:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800c508:	4606      	mov	r6, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800c50a:	2032      	movs	r0, #50	; 0x32
 800c50c:	f7ff ff28 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800c510:	2128      	movs	r1, #40	; 0x28
 800c512:	2032      	movs	r0, #50	; 0x32
 800c514:	f7ff ff24 	bl	800c360 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800c518:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800c51a:	b247      	sxtb	r7, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800c51c:	2032      	movs	r0, #50	; 0x32
 800c51e:	f7ff ff1f 	bl	800c360 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800c522:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800c524:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800c528:	2032      	movs	r0, #50	; 0x32
 800c52a:	f7ff ff19 	bl	800c360 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800c52e:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800c530:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800c532:	2032      	movs	r0, #50	; 0x32
 800c534:	f7ff ff14 	bl	800c360 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800c538:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800c53a:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800c53e:	2032      	movs	r0, #50	; 0x32
 800c540:	f7ff ff0e 	bl	800c360 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800c544:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800c546:	fa4f f880 	sxtb.w	r8, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800c54a:	2032      	movs	r0, #50	; 0x32
 800c54c:	f7ff ff08 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800c550:	0672      	lsls	r2, r6, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800c552:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800c554:	d51a      	bpl.n	800c58c <LSM303DLHC_AccReadXYZ+0x94>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800c556:	eb09 2707 	add.w	r7, r9, r7, lsl #8
 800c55a:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 800c55e:	b23f      	sxth	r7, r7
 800c560:	b224      	sxth	r4, r4
 800c562:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 800c566:	f006 0030 	and.w	r0, r6, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800c56a:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800c56c:	b21a      	sxth	r2, r3
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800c56e:	d016      	beq.n	800c59e <LSM303DLHC_AccReadXYZ+0xa6>
 800c570:	2830      	cmp	r0, #48	; 0x30
 800c572:	d016      	beq.n	800c5a2 <LSM303DLHC_AccReadXYZ+0xaa>
 800c574:	2810      	cmp	r0, #16
 800c576:	bf14      	ite	ne
 800c578:	2301      	movne	r3, #1
 800c57a:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800c57c:	435f      	muls	r7, r3
 800c57e:	435c      	muls	r4, r3
 800c580:	4353      	muls	r3, r2
 800c582:	802f      	strh	r7, [r5, #0]
 800c584:	806c      	strh	r4, [r5, #2]
 800c586:	80ab      	strh	r3, [r5, #4]
  }
}
 800c588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800c58c:	eb07 2709 	add.w	r7, r7, r9, lsl #8
 800c590:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800c594:	b23f      	sxth	r7, r7
 800c596:	b224      	sxth	r4, r4
 800c598:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 800c59c:	e7e3      	b.n	800c566 <LSM303DLHC_AccReadXYZ+0x6e>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800c59e:	2304      	movs	r3, #4
 800c5a0:	e7ec      	b.n	800c57c <LSM303DLHC_AccReadXYZ+0x84>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800c5a2:	230c      	movs	r3, #12
 800c5a4:	e7ea      	b.n	800c57c <LSM303DLHC_AccReadXYZ+0x84>

0800c5a6 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800c5a6:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c5a8:	2121      	movs	r1, #33	; 0x21
{
 800c5aa:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c5ac:	2032      	movs	r0, #50	; 0x32
 800c5ae:	f7ff fed7 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800c5b2:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c5b6:	ea40 0204 	orr.w	r2, r0, r4
 800c5ba:	2121      	movs	r1, #33	; 0x21
}
 800c5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c5c0:	2032      	movs	r0, #50	; 0x32
 800c5c2:	f7ff beaf 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800c5c6 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800c5c6:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800c5c8:	2122      	movs	r1, #34	; 0x22
{
 800c5ca:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800c5cc:	2032      	movs	r0, #50	; 0x32
 800c5ce:	f7ff fec7 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800c5d2:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800c5d4:	b2c2      	uxtb	r2, r0
}
 800c5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800c5da:	2122      	movs	r1, #34	; 0x22
 800c5dc:	2032      	movs	r0, #50	; 0x32
 800c5de:	f7ff bea1 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800c5e2 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800c5e2:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800c5e4:	2138      	movs	r1, #56	; 0x38
{  
 800c5e6:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800c5e8:	2032      	movs	r0, #50	; 0x32
 800c5ea:	f7ff feb9 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800c5ee:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800c5f0:	b2c2      	uxtb	r2, r0
 800c5f2:	2138      	movs	r1, #56	; 0x38
 800c5f4:	2032      	movs	r0, #50	; 0x32
 800c5f6:	f7ff fe95 	bl	800c324 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800c5fa:	220a      	movs	r2, #10
 800c5fc:	213a      	movs	r1, #58	; 0x3a
 800c5fe:	2032      	movs	r0, #50	; 0x32
 800c600:	f7ff fe90 	bl	800c324 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800c604:	2205      	movs	r2, #5
 800c606:	213b      	movs	r1, #59	; 0x3b
 800c608:	2032      	movs	r0, #50	; 0x32
 800c60a:	f7ff fe8b 	bl	800c324 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800c60e:	2205      	movs	r2, #5
 800c610:	213c      	movs	r1, #60	; 0x3c
 800c612:	2032      	movs	r0, #50	; 0x32
 800c614:	f7ff fe86 	bl	800c324 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800c618:	2232      	movs	r2, #50	; 0x32
}
 800c61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800c61e:	213d      	movs	r1, #61	; 0x3d
 800c620:	4610      	mov	r0, r2
 800c622:	f7ff be7f 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800c626 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800c626:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800c628:	f7ff fe58 	bl	800c2dc <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800c62c:	2080      	movs	r0, #128	; 0x80
 800c62e:	f7ff ffca 	bl	800c5c6 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800c632:	2004      	movs	r0, #4
 800c634:	f7ff ffb7 	bl	800c5a6 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
}
 800c638:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800c63c:	2010      	movs	r0, #16
 800c63e:	f7ff bfd0 	b.w	800c5e2 <LSM303DLHC_AccClickITEnable>

0800c642 <L3GD20_DeInit>:
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
}
 800c642:	4770      	bx	lr

0800c644 <L3GD20_Init>:
{  
 800c644:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800c646:	2300      	movs	r3, #0
{  
 800c648:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800c64a:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800c64e:	f7ff fd9d 	bl	800c18c <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800c652:	f10d 0007 	add.w	r0, sp, #7
 800c656:	2201      	movs	r2, #1
 800c658:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800c65a:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800c65e:	f7ff fdc5 	bl	800c1ec <GYRO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 800c662:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800c664:	2201      	movs	r2, #1
 800c666:	2123      	movs	r1, #35	; 0x23
 800c668:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 800c66c:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800c670:	f7ff fdbc 	bl	800c1ec <GYRO_IO_Write>
}
 800c674:	b002      	add	sp, #8
 800c676:	bd10      	pop	{r4, pc}

0800c678 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800c678:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800c67a:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800c67c:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800c680:	2120      	movs	r1, #32
 800c682:	f10d 0007 	add.w	r0, sp, #7
 800c686:	f7ff fdb1 	bl	800c1ec <GYRO_IO_Write>
}
 800c68a:	b003      	add	sp, #12
 800c68c:	f85d fb04 	ldr.w	pc, [sp], #4

0800c690 <L3GD20_ReadID>:
{
 800c690:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800c692:	f7ff fd7b 	bl	800c18c <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800c696:	f10d 0007 	add.w	r0, sp, #7
 800c69a:	2201      	movs	r2, #1
 800c69c:	210f      	movs	r1, #15
 800c69e:	f7ff fdc7 	bl	800c230 <GYRO_IO_Read>
}
 800c6a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c6a6:	b003      	add	sp, #12
 800c6a8:	f85d fb04 	ldr.w	pc, [sp], #4

0800c6ac <L3GD20_RebootCmd>:
{
 800c6ac:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f10d 0007 	add.w	r0, sp, #7
 800c6b4:	2124      	movs	r1, #36	; 0x24
 800c6b6:	f7ff fdbb 	bl	800c230 <GYRO_IO_Read>
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800c6ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c6be:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800c6c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c6c4:	2124      	movs	r1, #36	; 0x24
 800c6c6:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800c6ca:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c6ce:	f7ff fd8d 	bl	800c1ec <GYRO_IO_Write>
}
 800c6d2:	b003      	add	sp, #12
 800c6d4:	f85d fb04 	ldr.w	pc, [sp], #4

0800c6d8 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800c6d8:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c6da:	2300      	movs	r3, #0
{
 800c6dc:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f10d 0006 	add.w	r0, sp, #6
 800c6e4:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c6e6:	f88d 3006 	strb.w	r3, [sp, #6]
 800c6ea:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c6ee:	f7ff fd9f 	bl	800c230 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800c6f2:	f10d 0007 	add.w	r0, sp, #7
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	2122      	movs	r1, #34	; 0x22
 800c6fa:	f7ff fd99 	bl	800c230 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800c6fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c702:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c706:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 800c70a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c70e:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);   
 800c712:	ea43 0004 	orr.w	r0, r3, r4
 800c716:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c71a:	2201      	movs	r2, #1
 800c71c:	f10d 0006 	add.w	r0, sp, #6
 800c720:	2130      	movs	r1, #48	; 0x30
 800c722:	f7ff fd63 	bl	800c1ec <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800c726:	2201      	movs	r2, #1
 800c728:	2122      	movs	r1, #34	; 0x22
 800c72a:	f10d 0007 	add.w	r0, sp, #7
 800c72e:	f7ff fd5d 	bl	800c1ec <GYRO_IO_Write>
}
 800c732:	b002      	add	sp, #8
 800c734:	bd10      	pop	{r4, pc}

0800c736 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800c736:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c738:	2201      	movs	r2, #1
{  
 800c73a:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c73c:	2122      	movs	r1, #34	; 0x22
 800c73e:	f10d 0007 	add.w	r0, sp, #7
 800c742:	f7ff fd75 	bl	800c230 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800c746:	b96c      	cbnz	r4, 800c764 <L3GD20_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800c748:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800c74c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800c750:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c754:	2201      	movs	r2, #1
 800c756:	2122      	movs	r1, #34	; 0x22
 800c758:	f10d 0007 	add.w	r0, sp, #7
 800c75c:	f7ff fd46 	bl	800c1ec <GYRO_IO_Write>
}
 800c760:	b002      	add	sp, #8
 800c762:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800c764:	2c01      	cmp	r4, #1
 800c766:	d1f5      	bne.n	800c754 <L3GD20_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800c768:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c76c:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800c770:	f043 0308 	orr.w	r3, r3, #8
 800c774:	e7ec      	b.n	800c750 <L3GD20_EnableIT+0x1a>

0800c776 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800c776:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c778:	2201      	movs	r2, #1
{  
 800c77a:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c77c:	2122      	movs	r1, #34	; 0x22
 800c77e:	f10d 0007 	add.w	r0, sp, #7
 800c782:	f7ff fd55 	bl	800c230 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800c786:	b96c      	cbnz	r4, 800c7a4 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800c788:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c78c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
 800c790:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c794:	2201      	movs	r2, #1
 800c796:	2122      	movs	r1, #34	; 0x22
 800c798:	f10d 0007 	add.w	r0, sp, #7
 800c79c:	f7ff fd26 	bl	800c1ec <GYRO_IO_Write>
}
 800c7a0:	b002      	add	sp, #8
 800c7a2:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800c7a4:	2c01      	cmp	r4, #1
 800c7a6:	d1f5      	bne.n	800c794 <L3GD20_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800c7a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c7ac:	f023 0308 	bic.w	r3, r3, #8
 800c7b0:	e7ee      	b.n	800c790 <L3GD20_DisableIT+0x1a>

0800c7b2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800c7b2:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c7b4:	2201      	movs	r2, #1
{
 800c7b6:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c7b8:	2121      	movs	r1, #33	; 0x21
 800c7ba:	f10d 0007 	add.w	r0, sp, #7
 800c7be:	f7ff fd37 	bl	800c230 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800c7c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c7c6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800c7ca:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	2121      	movs	r1, #33	; 0x21
 800c7d0:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800c7d4:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c7d8:	f7ff fd08 	bl	800c1ec <GYRO_IO_Write>
}
 800c7dc:	b002      	add	sp, #8
 800c7de:	bd10      	pop	{r4, pc}

0800c7e0 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800c7e0:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c7e2:	2201      	movs	r2, #1
{
 800c7e4:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c7e6:	2124      	movs	r1, #36	; 0x24
 800c7e8:	f10d 0007 	add.w	r0, sp, #7
 800c7ec:	f7ff fd20 	bl	800c230 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800c7f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c7f4:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 800c7f8:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	2124      	movs	r1, #36	; 0x24
 800c7fe:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800c802:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c806:	f7ff fcf1 	bl	800c1ec <GYRO_IO_Write>
}
 800c80a:	b002      	add	sp, #8
 800c80c:	bd10      	pop	{r4, pc}
	...

0800c810 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800c810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c812:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] ={0};
 800c814:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c816:	2201      	movs	r2, #1
 800c818:	2123      	movs	r1, #35	; 0x23
{
 800c81a:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c81c:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] ={0};
 800c820:	9302      	str	r3, [sp, #8]
 800c822:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800c826:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c82a:	f7ff fd01 	bl	800c230 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800c82e:	2206      	movs	r2, #6
 800c830:	2128      	movs	r1, #40	; 0x28
 800c832:	a802      	add	r0, sp, #8
 800c834:	f7ff fcfc 	bl	800c230 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800c838:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c83c:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800c840:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800c844:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800c848:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800c84c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c850:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800c854:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c858:	d039      	beq.n	800c8ce <L3GD20_ReadXYZAngRate+0xbe>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800c85a:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800c85e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800c862:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c866:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c86a:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800c86e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c872:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c874:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c878:	d034      	beq.n	800c8e4 <L3GD20_ReadXYZAngRate+0xd4>
 800c87a:	2b20      	cmp	r3, #32
 800c87c:	d035      	beq.n	800c8ea <L3GD20_ReadXYZAngRate+0xda>
 800c87e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c8f0 <L3GD20_ReadXYZAngRate+0xe0>
 800c882:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c8f4 <L3GD20_ReadXYZAngRate+0xe4>
 800c886:	2b00      	cmp	r3, #0
 800c888:	bf08      	it	eq
 800c88a:	eef0 7a47 	vmoveq.f32	s15, s14
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800c88e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800c892:	ee07 3a10 	vmov	s14, r3
 800c896:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c89a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c89e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8a2:	ed84 7a00 	vstr	s14, [r4]
 800c8a6:	ee07 3a10 	vmov	s14, r3
 800c8aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8ae:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800c8b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8b6:	ed84 7a01 	vstr	s14, [r4, #4]
 800c8ba:	ee07 3a10 	vmov	s14, r3
 800c8be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8c6:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 800c8ca:	b007      	add	sp, #28
 800c8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c8ce:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800c8d2:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800c8d6:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c8da:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c8de:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800c8e2:	e7c4      	b.n	800c86e <L3GD20_ReadXYZAngRate+0x5e>
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800c8e4:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c8f8 <L3GD20_ReadXYZAngRate+0xe8>
 800c8e8:	e7d1      	b.n	800c88e <L3GD20_ReadXYZAngRate+0x7e>
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800c8ea:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c8fc <L3GD20_ReadXYZAngRate+0xec>
 800c8ee:	e7ce      	b.n	800c88e <L3GD20_ReadXYZAngRate+0x7e>
 800c8f0:	00000000 	.word	0x00000000
 800c8f4:	410c0000 	.word	0x410c0000
 800c8f8:	418c0000 	.word	0x418c0000
 800c8fc:	428c0000 	.word	0x428c0000

0800c900 <I3G4250D_DeInit>:
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
}
 800c900:	4770      	bx	lr

0800c902 <I3G4250D_Init>:
{
 800c902:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800c904:	2300      	movs	r3, #0
{
 800c906:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800c908:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800c90c:	f7ff fc3e 	bl	800c18c <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c910:	f10d 0007 	add.w	r0, sp, #7
 800c914:	2201      	movs	r2, #1
 800c916:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800c918:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c91c:	f7ff fc66 	bl	800c1ec <GYRO_IO_Write>
  ctrl = (uint8_t)(InitStruct >> 8);
 800c920:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800c922:	2201      	movs	r2, #1
 800c924:	2123      	movs	r1, #35	; 0x23
 800c926:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t)(InitStruct >> 8);
 800c92a:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800c92e:	f7ff fc5d 	bl	800c1ec <GYRO_IO_Write>
}
 800c932:	b002      	add	sp, #8
 800c934:	bd10      	pop	{r4, pc}

0800c936 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 800c936:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c938:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800c93a:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c93e:	2120      	movs	r1, #32
 800c940:	f10d 0007 	add.w	r0, sp, #7
 800c944:	f7ff fc52 	bl	800c1ec <GYRO_IO_Write>
}
 800c948:	b003      	add	sp, #12
 800c94a:	f85d fb04 	ldr.w	pc, [sp], #4

0800c94e <I3G4250D_ReadID>:
{
 800c94e:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800c950:	f7ff fc1c 	bl	800c18c <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 800c954:	f10d 0007 	add.w	r0, sp, #7
 800c958:	2201      	movs	r2, #1
 800c95a:	210f      	movs	r1, #15
 800c95c:	f7ff fc68 	bl	800c230 <GYRO_IO_Read>
}
 800c960:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c964:	b003      	add	sp, #12
 800c966:	f85d fb04 	ldr.w	pc, [sp], #4

0800c96a <I3G4250D_RebootCmd>:
{
 800c96a:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c96c:	2201      	movs	r2, #1
 800c96e:	f10d 0007 	add.w	r0, sp, #7
 800c972:	2124      	movs	r1, #36	; 0x24
 800c974:	f7ff fc5c 	bl	800c230 <GYRO_IO_Read>
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c978:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c97c:	2201      	movs	r2, #1
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c97e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c982:	2124      	movs	r1, #36	; 0x24
 800c984:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c988:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c98c:	f7ff fc2e 	bl	800c1ec <GYRO_IO_Write>
}
 800c990:	b003      	add	sp, #12
 800c992:	f85d fb04 	ldr.w	pc, [sp], #4

0800c996 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800c996:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c998:	2300      	movs	r3, #0
{
 800c99a:	4604      	mov	r4, r0

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c99c:	2201      	movs	r2, #1
 800c99e:	f10d 0006 	add.w	r0, sp, #6
 800c9a2:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c9a4:	f88d 3006 	strb.w	r3, [sp, #6]
 800c9a8:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c9ac:	f7ff fc40 	bl	800c230 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800c9b0:	f10d 0007 	add.w	r0, sp, #7
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	2122      	movs	r1, #34	; 0x22
 800c9b8:	f7ff fc3a 	bl	800c230 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800c9bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c9c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9c4:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);

  ctrl3 &= 0xDF;
 800c9c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c9cc:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);
 800c9d0:	ea43 0004 	orr.w	r0, r3, r4
 800c9d4:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f10d 0006 	add.w	r0, sp, #6
 800c9de:	2130      	movs	r1, #48	; 0x30
 800c9e0:	f7ff fc04 	bl	800c1ec <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	2122      	movs	r1, #34	; 0x22
 800c9e8:	f10d 0007 	add.w	r0, sp, #7
 800c9ec:	f7ff fbfe 	bl	800c1ec <GYRO_IO_Write>
}
 800c9f0:	b002      	add	sp, #8
 800c9f2:	bd10      	pop	{r4, pc}

0800c9f4 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 800c9f4:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c9f6:	2201      	movs	r2, #1
{
 800c9f8:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800c9fa:	2122      	movs	r1, #34	; 0x22
 800c9fc:	f10d 0007 	add.w	r0, sp, #7
 800ca00:	f7ff fc16 	bl	800c230 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800ca04:	b96c      	cbnz	r4, 800ca22 <I3G4250D_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800ca06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 800ca0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800ca0e:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca12:	2201      	movs	r2, #1
 800ca14:	2122      	movs	r1, #34	; 0x22
 800ca16:	f10d 0007 	add.w	r0, sp, #7
 800ca1a:	f7ff fbe7 	bl	800c1ec <GYRO_IO_Write>
}
 800ca1e:	b002      	add	sp, #8
 800ca20:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800ca22:	2c01      	cmp	r4, #1
 800ca24:	d1f5      	bne.n	800ca12 <I3G4250D_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800ca26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca2a:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800ca2e:	f043 0308 	orr.w	r3, r3, #8
 800ca32:	e7ec      	b.n	800ca0e <I3G4250D_EnableIT+0x1a>

0800ca34 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 800ca34:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca36:	2201      	movs	r2, #1
{
 800ca38:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca3a:	2122      	movs	r1, #34	; 0x22
 800ca3c:	f10d 0007 	add.w	r0, sp, #7
 800ca40:	f7ff fbf6 	bl	800c230 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800ca44:	b96c      	cbnz	r4, 800ca62 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800ca46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
 800ca4e:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca52:	2201      	movs	r2, #1
 800ca54:	2122      	movs	r1, #34	; 0x22
 800ca56:	f10d 0007 	add.w	r0, sp, #7
 800ca5a:	f7ff fbc7 	bl	800c1ec <GYRO_IO_Write>
}
 800ca5e:	b002      	add	sp, #8
 800ca60:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800ca62:	2c01      	cmp	r4, #1
 800ca64:	d1f5      	bne.n	800ca52 <I3G4250D_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800ca66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca6a:	f023 0308 	bic.w	r3, r3, #8
 800ca6e:	e7ee      	b.n	800ca4e <I3G4250D_DisableIT+0x1a>

0800ca70 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800ca70:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800ca72:	2201      	movs	r2, #1
{
 800ca74:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800ca76:	2121      	movs	r1, #33	; 0x21
 800ca78:	f10d 0007 	add.w	r0, sp, #7
 800ca7c:	f7ff fbd8 	bl	800c230 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 800ca80:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ca84:	f020 003f 	bic.w	r0, r0, #63	; 0x3f

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800ca88:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	2121      	movs	r1, #33	; 0x21
 800ca8e:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800ca92:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800ca96:	f7ff fba9 	bl	800c1ec <GYRO_IO_Write>
}
 800ca9a:	b002      	add	sp, #8
 800ca9c:	bd10      	pop	{r4, pc}

0800ca9e <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800ca9e:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800caa0:	2201      	movs	r2, #1
{
 800caa2:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800caa4:	2124      	movs	r1, #36	; 0x24
 800caa6:	f10d 0007 	add.w	r0, sp, #7
 800caaa:	f7ff fbc1 	bl	800c230 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800caae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cab2:	f020 0010 	bic.w	r0, r0, #16

  tmpreg |= HighPassFilterState;
 800cab6:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800cab8:	2201      	movs	r2, #1
 800caba:	2124      	movs	r1, #36	; 0x24
 800cabc:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800cac0:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800cac4:	f7ff fb92 	bl	800c1ec <GYRO_IO_Write>
}
 800cac8:	b002      	add	sp, #8
 800caca:	bd10      	pop	{r4, pc}

0800cacc <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 800cacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cace:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] = {0};
 800cad0:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i = 0;

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800cad2:	2201      	movs	r2, #1
 800cad4:	2123      	movs	r1, #35	; 0x23
{
 800cad6:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800cad8:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] = {0};
 800cadc:	9302      	str	r3, [sp, #8]
 800cade:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800cae2:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800cae6:	f7ff fba3 	bl	800c230 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800caea:	2206      	movs	r2, #6
 800caec:	2128      	movs	r1, #40	; 0x28
 800caee:	a802      	add	r0, sp, #8
 800caf0:	f7ff fb9e 	bl	800c230 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 800caf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800caf8:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800cafc:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800cb00:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800cb04:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800cb08:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800cb0c:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800cb10:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cb14:	d039      	beq.n	800cb8a <I3G4250D_ReadXYZAngRate+0xbe>
  }
  else
  {
    for (i = 0; i < 3; i++)
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 800cb16:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800cb1a:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800cb1e:	f8ad 6010 	strh.w	r6, [sp, #16]
 800cb22:	f8ad 0012 	strh.w	r0, [sp, #18]
 800cb26:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800cb2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800cb2e:	2b10      	cmp	r3, #16
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800cb30:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800cb34:	d034      	beq.n	800cba0 <I3G4250D_ReadXYZAngRate+0xd4>
 800cb36:	2b20      	cmp	r3, #32
 800cb38:	d035      	beq.n	800cba6 <I3G4250D_ReadXYZAngRate+0xda>
 800cb3a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800cbac <I3G4250D_ReadXYZAngRate+0xe0>
 800cb3e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800cbb0 <I3G4250D_ReadXYZAngRate+0xe4>
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	bf08      	it	eq
 800cb46:	eef0 7a47 	vmoveq.f32	s15, s14
      break;
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 800cb4a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800cb4e:	ee07 3a10 	vmov	s14, r3
 800cb52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb56:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800cb5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb5e:	ed84 7a00 	vstr	s14, [r4]
 800cb62:	ee07 3a10 	vmov	s14, r3
 800cb66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb6a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800cb6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb72:	ed84 7a01 	vstr	s14, [r4, #4]
 800cb76:	ee07 3a10 	vmov	s14, r3
 800cb7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb82:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 800cb86:	b007      	add	sp, #28
 800cb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800cb8a:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800cb8e:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800cb92:	f8ad 6010 	strh.w	r6, [sp, #16]
 800cb96:	f8ad 0012 	strh.w	r0, [sp, #18]
 800cb9a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800cb9e:	e7c4      	b.n	800cb2a <I3G4250D_ReadXYZAngRate+0x5e>
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800cba0:	eddf 7a04 	vldr	s15, [pc, #16]	; 800cbb4 <I3G4250D_ReadXYZAngRate+0xe8>
 800cba4:	e7d1      	b.n	800cb4a <I3G4250D_ReadXYZAngRate+0x7e>
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 800cba6:	eddf 7a04 	vldr	s15, [pc, #16]	; 800cbb8 <I3G4250D_ReadXYZAngRate+0xec>
 800cbaa:	e7ce      	b.n	800cb4a <I3G4250D_ReadXYZAngRate+0x7e>
 800cbac:	00000000 	.word	0x00000000
 800cbb0:	410c0000 	.word	0x410c0000
 800cbb4:	418c0000 	.word	0x418c0000
 800cbb8:	428c0000 	.word	0x428c0000

0800cbbc <LSM303AGR_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
}
 800cbbc:	4770      	bx	lr

0800cbbe <LSM303AGR_AccInit>:
{  
 800cbbe:	b510      	push	{r4, lr}
 800cbc0:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800cbc2:	f7ff fb59 	bl	800c278 <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 800cbc6:	b2e2      	uxtb	r2, r4
 800cbc8:	2120      	movs	r1, #32
 800cbca:	2032      	movs	r0, #50	; 0x32
 800cbcc:	f7ff fbaa 	bl	800c324 <COMPASSACCELERO_IO_Write>
}
 800cbd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	2123      	movs	r1, #35	; 0x23
 800cbd8:	2032      	movs	r0, #50	; 0x32
 800cbda:	f7ff bba3 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800cbde <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 800cbde:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800cbe0:	f7ff fb4a 	bl	800c278 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
  
  return ctrl;
}
 800cbe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 800cbe8:	210f      	movs	r1, #15
 800cbea:	2032      	movs	r0, #50	; 0x32
 800cbec:	f7ff bbb8 	b.w	800c360 <COMPASSACCELERO_IO_Read>

0800cbf0 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 800cbf0:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800cbf2:	2124      	movs	r1, #36	; 0x24
 800cbf4:	2032      	movs	r0, #50	; 0x32
 800cbf6:	f7ff fbb3 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800cbfa:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800cbfe:	b2c2      	uxtb	r2, r0
}
 800cc00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800cc04:	2124      	movs	r1, #36	; 0x24
 800cc06:	2032      	movs	r0, #50	; 0x32
 800cc08:	f7ff bb8c 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800cc0c <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800cc0c:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cc0e:	2121      	movs	r1, #33	; 0x21
{
 800cc10:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cc12:	2032      	movs	r0, #50	; 0x32
 800cc14:	f7ff fba4 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800cc18:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cc1c:	ea40 0204 	orr.w	r2, r0, r4
 800cc20:	2121      	movs	r1, #33	; 0x21
}
 800cc22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cc26:	2032      	movs	r0, #50	; 0x32
 800cc28:	f7ff bb7c 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800cc2c <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800cc2c:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cc2e:	2121      	movs	r1, #33	; 0x21
{
 800cc30:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cc32:	2032      	movs	r0, #50	; 0x32
 800cc34:	f7ff fb94 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 800cc38:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cc3c:	ea40 0204 	orr.w	r2, r0, r4
 800cc40:	2121      	movs	r1, #33	; 0x21
}
 800cc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cc46:	2032      	movs	r0, #50	; 0x32
 800cc48:	f7ff bb6c 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800cc4c <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800cc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800cc50:	2123      	movs	r1, #35	; 0x23
{
 800cc52:	4605      	mov	r5, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800cc54:	2032      	movs	r0, #50	; 0x32
 800cc56:	f7ff fb83 	bl	800c360 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800cc5a:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800cc5c:	4606      	mov	r6, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800cc5e:	2032      	movs	r0, #50	; 0x32
 800cc60:	f7ff fb7e 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800cc64:	2128      	movs	r1, #40	; 0x28
 800cc66:	2032      	movs	r0, #50	; 0x32
 800cc68:	f7ff fb7a 	bl	800c360 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800cc6c:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800cc6e:	b247      	sxtb	r7, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800cc70:	2032      	movs	r0, #50	; 0x32
 800cc72:	f7ff fb75 	bl	800c360 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800cc76:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800cc78:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800cc7c:	2032      	movs	r0, #50	; 0x32
 800cc7e:	f7ff fb6f 	bl	800c360 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800cc82:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800cc84:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800cc86:	2032      	movs	r0, #50	; 0x32
 800cc88:	f7ff fb6a 	bl	800c360 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800cc8c:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800cc8e:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800cc92:	2032      	movs	r0, #50	; 0x32
 800cc94:	f7ff fb64 	bl	800c360 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800cc98:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800cc9a:	fa4f f880 	sxtb.w	r8, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800cc9e:	2032      	movs	r0, #50	; 0x32
 800cca0:	f7ff fb5e 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800cca4:	0672      	lsls	r2, r6, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800cca6:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800cca8:	d51a      	bpl.n	800cce0 <LSM303AGR_AccReadXYZ+0x94>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800ccaa:	eb09 2707 	add.w	r7, r9, r7, lsl #8
 800ccae:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 800ccb2:	b23f      	sxth	r7, r7
 800ccb4:	b224      	sxth	r4, r4
 800ccb6:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 800ccba:	f006 0030 	and.w	r0, r6, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800ccbe:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800ccc0:	b21a      	sxth	r2, r3
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800ccc2:	d016      	beq.n	800ccf2 <LSM303AGR_AccReadXYZ+0xa6>
 800ccc4:	2830      	cmp	r0, #48	; 0x30
 800ccc6:	d016      	beq.n	800ccf6 <LSM303AGR_AccReadXYZ+0xaa>
 800ccc8:	2810      	cmp	r0, #16
 800ccca:	bf14      	ite	ne
 800cccc:	2301      	movne	r3, #1
 800ccce:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800ccd0:	435f      	muls	r7, r3
 800ccd2:	435c      	muls	r4, r3
 800ccd4:	4353      	muls	r3, r2
 800ccd6:	802f      	strh	r7, [r5, #0]
 800ccd8:	806c      	strh	r4, [r5, #2]
 800ccda:	80ab      	strh	r3, [r5, #4]
  }
}
 800ccdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800cce0:	eb07 2709 	add.w	r7, r7, r9, lsl #8
 800cce4:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800cce8:	b23f      	sxth	r7, r7
 800ccea:	b224      	sxth	r4, r4
 800ccec:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 800ccf0:	e7e3      	b.n	800ccba <LSM303AGR_AccReadXYZ+0x6e>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800ccf2:	2304      	movs	r3, #4
 800ccf4:	e7ec      	b.n	800ccd0 <LSM303AGR_AccReadXYZ+0x84>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 800ccf6:	230c      	movs	r3, #12
 800ccf8:	e7ea      	b.n	800ccd0 <LSM303AGR_AccReadXYZ+0x84>

0800ccfa <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800ccfa:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800ccfc:	2121      	movs	r1, #33	; 0x21
{
 800ccfe:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cd00:	2032      	movs	r0, #50	; 0x32
 800cd02:	f7ff fb2d 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800cd06:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cd0a:	ea40 0204 	orr.w	r2, r0, r4
 800cd0e:	2121      	movs	r1, #33	; 0x21
}
 800cd10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cd14:	2032      	movs	r0, #50	; 0x32
 800cd16:	f7ff bb05 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800cd1a <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 800cd1a:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800cd1c:	2122      	movs	r1, #34	; 0x22
{
 800cd1e:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800cd20:	2032      	movs	r0, #50	; 0x32
 800cd22:	f7ff fb1d 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800cd26:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800cd28:	b2c2      	uxtb	r2, r0
}
 800cd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800cd2e:	2122      	movs	r1, #34	; 0x22
 800cd30:	2032      	movs	r0, #50	; 0x32
 800cd32:	f7ff baf7 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800cd36 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 800cd36:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800cd38:	2138      	movs	r1, #56	; 0x38
{  
 800cd3a:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800cd3c:	2032      	movs	r0, #50	; 0x32
 800cd3e:	f7ff fb0f 	bl	800c360 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800cd42:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800cd44:	b2c2      	uxtb	r2, r0
 800cd46:	2138      	movs	r1, #56	; 0x38
 800cd48:	2032      	movs	r0, #50	; 0x32
 800cd4a:	f7ff faeb 	bl	800c324 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800cd4e:	220a      	movs	r2, #10
 800cd50:	213a      	movs	r1, #58	; 0x3a
 800cd52:	2032      	movs	r0, #50	; 0x32
 800cd54:	f7ff fae6 	bl	800c324 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800cd58:	2205      	movs	r2, #5
 800cd5a:	213b      	movs	r1, #59	; 0x3b
 800cd5c:	2032      	movs	r0, #50	; 0x32
 800cd5e:	f7ff fae1 	bl	800c324 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800cd62:	2205      	movs	r2, #5
 800cd64:	213c      	movs	r1, #60	; 0x3c
 800cd66:	2032      	movs	r0, #50	; 0x32
 800cd68:	f7ff fadc 	bl	800c324 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800cd6c:	2232      	movs	r2, #50	; 0x32
}
 800cd6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800cd72:	213d      	movs	r1, #61	; 0x3d
 800cd74:	4610      	mov	r0, r2
 800cd76:	f7ff bad5 	b.w	800c324 <COMPASSACCELERO_IO_Write>

0800cd7a <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800cd7a:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800cd7c:	f7ff faae 	bl	800c2dc <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 800cd80:	2080      	movs	r0, #128	; 0x80
 800cd82:	f7ff ffca 	bl	800cd1a <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 800cd86:	2004      	movs	r0, #4
 800cd88:	f7ff ffb7 	bl	800ccfa <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
}
 800cd8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800cd90:	2010      	movs	r0, #16
 800cd92:	f7ff bfd0 	b.w	800cd36 <LSM303AGR_AccClickITEnable>
	...

0800cd98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800cd98:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cdd0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800cd9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800cd9e:	e003      	b.n	800cda8 <LoopCopyDataInit>

0800cda0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800cda0:	4b0c      	ldr	r3, [pc, #48]	; (800cdd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800cda2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800cda4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800cda6:	3104      	adds	r1, #4

0800cda8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800cda8:	480b      	ldr	r0, [pc, #44]	; (800cdd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800cdaa:	4b0c      	ldr	r3, [pc, #48]	; (800cddc <LoopForever+0xe>)
	adds	r2, r0, r1
 800cdac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800cdae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800cdb0:	d3f6      	bcc.n	800cda0 <CopyDataInit>
	ldr	r2, =_sbss
 800cdb2:	4a0b      	ldr	r2, [pc, #44]	; (800cde0 <LoopForever+0x12>)
	b	LoopFillZerobss
 800cdb4:	e002      	b.n	800cdbc <LoopFillZerobss>

0800cdb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800cdb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800cdb8:	f842 3b04 	str.w	r3, [r2], #4

0800cdbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800cdbc:	4b09      	ldr	r3, [pc, #36]	; (800cde4 <LoopForever+0x16>)
	cmp	r2, r3
 800cdbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800cdc0:	d3f9      	bcc.n	800cdb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800cdc2:	f7fb fffd 	bl	8008dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cdc6:	f7f3 fc43 	bl	8000650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800cdca:	f7fa ffe3 	bl	8007d94 <main>

0800cdce <LoopForever>:

LoopForever:
    b LoopForever
 800cdce:	e7fe      	b.n	800cdce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800cdd0:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800cdd4:	0801cc04 	.word	0x0801cc04
	ldr	r0, =_sdata
 800cdd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800cddc:	20000c2c 	.word	0x20000c2c
	ldr	r2, =_sbss
 800cde0:	20000c2c 	.word	0x20000c2c
	ldr	r3, = _ebss
 800cde4:	20001df4 	.word	0x20001df4

0800cde8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800cde8:	e7fe      	b.n	800cde8 <ADC1_2_IRQHandler>
	...

0800cdec <register_fini>:
 800cdec:	4b02      	ldr	r3, [pc, #8]	; (800cdf8 <register_fini+0xc>)
 800cdee:	b113      	cbz	r3, 800cdf6 <register_fini+0xa>
 800cdf0:	4802      	ldr	r0, [pc, #8]	; (800cdfc <register_fini+0x10>)
 800cdf2:	f7f3 bc0b 	b.w	800060c <atexit>
 800cdf6:	4770      	bx	lr
 800cdf8:	00000000 	.word	0x00000000
 800cdfc:	08000625 	.word	0x08000625

0800ce00 <_init>:
 800ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce02:	bf00      	nop
 800ce04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce06:	bc08      	pop	{r3}
 800ce08:	469e      	mov	lr, r3
 800ce0a:	4770      	bx	lr

0800ce0c <_fini>:
 800ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0e:	bf00      	nop
 800ce10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce12:	bc08      	pop	{r3}
 800ce14:	469e      	mov	lr, r3
 800ce16:	4770      	bx	lr
